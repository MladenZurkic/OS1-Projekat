GAS LISTING /tmp/ccdfVMiq.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 54687265 		.string	"ThreadA created\n"
   9      61644120 
   9      63726561 
   9      7465640A 
   9      00
  10 0011 00000000 		.align	3
  10      000000
  11              	.LC1:
  12 0018 54687265 		.string	"ThreadB created\n"
  12      61644220 
  12      63726561 
  12      7465640A 
  12      00
  13 0029 00000000 		.align	3
  13      000000
  14              	.LC2:
  15 0030 46696E69 		.string	"Finished\nReturn value: "
  15      73686564 
  15      0A526574 
  15      75726E20 
  15      76616C75 
  16              		.align	3
  17              	.LC3:
  18 0048 0A00     		.string	"\n"
  19              		.text
  20              		.align	2
  21              		.globl	main
  23              	main:
  24              	.LFB41:
  25              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by marko on 20.4.22..
   3:src/main.cpp  **** //
   4:src/main.cpp  **** 
   5:src/main.cpp  **** #include "../h/tcb.hpp"
   6:src/main.cpp  **** #include "../h/workers.hpp"
   7:src/main.cpp  **** #include "../h/print.hpp"
   8:src/main.cpp  **** #include "../h/riscv.hpp"
   9:src/main.cpp  **** #include "../h/syscall_c.hpp"
  10:src/main.cpp  **** #include "../h/memoryAllocator.hpp"
  11:src/main.cpp  **** 
  12:src/main.cpp  **** int main()
  13:src/main.cpp  **** {
  26              		.loc 1 13 1
  27              		.cfi_startproc
  28 0000 130101FA 		addi	sp,sp,-96
  29              		.cfi_def_cfa_offset 96
  30 0004 233C1104 		sd	ra,88(sp)
  31 0008 23388104 		sd	s0,80(sp)
GAS LISTING /tmp/ccdfVMiq.s 			page 2


  32 000c 23349104 		sd	s1,72(sp)
  33 0010 23302105 		sd	s2,64(sp)
  34              		.cfi_offset 1, -8
  35              		.cfi_offset 8, -16
  36              		.cfi_offset 9, -24
  37              		.cfi_offset 18, -32
  38 0014 13040106 		addi	s0,sp,96
  39              		.cfi_def_cfa 8, 0
  14:src/main.cpp  ****     TCB *threads[5];
  40              		.loc 1 14 5
  15:src/main.cpp  **** 
  16:src/main.cpp  ****     MemoryAllocator::initFreeBlock();
  41              		.loc 1 16 5
  42              	.LBB16:
  43              	.LBB17:
  44              		.file 2 "src/../h/memoryAllocator.hpp"
   1:src/../h/memoryAllocator.hpp **** #ifndef memoryAllocator
   2:src/../h/memoryAllocator.hpp **** #define memoryAllocator
   3:src/../h/memoryAllocator.hpp **** 
   4:src/../h/memoryAllocator.hpp **** #include "../lib/hw.h"
   5:src/../h/memoryAllocator.hpp **** 
   6:src/../h/memoryAllocator.hpp **** struct DataBlock {
   7:src/../h/memoryAllocator.hpp ****     DataBlock* next;
   8:src/../h/memoryAllocator.hpp ****     DataBlock* prev;
   9:src/../h/memoryAllocator.hpp ****     size_t size;
  10:src/../h/memoryAllocator.hpp **** };
  11:src/../h/memoryAllocator.hpp **** 
  12:src/../h/memoryAllocator.hpp **** class MemoryAllocator {
  13:src/../h/memoryAllocator.hpp **** public:
  14:src/../h/memoryAllocator.hpp ****     static DataBlock* free;
  15:src/../h/memoryAllocator.hpp ****     static DataBlock* used;
  16:src/../h/memoryAllocator.hpp **** 
  17:src/../h/memoryAllocator.hpp ****     static void* mem_alloc(size_t size);
  18:src/../h/memoryAllocator.hpp **** 
  19:src/../h/memoryAllocator.hpp ****     static int mem_free (void* ptr);
  20:src/../h/memoryAllocator.hpp **** 
  21:src/../h/memoryAllocator.hpp ****     static void tryToJoin(DataBlock* curr);
  22:src/../h/memoryAllocator.hpp **** 
  23:src/../h/memoryAllocator.hpp ****     static void initFreeBlock() {
  24:src/../h/memoryAllocator.hpp **** 
  25:src/../h/memoryAllocator.hpp ****         MemoryAllocator::free = (DataBlock*)((char*)HEAP_START_ADDR);
  45              		.loc 2 25 9
  46              		.loc 2 25 31 is_stmt 0
  47 0018 97070000 		la	a5,HEAP_START_ADDR
  47      83B70700 
  48 0020 83B60700 		ld	a3,0(a5)
  49 0024 17070000 		la	a4,_ZN15MemoryAllocator4freeE
  49      03370700 
  50 002c 2330D700 		sd	a3,0(a4)
  26:src/../h/memoryAllocator.hpp ****         used = nullptr;
  51              		.loc 2 26 9 is_stmt 1
  52              		.loc 2 26 14 is_stmt 0
  53 0030 17060000 		la	a2,_ZN15MemoryAllocator4usedE
  53      03360600 
  54 0038 23300600 		sd	zero,0(a2)
  27:src/../h/memoryAllocator.hpp **** 
  28:src/../h/memoryAllocator.hpp ****         free->next = nullptr;
GAS LISTING /tmp/ccdfVMiq.s 			page 3


  55              		.loc 2 28 9 is_stmt 1
  56              		.loc 2 28 20 is_stmt 0
  57 003c 23B00600 		sd	zero,0(a3)
  29:src/../h/memoryAllocator.hpp ****         free->prev  = nullptr;
  58              		.loc 2 29 9 is_stmt 1
  59              		.loc 2 29 15 is_stmt 0
  60 0040 03370700 		ld	a4,0(a4)
  61              		.loc 2 29 21
  62 0044 23340700 		sd	zero,8(a4)
  30:src/../h/memoryAllocator.hpp ****         free->size = ((char*)HEAP_START_ADDR - (char*)HEAP_END_ADDR - sizeof(DataBlock)); //FOR NOW
  63              		.loc 2 30 9 is_stmt 1
  64              		.loc 2 30 23 is_stmt 0
  65 0048 83B70700 		ld	a5,0(a5)
  66              		.loc 2 30 48
  67 004c 97060000 		la	a3,HEAP_END_ADDR
  67      83B60600 
  68 0054 83B60600 		ld	a3,0(a3)
  69              		.loc 2 30 46
  70 0058 B387D740 		sub	a5,a5,a3
  71              		.loc 2 30 69
  72 005c 938787FE 		addi	a5,a5,-24
  73              		.loc 2 30 20
  74 0060 2338F700 		sd	a5,16(a4)
  75              	.LBE17:
  76              	.LBE16:
  17:src/main.cpp  **** 
  18:src/main.cpp  ****     threads[0] = TCB::createThread(nullptr,nullptr);
  77              		.loc 1 18 5 is_stmt 1
  78              		.loc 1 18 35 is_stmt 0
  79 0064 93050000 		li	a1,0
  80 0068 13050000 		li	a0,0
  81 006c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
  81      E7800000 
  82              	.LVL0:
  83              		.loc 1 18 16
  84 0074 233CA4FA 		sd	a0,-72(s0)
  19:src/main.cpp  ****     TCB::running = threads[0];
  85              		.loc 1 19 5 is_stmt 1
  86              		.loc 1 19 18 is_stmt 0
  87 0078 97070000 		la	a5,_ZN3TCB7runningE
  87      83B70700 
  88 0080 23B0A700 		sd	a0,0(a5)
  20:src/main.cpp  **** 
  21:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::stvecVectorTable | 0b01);
  89              		.loc 1 21 5 is_stmt 1
  90              		.loc 1 21 19 is_stmt 0
  91 0084 97070000 		la	a5,_ZN5Riscv16stvecVectorTableEv
  91      83B70700 
  92 008c 93E71700 		ori	a5,a5,1
  93              	.LVL1:
  94              	.LBB18:
  95              	.LBB19:
  96              		.file 3 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccdfVMiq.s 			page 4


   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
GAS LISTING /tmp/ccdfVMiq.s 			page 5


  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     //stvec Vector "table"
  83:src/../h/riscv.hpp ****     static void stvecVectorTable();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     //read a0 register
  86:src/../h/riscv.hpp ****     static uint64 r_a0();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     //write to a0 register
  89:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a1 register
  92:src/../h/riscv.hpp ****     static uint64 r_a1();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //write to a1 register
  95:src/../h/riscv.hpp ****     static void w_a1(uint64 writeValue);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //read a2 register
  98:src/../h/riscv.hpp ****     static uint64 r_a2();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //write to a2 register
 101:src/../h/riscv.hpp ****     static void w_a2(uint64 writeValue);
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp ****     //read a3 register
 104:src/../h/riscv.hpp ****     static uint64 r_a3();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     //write to a3 register
 107:src/../h/riscv.hpp ****     static void w_a3(uint64 writeValue);
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp ****     //read a4 register
 110:src/../h/riscv.hpp ****     static uint64 r_a4();
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     //write to a4 register
 113:src/../h/riscv.hpp ****     static void w_a4(uint64 writeValue);
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp ****     //read a5 register
 116:src/../h/riscv.hpp ****     static uint64 r_a5();
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp ****     //write to a5 register
GAS LISTING /tmp/ccdfVMiq.s 			page 6


 119:src/../h/riscv.hpp ****     static void w_a5(uint64 writeValue);
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp ****     //read a6 register
 122:src/../h/riscv.hpp ****     static uint64 r_a6();
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp ****     //write to a6 register
 125:src/../h/riscv.hpp ****     static void w_a6(uint64 writeValue);
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp ****     //read a7 register
 128:src/../h/riscv.hpp ****     static uint64 r_a7();
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp ****     //write to a7 register
 131:src/../h/riscv.hpp ****     static void w_a7(uint64 writeValue);
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** private:
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp ****     // supervisor trap handler
 137:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
 142:src/../h/riscv.hpp **** };
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     uint64 volatile scause;
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 149:src/../h/riscv.hpp ****     return scause;
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sepc;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 161:src/../h/riscv.hpp ****     return sepc;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile stvec;
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 173:src/../h/riscv.hpp ****     return stvec;
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccdfVMiq.s 			page 7


 176:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  97              		.loc 3 178 5 is_stmt 1
  98              		.loc 3 178 69 is_stmt 0
  99              	#APP
 100              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 101              		csrw stvec, a5
 102              	# 0 "" 2
 103              	.LVL2:
 104              	#NO_APP
 105              	.LBE19:
 106              	.LBE18:
  22:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
 107              		.loc 1 22 5 is_stmt 1
 108              	.LBB20:
 109              	.LBB21:
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile stval;
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 185:src/../h/riscv.hpp ****     return stval;
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 191:src/../h/riscv.hpp **** }
 192:src/../h/riscv.hpp **** 
 193:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 194:src/../h/riscv.hpp **** {
 195:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 196:src/../h/riscv.hpp **** }
 197:src/../h/riscv.hpp **** 
 198:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 199:src/../h/riscv.hpp **** {
 200:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 201:src/../h/riscv.hpp **** }
 202:src/../h/riscv.hpp **** 
 203:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 204:src/../h/riscv.hpp **** {
 205:src/../h/riscv.hpp ****     uint64 volatile sip;
 206:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 207:src/../h/riscv.hpp ****     return sip;
 208:src/../h/riscv.hpp **** }
 209:src/../h/riscv.hpp **** 
 210:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 211:src/../h/riscv.hpp **** {
 212:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 213:src/../h/riscv.hpp **** }
 214:src/../h/riscv.hpp **** 
 215:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 216:src/../h/riscv.hpp **** {
 217:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 110              		.loc 3 217 5
GAS LISTING /tmp/ccdfVMiq.s 			page 8


 111              		.loc 3 217 68 is_stmt 0
 112 0094 93072000 		li	a5,2
 113              	#APP
 114              	# 217 "src/../h/riscv.hpp" 1
 218              	}
 115              		csrs sstatus, a5
 116              	# 0 "" 2
 117              	.LVL3:
 118              	#NO_APP
 119              	.LBE21:
 120              	.LBE20:
  23:src/main.cpp  **** 
  24:src/main.cpp  ****     int return1 = thread_create(&threads[1], workerBodyA, nullptr);
 121              		.loc 1 24 5 is_stmt 1
 122              		.loc 1 24 32 is_stmt 0
 123 009c 13060000 		li	a2,0
 124 00a0 97050000 		la	a1,_Z11workerBodyAPv
 124      83B50500 
 125 00a8 130504FC 		addi	a0,s0,-64
 126 00ac 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
 126      E7800000 
 127              	.LVL4:
 128 00b4 93040500 		mv	s1,a0
 129              	.LVL5:
  25:src/main.cpp  ****     printString("ThreadA created\n");
 130              		.loc 1 25 5 is_stmt 1
 131              		.loc 1 25 16 is_stmt 0
 132 00b8 17050000 		lla	a0,.LC0
 132      13050500 
 133 00c0 97000000 		call	_Z11printStringPKc@plt
 133      E7800000 
 134              	.LVL6:
  26:src/main.cpp  ****     printInteger(return1);
 135              		.loc 1 26 5 is_stmt 1
 136              		.loc 1 26 17 is_stmt 0
 137 00c8 13850400 		mv	a0,s1
 138 00cc 97000000 		call	_Z12printIntegerm@plt
 138      E7800000 
 139              	.LVL7:
  27:src/main.cpp  ****     int return2 = thread_create(&threads[2], workerBodyB, threads[1]);
 140              		.loc 1 27 5 is_stmt 1
 141              		.loc 1 27 32 is_stmt 0
 142 00d4 033604FC 		ld	a2,-64(s0)
 143 00d8 97050000 		la	a1,_Z11workerBodyBPv
 143      83B50500 
 144 00e0 130584FC 		addi	a0,s0,-56
 145 00e4 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
 145      E7800000 
 146              	.LVL8:
 147 00ec 93040500 		mv	s1,a0
 148              	.LVL9:
  28:src/main.cpp  ****     printString("ThreadB created\n");
 149              		.loc 1 28 5 is_stmt 1
 150              		.loc 1 28 16 is_stmt 0
 151 00f0 17050000 		lla	a0,.LC1
 151      13050500 
 152 00f8 97000000 		call	_Z11printStringPKc@plt
GAS LISTING /tmp/ccdfVMiq.s 			page 9


 152      E7800000 
 153              	.LVL10:
  29:src/main.cpp  ****     printInteger(return2);
 154              		.loc 1 29 5 is_stmt 1
 155              		.loc 1 29 17 is_stmt 0
 156 0100 13850400 		mv	a0,s1
 157 0104 97000000 		call	_Z12printIntegerm@plt
 157      E7800000 
 158              	.LVL11:
  30:src/main.cpp  **** 
  31:src/main.cpp  ****     MySemaphore* semaphore[2];
 159              		.loc 1 31 5 is_stmt 1
  32:src/main.cpp  ****     sem_open(&semaphore[0], 0);
 160              		.loc 1 32 5
 161              		.loc 1 32 13 is_stmt 0
 162 010c 93050000 		li	a1,0
 163 0110 130584FA 		addi	a0,s0,-88
 164 0114 97000000 		call	_Z8sem_openPP11MySemaphorej@plt
 164      E7800000 
 165              	.LVL12:
 166 011c 6F00C000 		j	.L4
 167              	.L2:
  33:src/main.cpp  **** 
  34:src/main.cpp  ****     while (!(threads[1]->isFinished() &&
  35:src/main.cpp  ****              threads[2]->isFinished()))
  36:src/main.cpp  ****     {
  37:src/main.cpp  ****         thread_dispatch();
 168              		.loc 1 37 9 is_stmt 1 discriminator 3
 169              		.loc 1 37 24 is_stmt 0 discriminator 3
 170 0120 97000000 		call	_Z15thread_dispatchv@plt
 170      E7800000 
 171              	.LVL13:
 172              	.L4:
  34:src/main.cpp  ****              threads[2]->isFinished()))
 173              		.loc 1 34 5 is_stmt 1
  34:src/main.cpp  ****              threads[2]->isFinished()))
 174              		.loc 1 34 12
  34:src/main.cpp  ****              threads[2]->isFinished()))
 175              		.loc 1 34 23 is_stmt 0
 176 0128 833704FC 		ld	a5,-64(s0)
 177              	.LVL14:
 178              	.LBB22:
 179              	.LBB23:
 180              		.file 4 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
GAS LISTING /tmp/ccdfVMiq.s 			page 10


  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
 181              		.loc 4 17 31 is_stmt 1
 182              		.loc 4 17 38 is_stmt 0
 183 012c 83C70702 		lbu	a5,32(a5)
 184              	.LVL15:
 185              	.LBE23:
 186              	.LBE22:
  34:src/main.cpp  ****              threads[2]->isFinished()))
 187              		.loc 1 34 12
 188 0130 E38807FE 		beqz	a5,.L2
  35:src/main.cpp  ****     {
 189              		.loc 1 35 23 discriminator 2
 190 0134 833784FC 		ld	a5,-56(s0)
 191              	.LVL16:
 192              	.LBB24:
 193              	.LBB25:
 194              		.loc 4 17 31 is_stmt 1 discriminator 2
 195              		.loc 4 17 38 is_stmt 0 discriminator 2
 196 0138 83C70702 		lbu	a5,32(a5)
 197              	.LVL17:
 198              	.LBE25:
 199              	.LBE24:
  34:src/main.cpp  ****              threads[2]->isFinished()))
 200              		.loc 1 34 12 discriminator 2
 201 013c E38207FE 		beqz	a5,.L2
  38:src/main.cpp  ****     }
  39:src/main.cpp  **** 
  40:src/main.cpp  **** 
  41:src/main.cpp  **** 
  42:src/main.cpp  ****     thread_create(&threads[3], workerBodyC, semaphore[0]);
 202              		.loc 1 42 5 is_stmt 1
 203              		.loc 1 42 18 is_stmt 0
 204 0140 033684FA 		ld	a2,-88(s0)
 205 0144 97050000 		la	a1,_Z11workerBodyCPv
 205      83B50500 
 206 014c 930404FD 		addi	s1,s0,-48
 207              	.LVL18:
 208 0150 13850400 		mv	a0,s1
 209 0154 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
 209      E7800000 
 210              	.LVL19:
  43:src/main.cpp  ****     thread_create(&threads[3], workerBodyD, semaphore[0]);
 211              		.loc 1 43 5 is_stmt 1
 212              		.loc 1 43 18 is_stmt 0
 213 015c 033684FA 		ld	a2,-88(s0)
 214 0160 97050000 		la	a1,_Z11workerBodyDPv
 214      83B50500 
 215 0168 13850400 		mv	a0,s1
 216 016c 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
 216      E7800000 
 217              	.LVL20:
  44:src/main.cpp  ****     //thread_dispatch();
  45:src/main.cpp  ****     int returnValue = sem_wait(semaphore[0]);
 218              		.loc 1 45 5 is_stmt 1
GAS LISTING /tmp/ccdfVMiq.s 			page 11


 219              		.loc 1 45 31 is_stmt 0
 220 0174 033584FA 		ld	a0,-88(s0)
 221 0178 97000000 		call	_Z8sem_waitP11MySemaphore@plt
 221      E7800000 
 222              	.LVL21:
 223 0180 93040500 		mv	s1,a0
 224              	.LVL22:
  46:src/main.cpp  **** 
  47:src/main.cpp  ****     printString("Finished\nReturn value: ");
 225              		.loc 1 47 5 is_stmt 1
 226              		.loc 1 47 16 is_stmt 0
 227 0184 17050000 		lla	a0,.LC2
 227      13050500 
 228 018c 97000000 		call	_Z11printStringPKc@plt
 228      E7800000 
 229              	.LVL23:
  48:src/main.cpp  ****     printInteger(returnValue);
 230              		.loc 1 48 5 is_stmt 1
 231              		.loc 1 48 17 is_stmt 0
 232 0194 13850400 		mv	a0,s1
 233 0198 97000000 		call	_Z12printIntegerm@plt
 233      E7800000 
 234              	.LVL24:
  49:src/main.cpp  ****     printString("\n");
 235              		.loc 1 49 5 is_stmt 1
 236              		.loc 1 49 16 is_stmt 0
 237 01a0 17050000 		lla	a0,.LC3
 237      13050500 
 238 01a8 97000000 		call	_Z11printStringPKc@plt
 238      E7800000 
 239              	.LVL25:
  50:src/main.cpp  **** 
  51:src/main.cpp  ****     thread_dispatch();
 240              		.loc 1 51 5 is_stmt 1
 241              		.loc 1 51 20 is_stmt 0
 242 01b0 97000000 		call	_Z15thread_dispatchv@plt
 242      E7800000 
 243              	.LVL26:
 244              	.LBB26:
  52:src/main.cpp  ****     for (auto &thread: threads) {
 245              		.loc 1 52 24
 246 01b8 930484FB 		addi	s1,s0,-72
 247              	.LVL27:
 248 01bc 6F004001 		j	.L8
 249              	.LVL28:
 250              	.L7:
  53:src/main.cpp  ****         delete thread;
 251              		.loc 1 53 16
 252 01c0 13050900 		mv	a0,s2
 253 01c4 97000000 		call	_ZdlPv@plt
 253      E7800000 
 254              	.LVL29:
 255              	.L6:
  52:src/main.cpp  ****     for (auto &thread: threads) {
 256              		.loc 1 52 5 is_stmt 1 discriminator 3
 257 01cc 93848400 		addi	s1,s1,8
 258              	.LVL30:
GAS LISTING /tmp/ccdfVMiq.s 			page 12


 259              	.L8:
  52:src/main.cpp  ****     for (auto &thread: threads) {
 260              		.loc 1 52 24 discriminator 1
 261 01d0 930704FE 		addi	a5,s0,-32
 262 01d4 6380F402 		beq	s1,a5,.L5
 263              	.LVL31:
 264              		.loc 1 53 9 discriminator 2
 265              		.loc 1 53 16 is_stmt 0 discriminator 2
 266 01d8 03B90400 		ld	s2,0(s1)
 267              		.loc 1 53 22 discriminator 2
 268 01dc E30809FE 		beqz	s2,.L6
 269              	.LVL32:
 270              	.LBB27:
 271              	.LBB28:
  15:src/../h/tcb.hpp **** 
 272              		.loc 4 15 14 is_stmt 1
  15:src/../h/tcb.hpp **** 
 273              		.loc 4 15 23 is_stmt 0
 274 01e0 03358900 		ld	a0,8(s2)
  15:src/../h/tcb.hpp **** 
 275              		.loc 4 15 28
 276 01e4 E30E05FC 		beqz	a0,.L7
  15:src/../h/tcb.hpp **** 
 277              		.loc 4 15 23
 278 01e8 97000000 		call	_ZdaPv@plt
 278      E7800000 
 279              	.LVL33:
 280 01f0 6FF01FFD 		j	.L7
 281              	.LVL34:
 282              	.L5:
 283              	.LBE28:
 284              	.LBE27:
 285              	.LBE26:
  54:src/main.cpp  ****     }
  55:src/main.cpp  ****     return 0;
 286              		.loc 1 55 5 is_stmt 1
  56:src/main.cpp  **** }
 287              		.loc 1 56 1 is_stmt 0
 288 01f4 13050000 		li	a0,0
 289 01f8 83308105 		ld	ra,88(sp)
 290              		.cfi_restore 1
 291 01fc 03340105 		ld	s0,80(sp)
 292              		.cfi_restore 8
 293              		.cfi_def_cfa 2, 96
 294 0200 83348104 		ld	s1,72(sp)
 295              		.cfi_restore 9
 296              	.LVL35:
 297 0204 03390104 		ld	s2,64(sp)
 298              		.cfi_restore 18
 299 0208 13010106 		addi	sp,sp,96
 300              		.cfi_def_cfa_offset 0
 301 020c 67800000 		jr	ra
 302              		.cfi_endproc
 303              	.LFE41:
 305              	.Letext0:
 306              		.file 5 "src/../h/../lib/hw.h"
 307              		.file 6 "src/../h/list.hpp"
GAS LISTING /tmp/ccdfVMiq.s 			page 13


 308              		.file 7 "src/../h/mySemaphore.hpp"
 309              		.file 8 "src/../h/syscall_c.hpp"
 310              		.file 9 "src/../h/print.hpp"
GAS LISTING /tmp/ccdfVMiq.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccdfVMiq.s:23     .text:0000000000000000 main
     /tmp/ccdfVMiq.s:27     .text:0000000000000000 .L0 
     /tmp/ccdfVMiq.s:28     .text:0000000000000000 .L0 
     /tmp/ccdfVMiq.s:29     .text:0000000000000004 .L0 
     /tmp/ccdfVMiq.s:34     .text:0000000000000014 .L0 
     /tmp/ccdfVMiq.s:35     .text:0000000000000014 .L0 
     /tmp/ccdfVMiq.s:36     .text:0000000000000014 .L0 
     /tmp/ccdfVMiq.s:37     .text:0000000000000014 .L0 
     /tmp/ccdfVMiq.s:39     .text:0000000000000018 .L0 
     /tmp/ccdfVMiq.s:41     .text:0000000000000018 .L0 
     /tmp/ccdfVMiq.s:45     .text:0000000000000018 .L0 
     /tmp/ccdfVMiq.s:46     .text:0000000000000018 .L0 
     /tmp/ccdfVMiq.s:47     .text:0000000000000018 .L0 
     /tmp/ccdfVMiq.s:52     .text:0000000000000030 .L0 
     /tmp/ccdfVMiq.s:53     .text:0000000000000030 .L0 
     /tmp/ccdfVMiq.s:56     .text:000000000000003c .L0 
     /tmp/ccdfVMiq.s:57     .text:000000000000003c .L0 
     /tmp/ccdfVMiq.s:59     .text:0000000000000040 .L0 
     /tmp/ccdfVMiq.s:60     .text:0000000000000040 .L0 
     /tmp/ccdfVMiq.s:62     .text:0000000000000044 .L0 
     /tmp/ccdfVMiq.s:64     .text:0000000000000048 .L0 
     /tmp/ccdfVMiq.s:65     .text:0000000000000048 .L0 
     /tmp/ccdfVMiq.s:67     .text:000000000000004c .L0 
     /tmp/ccdfVMiq.s:70     .text:0000000000000058 .L0 
     /tmp/ccdfVMiq.s:72     .text:000000000000005c .L0 
     /tmp/ccdfVMiq.s:74     .text:0000000000000060 .L0 
     /tmp/ccdfVMiq.s:78     .text:0000000000000064 .L0 
     /tmp/ccdfVMiq.s:79     .text:0000000000000064 .L0 
     /tmp/ccdfVMiq.s:84     .text:0000000000000074 .L0 
     /tmp/ccdfVMiq.s:86     .text:0000000000000078 .L0 
     /tmp/ccdfVMiq.s:87     .text:0000000000000078 .L0 
     /tmp/ccdfVMiq.s:90     .text:0000000000000084 .L0 
     /tmp/ccdfVMiq.s:91     .text:0000000000000084 .L0 
     /tmp/ccdfVMiq.s:98     .text:0000000000000090 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000090 .L0 
     /tmp/ccdfVMiq.s:110    .text:0000000000000094 .L0 
     /tmp/ccdfVMiq.s:111    .text:0000000000000094 .L0 
     /tmp/ccdfVMiq.s:112    .text:0000000000000094 .L0 
     /tmp/ccdfVMiq.s:122    .text:000000000000009c .L0 
     /tmp/ccdfVMiq.s:123    .text:000000000000009c .L0 
     /tmp/ccdfVMiq.s:131    .text:00000000000000b8 .L0 
     /tmp/ccdfVMiq.s:132    .text:00000000000000b8 .L0 
     /tmp/ccdfVMiq.s:136    .text:00000000000000c8 .L0 
     /tmp/ccdfVMiq.s:137    .text:00000000000000c8 .L0 
     /tmp/ccdfVMiq.s:141    .text:00000000000000d4 .L0 
     /tmp/ccdfVMiq.s:142    .text:00000000000000d4 .L0 
     /tmp/ccdfVMiq.s:150    .text:00000000000000f0 .L0 
     /tmp/ccdfVMiq.s:151    .text:00000000000000f0 .L0 
     /tmp/ccdfVMiq.s:155    .text:0000000000000100 .L0 
     /tmp/ccdfVMiq.s:156    .text:0000000000000100 .L0 
     /tmp/ccdfVMiq.s:160    .text:000000000000010c .L0 
     /tmp/ccdfVMiq.s:161    .text:000000000000010c .L0 
     /tmp/ccdfVMiq.s:162    .text:000000000000010c .L0 
     /tmp/ccdfVMiq.s:169    .text:0000000000000120 .L0 
     /tmp/ccdfVMiq.s:170    .text:0000000000000120 .L0 
GAS LISTING /tmp/ccdfVMiq.s 			page 15


     /tmp/ccdfVMiq.s:174    .text:0000000000000128 .L0 
     /tmp/ccdfVMiq.s:175    .text:0000000000000128 .L0 
     /tmp/ccdfVMiq.s:176    .text:0000000000000128 .L0 
     /tmp/ccdfVMiq.s:182    .text:000000000000012c .L0 
     /tmp/ccdfVMiq.s:183    .text:000000000000012c .L0 
     /tmp/ccdfVMiq.s:188    .text:0000000000000130 .L0 
     /tmp/ccdfVMiq.s:190    .text:0000000000000134 .L0 
     /tmp/ccdfVMiq.s:195    .text:0000000000000138 .L0 
     /tmp/ccdfVMiq.s:196    .text:0000000000000138 .L0 
     /tmp/ccdfVMiq.s:201    .text:000000000000013c .L0 
     /tmp/ccdfVMiq.s:203    .text:0000000000000140 .L0 
     /tmp/ccdfVMiq.s:204    .text:0000000000000140 .L0 
     /tmp/ccdfVMiq.s:212    .text:000000000000015c .L0 
     /tmp/ccdfVMiq.s:213    .text:000000000000015c .L0 
     /tmp/ccdfVMiq.s:219    .text:0000000000000174 .L0 
     /tmp/ccdfVMiq.s:220    .text:0000000000000174 .L0 
     /tmp/ccdfVMiq.s:226    .text:0000000000000184 .L0 
     /tmp/ccdfVMiq.s:227    .text:0000000000000184 .L0 
     /tmp/ccdfVMiq.s:231    .text:0000000000000194 .L0 
     /tmp/ccdfVMiq.s:232    .text:0000000000000194 .L0 
     /tmp/ccdfVMiq.s:236    .text:00000000000001a0 .L0 
     /tmp/ccdfVMiq.s:237    .text:00000000000001a0 .L0 
     /tmp/ccdfVMiq.s:241    .text:00000000000001b0 .L0 
     /tmp/ccdfVMiq.s:242    .text:00000000000001b0 .L0 
     /tmp/ccdfVMiq.s:246    .text:00000000000001b8 .L0 
     /tmp/ccdfVMiq.s:252    .text:00000000000001c0 .L0 
     /tmp/ccdfVMiq.s:257    .text:00000000000001cc .L0 
     /tmp/ccdfVMiq.s:261    .text:00000000000001d0 .L0 
     /tmp/ccdfVMiq.s:265    .text:00000000000001d8 .L0 
     /tmp/ccdfVMiq.s:266    .text:00000000000001d8 .L0 
     /tmp/ccdfVMiq.s:268    .text:00000000000001dc .L0 
     /tmp/ccdfVMiq.s:273    .text:00000000000001e0 .L0 
     /tmp/ccdfVMiq.s:274    .text:00000000000001e0 .L0 
     /tmp/ccdfVMiq.s:276    .text:00000000000001e4 .L0 
     /tmp/ccdfVMiq.s:278    .text:00000000000001e8 .L0 
     /tmp/ccdfVMiq.s:287    .text:00000000000001f4 .L0 
     /tmp/ccdfVMiq.s:288    .text:00000000000001f4 .L0 
     /tmp/ccdfVMiq.s:290    .text:00000000000001fc .L0 
     /tmp/ccdfVMiq.s:292    .text:0000000000000200 .L0 
     /tmp/ccdfVMiq.s:293    .text:0000000000000200 .L0 
     /tmp/ccdfVMiq.s:295    .text:0000000000000204 .L0 
     /tmp/ccdfVMiq.s:298    .text:0000000000000208 .L0 
     /tmp/ccdfVMiq.s:300    .text:000000000000020c .L0 
     /tmp/ccdfVMiq.s:302    .text:0000000000000210 .L0 
     /tmp/ccdfVMiq.s:311    .text:0000000000000210 .L0 
     /tmp/ccdfVMiq.s:47     .text:0000000000000018 .L0 
     /tmp/ccdfVMiq.s:49     .text:0000000000000024 .L0 
     /tmp/ccdfVMiq.s:53     .text:0000000000000030 .L0 
     /tmp/ccdfVMiq.s:67     .text:000000000000004c .L0 
     /tmp/ccdfVMiq.s:87     .text:0000000000000078 .L0 
     /tmp/ccdfVMiq.s:91     .text:0000000000000084 .L0 
     /tmp/ccdfVMiq.s:124    .text:00000000000000a0 .L0 
     /tmp/ccdfVMiq.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccdfVMiq.s:132    .text:00000000000000b8 .L0 
     /tmp/ccdfVMiq.s:143    .text:00000000000000d8 .L0 
     /tmp/ccdfVMiq.s:11     .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccdfVMiq.s:151    .text:00000000000000f0 .L0 
GAS LISTING /tmp/ccdfVMiq.s 			page 16


     /tmp/ccdfVMiq.s:205    .text:0000000000000144 .L0 
     /tmp/ccdfVMiq.s:214    .text:0000000000000160 .L0 
     /tmp/ccdfVMiq.s:14     .rodata.str1.8:0000000000000030 .LC2
     /tmp/ccdfVMiq.s:227    .text:0000000000000184 .L0 
     /tmp/ccdfVMiq.s:17     .rodata.str1.8:0000000000000048 .LC3
     /tmp/ccdfVMiq.s:237    .text:00000000000001a0 .L0 
     /tmp/ccdfVMiq.s:172    .text:0000000000000128 .L4
     /tmp/ccdfVMiq.s:167    .text:0000000000000120 .L2
     /tmp/ccdfVMiq.s:259    .text:00000000000001d0 .L8
     /tmp/ccdfVMiq.s:282    .text:00000000000001f4 .L5
     /tmp/ccdfVMiq.s:255    .text:00000000000001cc .L6
     /tmp/ccdfVMiq.s:250    .text:00000000000001c0 .L7
     /tmp/ccdfVMiq.s:1896   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccdfVMiq.s:3316   .debug_str:0000000000000a2f .LASF203
     /tmp/ccdfVMiq.s:3066   .debug_str:000000000000032d .LASF204
     /tmp/ccdfVMiq.s:3294   .debug_str:000000000000097e .LASF205
     /tmp/ccdfVMiq.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccdfVMiq.s:305    .text:0000000000000210 .Letext0
     /tmp/ccdfVMiq.s:2964   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccdfVMiq.s:3098   .debug_str:0000000000000430 .LASF0
     /tmp/ccdfVMiq.s:3138   .debug_str:0000000000000536 .LASF1
     /tmp/ccdfVMiq.s:3248   .debug_str:000000000000085e .LASF2
     /tmp/ccdfVMiq.s:3256   .debug_str:0000000000000899 .LASF4
     /tmp/ccdfVMiq.s:3108   .debug_str:0000000000000466 .LASF3
     /tmp/ccdfVMiq.s:2986   .debug_str:00000000000000ae .LASF5
     /tmp/ccdfVMiq.s:3210   .debug_str:000000000000075b .LASF6
     /tmp/ccdfVMiq.s:3126   .debug_str:00000000000004c4 .LASF7
     /tmp/ccdfVMiq.s:3074   .debug_str:0000000000000355 .LASF8
     /tmp/ccdfVMiq.s:3082   .debug_str:00000000000003b3 .LASF9
     /tmp/ccdfVMiq.s:3012   .debug_str:000000000000016f .LASF10
     /tmp/ccdfVMiq.s:3064   .debug_str:000000000000031e .LASF11
     /tmp/ccdfVMiq.s:3028   .debug_str:00000000000001ef .LASF12
     /tmp/ccdfVMiq.s:3010   .debug_str:000000000000015f .LASF13
     /tmp/ccdfVMiq.s:3290   .debug_str:000000000000095d .LASF14
     /tmp/ccdfVMiq.s:3048   .debug_str:000000000000026c .LASF15
     /tmp/ccdfVMiq.s:3276   .debug_str:00000000000008fb .LASF16
     /tmp/ccdfVMiq.s:3350   .debug_str:0000000000000be7 .LASF34
     /tmp/ccdfVMiq.s:3340   .debug_str:0000000000000ba0 .LASF206
     /tmp/ccdfVMiq.s:3282   .debug_str:0000000000000930 .LASF17
     /tmp/ccdfVMiq.s:3178   .debug_str:0000000000000692 .LASF18
     /tmp/ccdfVMiq.s:3172   .debug_str:000000000000066e .LASF19
     /tmp/ccdfVMiq.s:3278   .debug_str:0000000000000911 .LASF21
     /tmp/ccdfVMiq.s:3060   .debug_str:00000000000002e6 .LASF26
     /tmp/ccdfVMiq.s:3250   .debug_str:000000000000086c .LASF207
     /tmp/ccdfVMiq.s:3238   .debug_str:0000000000000818 .LASF208
     /tmp/ccdfVMiq.s:3132   .debug_str:0000000000000504 .LASF20
     /tmp/ccdfVMiq.s:3002   .debug_str:000000000000010b .LASF22
     /tmp/ccdfVMiq.s:3150   .debug_str:000000000000059c .LASF23
     /tmp/ccdfVMiq.s:3050   .debug_str:0000000000000282 .LASF24
     /tmp/ccdfVMiq.s:3206   .debug_str:000000000000073e .LASF25
     /tmp/ccdfVMiq.s:3352   .debug_str:0000000000000bf1 .LASF27
     /tmp/ccdfVMiq.s:3394   .debug_str:0000000000000d12 .LASF28
     /tmp/ccdfVMiq.s:3382   .debug_str:0000000000000ca6 .LASF29
     /tmp/ccdfVMiq.s:3268   .debug_str:00000000000008d8 .LASF30
     /tmp/ccdfVMiq.s:3124   .debug_str:00000000000004a7 .LASF31
     /tmp/ccdfVMiq.s:3232   .debug_str:00000000000007f6 .LASF32
     /tmp/ccdfVMiq.s:2978   .debug_str:0000000000000056 .LASF33
GAS LISTING /tmp/ccdfVMiq.s 			page 17


     /tmp/ccdfVMiq.s:3298   .debug_str:00000000000009c9 .LASF157
     /tmp/ccdfVMiq.s:3258   .debug_str:00000000000008a0 .LASF35
     /tmp/ccdfVMiq.s:2982   .debug_str:0000000000000098 .LASF36
     /tmp/ccdfVMiq.s:3300   .debug_str:00000000000009d1 .LASF37
     /tmp/ccdfVMiq.s:3174   .debug_str:0000000000000673 .LASF38
     /tmp/ccdfVMiq.s:2996   .debug_str:00000000000000ec .LASF39
     /tmp/ccdfVMiq.s:3336   .debug_str:0000000000000b80 .LASF40
     /tmp/ccdfVMiq.s:3372   .debug_str:0000000000000c4e .LASF41
     /tmp/ccdfVMiq.s:3004   .debug_str:0000000000000128 .LASF42
     /tmp/ccdfVMiq.s:3302   .debug_str:00000000000009dc .LASF43
     /tmp/ccdfVMiq.s:3024   .debug_str:00000000000001bf .LASF44
     /tmp/ccdfVMiq.s:3288   .debug_str:0000000000000950 .LASF45
     /tmp/ccdfVMiq.s:3344   .debug_str:0000000000000bb3 .LASF46
     /tmp/ccdfVMiq.s:3194   .debug_str:00000000000006f0 .LASF209
     /tmp/ccdfVMiq.s:3142   .debug_str:000000000000056f .LASF65
     /tmp/ccdfVMiq.s:3320   .debug_str:0000000000000b07 .LASF67
     /tmp/ccdfVMiq.s:3312   .debug_str:0000000000000a1a .LASF163
     /tmp/ccdfVMiq.s:3318   .debug_str:0000000000000af3 .LASF210
     /tmp/ccdfVMiq.s:2972   .debug_str:0000000000000030 .LASF47
     /tmp/ccdfVMiq.s:3272   .debug_str:00000000000008ec .LASF48
     /tmp/ccdfVMiq.s:3330   .debug_str:0000000000000b52 .LASF49
     /tmp/ccdfVMiq.s:3274   .debug_str:00000000000008f2 .LASF50
     /tmp/ccdfVMiq.s:3186   .debug_str:00000000000006c7 .LASF51
     /tmp/ccdfVMiq.s:3000   .debug_str:00000000000000fd .LASF52
     /tmp/ccdfVMiq.s:3144   .debug_str:0000000000000575 .LASF54
     /tmp/ccdfVMiq.s:3032   .debug_str:0000000000000204 .LASF56
     /tmp/ccdfVMiq.s:2980   .debug_str:0000000000000070 .LASF58
     /tmp/ccdfVMiq.s:3040   .debug_str:0000000000000247 .LASF53
     /tmp/ccdfVMiq.s:3022   .debug_str:00000000000001ac .LASF55
     /tmp/ccdfVMiq.s:3308   .debug_str:0000000000000a04 .LASF57
     /tmp/ccdfVMiq.s:3068   .debug_str:000000000000033a .LASF59
     /tmp/ccdfVMiq.s:3254   .debug_str:000000000000088e .LASF211
     /tmp/ccdfVMiq.s:3152   .debug_str:00000000000005a4 .LASF60
     /tmp/ccdfVMiq.s:3356   .debug_str:0000000000000c16 .LASF61
     /tmp/ccdfVMiq.s:3346   .debug_str:0000000000000bd3 .LASF212
     /tmp/ccdfVMiq.s:3056   .debug_str:00000000000002c7 .LASF62
     /tmp/ccdfVMiq.s:3314   .debug_str:0000000000000a22 .LASF63
     /tmp/ccdfVMiq.s:3036   .debug_str:0000000000000229 .LASF64
     /tmp/ccdfVMiq.s:3088   .debug_str:00000000000003ec .LASF66
     /tmp/ccdfVMiq.s:3096   .debug_str:0000000000000418 .LASF68
     /tmp/ccdfVMiq.s:3338   .debug_str:0000000000000b97 .LASF70
     /tmp/ccdfVMiq.s:3332   .debug_str:0000000000000b5a .LASF72
     /tmp/ccdfVMiq.s:3244   .debug_str:000000000000084a .LASF69
     /tmp/ccdfVMiq.s:3188   .debug_str:00000000000006cf .LASF75
     /tmp/ccdfVMiq.s:3226   .debug_str:00000000000007c8 .LASF71
     /tmp/ccdfVMiq.s:3228   .debug_str:00000000000007cf .LASF73
     /tmp/ccdfVMiq.s:3180   .debug_str:0000000000000697 .LASF74
     /tmp/ccdfVMiq.s:3128   .debug_str:00000000000004d7 .LASF76
     /tmp/ccdfVMiq.s:3374   .debug_str:0000000000000c58 .LASF77
     /tmp/ccdfVMiq.s:3286   .debug_str:000000000000093c .LASF78
     /tmp/ccdfVMiq.s:3176   .debug_str:000000000000068a .LASF79
     /tmp/ccdfVMiq.s:3384   .debug_str:0000000000000cc1 .LASF80
     /tmp/ccdfVMiq.s:3146   .debug_str:000000000000058e .LASF81
     /tmp/ccdfVMiq.s:3230   .debug_str:00000000000007e2 .LASF82
     /tmp/ccdfVMiq.s:3390   .debug_str:0000000000000cf9 .LASF83
     /tmp/ccdfVMiq.s:3104   .debug_str:000000000000044d .LASF84
     /tmp/ccdfVMiq.s:3284   .debug_str:0000000000000935 .LASF85
GAS LISTING /tmp/ccdfVMiq.s 			page 18


     /tmp/ccdfVMiq.s:3260   .debug_str:00000000000008a5 .LASF86
     /tmp/ccdfVMiq.s:3262   .debug_str:00000000000008b8 .LASF87
     /tmp/ccdfVMiq.s:3018   .debug_str:000000000000018d .LASF88
     /tmp/ccdfVMiq.s:3046   .debug_str:0000000000000266 .LASF89
     /tmp/ccdfVMiq.s:3092   .debug_str:00000000000003fd .LASF90
     /tmp/ccdfVMiq.s:3102   .debug_str:0000000000000447 .LASF91
     /tmp/ccdfVMiq.s:3038   .debug_str:0000000000000235 .LASF92
     /tmp/ccdfVMiq.s:2988   .debug_str:00000000000000b5 .LASF93
     /tmp/ccdfVMiq.s:3252   .debug_str:0000000000000876 .LASF94
     /tmp/ccdfVMiq.s:3246   .debug_str:0000000000000853 .LASF95
     /tmp/ccdfVMiq.s:3386   .debug_str:0000000000000cd5 .LASF96
     /tmp/ccdfVMiq.s:3358   .debug_str:0000000000000c1c .LASF97
     /tmp/ccdfVMiq.s:3376   .debug_str:0000000000000c60 .LASF98
     /tmp/ccdfVMiq.s:3016   .debug_str:0000000000000183 .LASF99
     /tmp/ccdfVMiq.s:3160   .debug_str:00000000000005f6 .LASF100
     /tmp/ccdfVMiq.s:3368   .debug_str:0000000000000c3a .LASF101
     /tmp/ccdfVMiq.s:3080   .debug_str:0000000000000397 .LASF102
     /tmp/ccdfVMiq.s:3264   .debug_str:00000000000008bf .LASF103
     /tmp/ccdfVMiq.s:3200   .debug_str:000000000000070b .LASF104
     /tmp/ccdfVMiq.s:3360   .debug_str:0000000000000c26 .LASF105
     /tmp/ccdfVMiq.s:3196   .debug_str:00000000000006f5 .LASF106
     /tmp/ccdfVMiq.s:3112   .debug_str:0000000000000489 .LASF107
     /tmp/ccdfVMiq.s:3310   .debug_str:0000000000000a09 .LASF108
     /tmp/ccdfVMiq.s:3362   .debug_str:0000000000000c2b .LASF109
     /tmp/ccdfVMiq.s:3110   .debug_str:0000000000000478 .LASF110
     /tmp/ccdfVMiq.s:3114   .debug_str:000000000000048e .LASF111
     /tmp/ccdfVMiq.s:3208   .debug_str:000000000000074a .LASF112
     /tmp/ccdfVMiq.s:3364   .debug_str:0000000000000c30 .LASF113
     /tmp/ccdfVMiq.s:2976   .debug_str:0000000000000045 .LASF114
     /tmp/ccdfVMiq.s:3116   .debug_str:0000000000000493 .LASF115
     /tmp/ccdfVMiq.s:3304   .debug_str:00000000000009e7 .LASF116
     /tmp/ccdfVMiq.s:3366   .debug_str:0000000000000c35 .LASF117
     /tmp/ccdfVMiq.s:3392   .debug_str:0000000000000d01 .LASF118
     /tmp/ccdfVMiq.s:3118   .debug_str:0000000000000498 .LASF119
     /tmp/ccdfVMiq.s:3044   .debug_str:0000000000000255 .LASF120
     /tmp/ccdfVMiq.s:3190   .debug_str:00000000000006e4 .LASF121
     /tmp/ccdfVMiq.s:3326   .debug_str:0000000000000b3c .LASF122
     /tmp/ccdfVMiq.s:3120   .debug_str:000000000000049d .LASF123
     /tmp/ccdfVMiq.s:2970   .debug_str:000000000000001f .LASF124
     /tmp/ccdfVMiq.s:3370   .debug_str:0000000000000c49 .LASF125
     /tmp/ccdfVMiq.s:3240   .debug_str:000000000000082f .LASF126
     /tmp/ccdfVMiq.s:3122   .debug_str:00000000000004a2 .LASF127
     /tmp/ccdfVMiq.s:3334   .debug_str:0000000000000b6f .LASF128
     /tmp/ccdfVMiq.s:3198   .debug_str:0000000000000706 .LASF129
     /tmp/ccdfVMiq.s:3154   .debug_str:00000000000005a9 .LASF130
     /tmp/ccdfVMiq.s:2998   .debug_str:00000000000000f8 .LASF131
     /tmp/ccdfVMiq.s:3156   .debug_str:00000000000005ba .LASF132
     /tmp/ccdfVMiq.s:3202   .debug_str:0000000000000729 .LASF133
     /tmp/ccdfVMiq.s:3078   .debug_str:0000000000000386 .LASF134
     /tmp/ccdfVMiq.s:3328   .debug_str:0000000000000b4d .LASF135
     /tmp/ccdfVMiq.s:3164   .debug_str:0000000000000616 .LASF136
     /tmp/ccdfVMiq.s:3216   .debug_str:0000000000000791 .LASF137
     /tmp/ccdfVMiq.s:3052   .debug_str:000000000000029e .LASF138
     /tmp/ccdfVMiq.s:3292   .debug_str:0000000000000969 .LASF139
     /tmp/ccdfVMiq.s:3182   .debug_str:000000000000069e .LASF140
     /tmp/ccdfVMiq.s:3034   .debug_str:0000000000000212 .LASF141
     /tmp/ccdfVMiq.s:3170   .debug_str:000000000000064a .LASF142
GAS LISTING /tmp/ccdfVMiq.s 			page 19


     /tmp/ccdfVMiq.s:3020   .debug_str:00000000000001a0 .LASF143
     /tmp/ccdfVMiq.s:2968   .debug_str:000000000000000a .LASF144
     /tmp/ccdfVMiq.s:3042   .debug_str:0000000000000250 .LASF145
     /tmp/ccdfVMiq.s:3008   .debug_str:0000000000000147 .LASF146
     /tmp/ccdfVMiq.s:3296   .debug_str:00000000000009c2 .LASF147
     /tmp/ccdfVMiq.s:3026   .debug_str:00000000000001d5 .LASF148
     /tmp/ccdfVMiq.s:3214   .debug_str:0000000000000781 .LASF149
     /tmp/ccdfVMiq.s:3380   .debug_str:0000000000000c82 .LASF150
     /tmp/ccdfVMiq.s:3322   .debug_str:0000000000000b17 .LASF151
     /tmp/ccdfVMiq.s:3136   .debug_str:0000000000000519 .LASF152
     /tmp/ccdfVMiq.s:2992   .debug_str:00000000000000e1 .LASF153
     /tmp/ccdfVMiq.s:3084   .debug_str:00000000000003c1 .LASF154
     /tmp/ccdfVMiq.s:3354   .debug_str:0000000000000c0f .LASF155
     /tmp/ccdfVMiq.s:3090   .debug_str:00000000000003f7 .LASF156
     /tmp/ccdfVMiq.s:3006   .debug_str:000000000000013d .LASF158
     /tmp/ccdfVMiq.s:3014   .debug_str:000000000000017e .LASF159
     /tmp/ccdfVMiq.s:2994   .debug_str:00000000000000e7 .LASF160
     /tmp/ccdfVMiq.s:3030   .debug_str:00000000000001ff .LASF161
     /tmp/ccdfVMiq.s:3204   .debug_str:000000000000072e .LASF162
     /tmp/ccdfVMiq.s:3106   .debug_str:0000000000000461 .LASF164
     /tmp/ccdfVMiq.s:3224   .debug_str:00000000000007c3 .LASF165
     /tmp/ccdfVMiq.s:3162   .debug_str:000000000000060c .LASF166
     /tmp/ccdfVMiq.s:2990   .debug_str:00000000000000c0 .LASF167
     /tmp/ccdfVMiq.s:3094   .debug_str:000000000000040f .LASF168
     /tmp/ccdfVMiq.s:3062   .debug_str:00000000000002fd .LASF169
     /tmp/ccdfVMiq.s:3100   .debug_str:000000000000043d .LASF170
     /tmp/ccdfVMiq.s:3158   .debug_str:00000000000005cb .LASF171
     /tmp/ccdfVMiq.s:3168   .debug_str:000000000000063c .LASF172
     /tmp/ccdfVMiq.s:3140   .debug_str:0000000000000549 .LASF173
     /tmp/ccdfVMiq.s:3072   .debug_str:0000000000000350 .LASF174
     /tmp/ccdfVMiq.s:24     .text:0000000000000000 .LFB41
     /tmp/ccdfVMiq.s:303    .text:0000000000000210 .LFE41
     /tmp/ccdfVMiq.s:3266   .debug_str:00000000000008d0 .LASF175
     /tmp/ccdfVMiq.s:3220   .debug_str:00000000000007b3 .LASF176
     /tmp/ccdfVMiq.s:2876   .debug_loc:0000000000000000 .LLST0
     /tmp/ccdfVMiq.s:3222   .debug_str:00000000000007bb .LASF177
     /tmp/ccdfVMiq.s:2883   .debug_loc:0000000000000023 .LLST1
     /tmp/ccdfVMiq.s:3242   .debug_str:0000000000000840 .LASF178
     /tmp/ccdfVMiq.s:3388   .debug_str:0000000000000ced .LASF179
     /tmp/ccdfVMiq.s:2890   .debug_loc:0000000000000046 .LLST2
     /tmp/ccdfVMiq.s:244    .text:00000000000001b8 .LBB26
     /tmp/ccdfVMiq.s:285    .text:00000000000001f4 .LBE26
     /tmp/ccdfVMiq.s:3054   .debug_str:00000000000002c0 .LASF180
     /tmp/ccdfVMiq.s:2897   .debug_loc:0000000000000069 .LLST7
     /tmp/ccdfVMiq.s:3280   .debug_str:0000000000000924 .LASF181
     /tmp/ccdfVMiq.s:3306   .debug_str:00000000000009f8 .LASF213
     /tmp/ccdfVMiq.s:2908   .debug_loc:000000000000009f .LLST8
     /tmp/ccdfVMiq.s:2966   .debug_str:0000000000000000 .LASF182
     /tmp/ccdfVMiq.s:270    .text:00000000000001e0 .LBB27
     /tmp/ccdfVMiq.s:284    .text:00000000000001f4 .LBE27
     /tmp/ccdfVMiq.s:2915   .debug_loc:00000000000000c2 .LLST9
     /tmp/ccdfVMiq.s:279    .text:00000000000001f0 .LVL33
     /tmp/ccdfVMiq.s:254    .text:00000000000001cc .LVL29
     /tmp/ccdfVMiq.s:42     .text:0000000000000018 .LBB16
     /tmp/ccdfVMiq.s:76     .text:0000000000000064 .LBE16
     /tmp/ccdfVMiq.s:94     .text:0000000000000090 .LBB18
     /tmp/ccdfVMiq.s:106    .text:0000000000000094 .LBE18
GAS LISTING /tmp/ccdfVMiq.s 			page 20


     /tmp/ccdfVMiq.s:2922   .debug_loc:00000000000000e5 .LLST3
     /tmp/ccdfVMiq.s:108    .text:0000000000000094 .LBB20
     /tmp/ccdfVMiq.s:120    .text:000000000000009c .LBE20
     /tmp/ccdfVMiq.s:2929   .debug_loc:0000000000000108 .LLST4
     /tmp/ccdfVMiq.s:178    .text:000000000000012c .LBB22
     /tmp/ccdfVMiq.s:186    .text:0000000000000130 .LBE22
     /tmp/ccdfVMiq.s:2937   .debug_loc:000000000000012c .LLST5
     /tmp/ccdfVMiq.s:192    .text:0000000000000138 .LBB24
     /tmp/ccdfVMiq.s:199    .text:000000000000013c .LBE24
     /tmp/ccdfVMiq.s:2944   .debug_loc:000000000000014f .LLST6
     /tmp/ccdfVMiq.s:82     .text:0000000000000074 .LVL0
     /tmp/ccdfVMiq.s:127    .text:00000000000000b4 .LVL4
     /tmp/ccdfVMiq.s:134    .text:00000000000000c8 .LVL6
     /tmp/ccdfVMiq.s:139    .text:00000000000000d4 .LVL7
     /tmp/ccdfVMiq.s:146    .text:00000000000000ec .LVL8
     /tmp/ccdfVMiq.s:153    .text:0000000000000100 .LVL10
     /tmp/ccdfVMiq.s:158    .text:000000000000010c .LVL11
     /tmp/ccdfVMiq.s:165    .text:000000000000011c .LVL12
     /tmp/ccdfVMiq.s:171    .text:0000000000000128 .LVL13
     /tmp/ccdfVMiq.s:210    .text:000000000000015c .LVL19
     /tmp/ccdfVMiq.s:217    .text:0000000000000174 .LVL20
     /tmp/ccdfVMiq.s:222    .text:0000000000000180 .LVL21
     /tmp/ccdfVMiq.s:229    .text:0000000000000194 .LVL23
     /tmp/ccdfVMiq.s:234    .text:00000000000001a0 .LVL24
     /tmp/ccdfVMiq.s:239    .text:00000000000001b0 .LVL25
     /tmp/ccdfVMiq.s:243    .text:00000000000001b8 .LVL26
     /tmp/ccdfVMiq.s:3348   .debug_str:0000000000000be2 .LASF183
     /tmp/ccdfVMiq.s:3148   .debug_str:0000000000000596 .LASF184
     /tmp/ccdfVMiq.s:3070   .debug_str:000000000000034b .LASF185
     /tmp/ccdfVMiq.s:2984   .debug_str:00000000000000a4 .LASF186
     /tmp/ccdfVMiq.s:3134   .debug_str:000000000000050d .LASF214
     /tmp/ccdfVMiq.s:3184   .debug_str:00000000000006c0 .LASF187
     /tmp/ccdfVMiq.s:3058   .debug_str:00000000000002d3 .LASF189
     /tmp/ccdfVMiq.s:3192   .debug_str:00000000000006e9 .LASF188
     /tmp/ccdfVMiq.s:2974   .debug_str:0000000000000035 .LASF190
     /tmp/ccdfVMiq.s:3076   .debug_str:0000000000000365 .LASF191
     /tmp/ccdfVMiq.s:3342   .debug_str:0000000000000ba5 .LASF193
     /tmp/ccdfVMiq.s:3212   .debug_str:000000000000076e .LASF192
     /tmp/ccdfVMiq.s:3378   .debug_str:0000000000000c76 .LASF194
     /tmp/ccdfVMiq.s:3086   .debug_str:00000000000003da .LASF195
     /tmp/ccdfVMiq.s:3218   .debug_str:00000000000007a6 .LASF196
     /tmp/ccdfVMiq.s:3324   .debug_str:0000000000000b20 .LASF197
     /tmp/ccdfVMiq.s:3236   .debug_str:000000000000080f .LASF198
     /tmp/ccdfVMiq.s:3166   .debug_str:0000000000000627 .LASF199
     /tmp/ccdfVMiq.s:3234   .debug_str:00000000000007ff .LASF200
     /tmp/ccdfVMiq.s:3130   .debug_str:00000000000004ea .LASF201
     /tmp/ccdfVMiq.s:3270   .debug_str:00000000000008e3 .LASF202
     /tmp/ccdfVMiq.s:129    .text:00000000000000b8 .LVL5
     /tmp/ccdfVMiq.s:148    .text:00000000000000f0 .LVL9
     /tmp/ccdfVMiq.s:207    .text:0000000000000150 .LVL18
     /tmp/ccdfVMiq.s:224    .text:0000000000000184 .LVL22
     /tmp/ccdfVMiq.s:247    .text:00000000000001bc .LVL27
     /tmp/ccdfVMiq.s:249    .text:00000000000001c0 .LVL28
     /tmp/ccdfVMiq.s:258    .text:00000000000001d0 .LVL30
     /tmp/ccdfVMiq.s:263    .text:00000000000001d8 .LVL31
     /tmp/ccdfVMiq.s:281    .text:00000000000001f4 .LVL34
     /tmp/ccdfVMiq.s:296    .text:0000000000000204 .LVL35
GAS LISTING /tmp/ccdfVMiq.s 			page 21


     /tmp/ccdfVMiq.s:269    .text:00000000000001e0 .LVL32
     /tmp/ccdfVMiq.s:93     .text:0000000000000090 .LVL1
     /tmp/ccdfVMiq.s:103    .text:0000000000000094 .LVL2
     /tmp/ccdfVMiq.s:117    .text:000000000000009c .LVL3
     /tmp/ccdfVMiq.s:177    .text:000000000000012c .LVL14
     /tmp/ccdfVMiq.s:184    .text:0000000000000130 .LVL15
     /tmp/ccdfVMiq.s:191    .text:0000000000000138 .LVL16
     /tmp/ccdfVMiq.s:197    .text:000000000000013c .LVL17
     /tmp/ccdfVMiq.s:312    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
HEAP_START_ADDR
_ZN15MemoryAllocator4freeE
_ZN15MemoryAllocator4usedE
HEAP_END_ADDR
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB7runningE
_ZN5Riscv16stvecVectorTableEv
_Z11workerBodyAPv
_Z13thread_createPP3TCBPFvPvES2_
_Z11printStringPKc
_Z12printIntegerm
_Z11workerBodyBPv
_Z8sem_openPP11MySemaphorej
_Z15thread_dispatchv
_Z11workerBodyCPv
_Z11workerBodyDPv
_Z8sem_waitP11MySemaphore
_ZdlPv
_ZdaPv
