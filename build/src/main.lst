GAS LISTING /tmp/cciXjCrG.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB55:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by marko on 20.4.22..
   3:src/main.cpp  **** //
   4:src/main.cpp  **** 
   5:src/main.cpp  **** #include "../h/tcb.hpp"
   6:src/main.cpp  **** #include "../h/workers.hpp"
   7:src/main.cpp  **** #include "../test/printing.hpp"
   8:src/main.cpp  **** #include "../h/riscv.hpp"
   9:src/main.cpp  **** #include "../h/syscall_c.hpp"
  10:src/main.cpp  **** #include "../h/memoryAllocator.hpp"
  11:src/main.cpp  **** 
  12:src/main.cpp  **** extern void userMain();
  13:src/main.cpp  **** 
  14:src/main.cpp  **** int main()
  15:src/main.cpp  **** {
  12              		.loc 1 15 1
  13              		.cfi_startproc
  14 0000 130101FC 		addi	sp,sp,-64
  15              		.cfi_def_cfa_offset 64
  16 0004 233C1102 		sd	ra,56(sp)
  17 0008 23388102 		sd	s0,48(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040104 		addi	s0,sp,64
  21              		.cfi_def_cfa 8, 0
  16:src/main.cpp  **** 
  17:src/main.cpp  **** 
  18:src/main.cpp  ****     /*
  19:src/main.cpp  **** 
  20:src/main.cpp  ****     TCB *threads[5];
  21:src/main.cpp  **** 
  22:src/main.cpp  ****     MemoryAllocator::initFreeBlock();
  23:src/main.cpp  **** 
  24:src/main.cpp  ****     threads[0] = TCB::createThread(nullptr,nullptr);
  25:src/main.cpp  ****     TCB::running = threads[0];
  26:src/main.cpp  **** 
  27:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::stvecVectorTable | 0b01);
  28:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  29:src/main.cpp  **** 
  30:src/main.cpp  ****     int return1 = thread_create(&threads[1], workerBodyA, nullptr);
  31:src/main.cpp  ****     printString("ThreadA created\n");
  32:src/main.cpp  ****     printInt(return1);
  33:src/main.cpp  ****     int return2 = thread_create(&threads[2], workerBodyB, threads[1]);
  34:src/main.cpp  ****     printString("ThreadB created\n");
  35:src/main.cpp  ****     printInt(return2);
  36:src/main.cpp  **** 
  37:src/main.cpp  ****     MySemaphore* semaphore[2];
GAS LISTING /tmp/cciXjCrG.s 			page 2


  38:src/main.cpp  ****     sem_open(&semaphore[0], 0);
  39:src/main.cpp  **** 
  40:src/main.cpp  ****     while (!(threads[1]->isFinished() &&
  41:src/main.cpp  ****              threads[2]->isFinished()))
  42:src/main.cpp  ****     {
  43:src/main.cpp  ****         thread_dispatch();
  44:src/main.cpp  ****     }
  45:src/main.cpp  **** 
  46:src/main.cpp  **** 
  47:src/main.cpp  ****     printString("main: Pravimo C...");
  48:src/main.cpp  ****     thread_create(&threads[3], workerBodyC, semaphore[0]);
  49:src/main.cpp  ****     printString("main: Pravimo D....");
  50:src/main.cpp  ****     thread_create(&threads[3], workerBodyD, semaphore[0]);
  51:src/main.cpp  ****     //thread_dispatch();
  52:src/main.cpp  ****     int returnValue = sem_wait(semaphore[0]);
  53:src/main.cpp  **** 
  54:src/main.cpp  ****     printString("Finished\nReturn value: ");
  55:src/main.cpp  ****     printInt(returnValue);
  56:src/main.cpp  ****     printString("\n");
  57:src/main.cpp  **** 
  58:src/main.cpp  ****     thread_dispatch();
  59:src/main.cpp  ****     for (auto &thread: threads) {
  60:src/main.cpp  ****         delete thread;
  61:src/main.cpp  ****     }
  62:src/main.cpp  **** 
  63:src/main.cpp  **** 
  64:src/main.cpp  ****     //Testing
  65:src/main.cpp  ****     printString("New called:");
  66:src/main.cpp  ****     printInt(MemoryAllocator::newCalled);
  67:src/main.cpp  ****     printString("\n");
  68:src/main.cpp  **** 
  69:src/main.cpp  ****     printString("New[] called: ");
  70:src/main.cpp  ****     printInt(MemoryAllocator::newArrayCalled);
  71:src/main.cpp  ****     printString("\n");
  72:src/main.cpp  **** 
  73:src/main.cpp  **** 
  74:src/main.cpp  ****     printString("Delete called: ");
  75:src/main.cpp  ****     printInt(MemoryAllocator::deleteCalled);
  76:src/main.cpp  ****     printString("\n");
  77:src/main.cpp  **** 
  78:src/main.cpp  ****     printString("Delete[] called: ");
  79:src/main.cpp  ****     printInt(MemoryAllocator::deleteArrayCalled);
  80:src/main.cpp  ****     printString("\n");
  81:src/main.cpp  **** 
  82:src/main.cpp  **** */
  83:src/main.cpp  **** 
  84:src/main.cpp  **** 
  85:src/main.cpp  ****     TCB *threads[5];
  22              		.loc 1 85 5
  86:src/main.cpp  **** 
  87:src/main.cpp  ****     MemoryAllocator::initFreeBlock();
  23              		.loc 1 87 5
  24              	.LBB10:
  25              	.LBB11:
  26              		.file 2 "src/../h/memoryAllocator.hpp"
   1:src/../h/memoryAllocator.hpp **** #ifndef memoryAllocator
   2:src/../h/memoryAllocator.hpp **** #define memoryAllocator
GAS LISTING /tmp/cciXjCrG.s 			page 3


   3:src/../h/memoryAllocator.hpp **** 
   4:src/../h/memoryAllocator.hpp **** #include "../lib/hw.h"
   5:src/../h/memoryAllocator.hpp **** 
   6:src/../h/memoryAllocator.hpp **** struct DataBlock {
   7:src/../h/memoryAllocator.hpp ****     DataBlock* next;
   8:src/../h/memoryAllocator.hpp ****     DataBlock* prev;
   9:src/../h/memoryAllocator.hpp ****     size_t size;
  10:src/../h/memoryAllocator.hpp **** };
  11:src/../h/memoryAllocator.hpp **** 
  12:src/../h/memoryAllocator.hpp **** class MemoryAllocator {
  13:src/../h/memoryAllocator.hpp **** public:
  14:src/../h/memoryAllocator.hpp ****     static DataBlock* free;
  15:src/../h/memoryAllocator.hpp ****     static DataBlock* used;
  16:src/../h/memoryAllocator.hpp **** 
  17:src/../h/memoryAllocator.hpp ****     static int newCalled;
  18:src/../h/memoryAllocator.hpp ****     static int newArrayCalled;
  19:src/../h/memoryAllocator.hpp ****     static int deleteCalled;
  20:src/../h/memoryAllocator.hpp ****     static int deleteArrayCalled;
  21:src/../h/memoryAllocator.hpp **** 
  22:src/../h/memoryAllocator.hpp ****     static void* mem_alloc(size_t size);
  23:src/../h/memoryAllocator.hpp **** 
  24:src/../h/memoryAllocator.hpp ****     static int mem_free (void* ptr);
  25:src/../h/memoryAllocator.hpp **** 
  26:src/../h/memoryAllocator.hpp ****     static void tryToJoin(DataBlock* curr);
  27:src/../h/memoryAllocator.hpp **** 
  28:src/../h/memoryAllocator.hpp ****     static void initFreeBlock() {
  29:src/../h/memoryAllocator.hpp **** 
  30:src/../h/memoryAllocator.hpp ****         MemoryAllocator::free = (DataBlock*)((char*)HEAP_START_ADDR);
  27              		.loc 2 30 9
  28              		.loc 2 30 31 is_stmt 0
  29 0010 97070000 		la	a5,HEAP_START_ADDR
  29      83B70700 
  30 0018 83B60700 		ld	a3,0(a5)
  31 001c 17070000 		la	a4,_ZN15MemoryAllocator4freeE
  31      03370700 
  32 0024 2330D700 		sd	a3,0(a4)
  31:src/../h/memoryAllocator.hpp ****         used = nullptr;
  33              		.loc 2 31 9 is_stmt 1
  34              		.loc 2 31 14 is_stmt 0
  35 0028 17060000 		la	a2,_ZN15MemoryAllocator4usedE
  35      03360600 
  36 0030 23300600 		sd	zero,0(a2)
  32:src/../h/memoryAllocator.hpp **** 
  33:src/../h/memoryAllocator.hpp ****         free->next = nullptr;
  37              		.loc 2 33 9 is_stmt 1
  38              		.loc 2 33 20 is_stmt 0
  39 0034 23B00600 		sd	zero,0(a3)
  34:src/../h/memoryAllocator.hpp ****         free->prev  = nullptr;
  40              		.loc 2 34 9 is_stmt 1
  41              		.loc 2 34 15 is_stmt 0
  42 0038 03370700 		ld	a4,0(a4)
  43              		.loc 2 34 21
  44 003c 23340700 		sd	zero,8(a4)
  35:src/../h/memoryAllocator.hpp ****         free->size = ((char*)HEAP_START_ADDR - (char*)HEAP_END_ADDR - sizeof(DataBlock)); //FOR NOW
  45              		.loc 2 35 9 is_stmt 1
  46              		.loc 2 35 23 is_stmt 0
  47 0040 83B70700 		ld	a5,0(a5)
GAS LISTING /tmp/cciXjCrG.s 			page 4


  48              		.loc 2 35 48
  49 0044 97060000 		la	a3,HEAP_END_ADDR
  49      83B60600 
  50 004c 83B60600 		ld	a3,0(a3)
  51              		.loc 2 35 46
  52 0050 B387D740 		sub	a5,a5,a3
  53              		.loc 2 35 69
  54 0054 938787FE 		addi	a5,a5,-24
  55              		.loc 2 35 20
  56 0058 2338F700 		sd	a5,16(a4)
  36:src/../h/memoryAllocator.hpp **** 
  37:src/../h/memoryAllocator.hpp **** 
  38:src/../h/memoryAllocator.hpp ****         //testing purposes
  39:src/../h/memoryAllocator.hpp ****         newCalled = 0;
  57              		.loc 2 39 9 is_stmt 1
  58              		.loc 2 39 19 is_stmt 0
  59 005c 97070000 		la	a5,_ZN15MemoryAllocator9newCalledE
  59      83B70700 
  60 0064 23A00700 		sw	zero,0(a5)
  40:src/../h/memoryAllocator.hpp ****         newArrayCalled = 0;
  61              		.loc 2 40 9 is_stmt 1
  62              		.loc 2 40 24 is_stmt 0
  63 0068 97070000 		la	a5,_ZN15MemoryAllocator14newArrayCalledE
  63      83B70700 
  64 0070 23A00700 		sw	zero,0(a5)
  41:src/../h/memoryAllocator.hpp ****         deleteCalled= 0;
  65              		.loc 2 41 9 is_stmt 1
  66              		.loc 2 41 21 is_stmt 0
  67 0074 97070000 		la	a5,_ZN15MemoryAllocator12deleteCalledE
  67      83B70700 
  68 007c 23A00700 		sw	zero,0(a5)
  42:src/../h/memoryAllocator.hpp ****         deleteArrayCalled = 0;
  69              		.loc 2 42 9 is_stmt 1
  70              		.loc 2 42 27 is_stmt 0
  71 0080 97070000 		la	a5,_ZN15MemoryAllocator17deleteArrayCalledE
  71      83B70700 
  72 0088 23A00700 		sw	zero,0(a5)
  73              	.LBE11:
  74              	.LBE10:
  88:src/main.cpp  **** 
  89:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::stvecVectorTable | 0b01);
  75              		.loc 1 89 5 is_stmt 1
  76              		.loc 1 89 19 is_stmt 0
  77 008c 97070000 		la	a5,_ZN5Riscv16stvecVectorTableEv
  77      83B70700 
  78 0094 93E71700 		ori	a5,a5,1
  79              	.LVL0:
  80              	.LBB12:
  81              	.LBB13:
  82              		.file 3 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cciXjCrG.s 			page 5


   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
GAS LISTING /tmp/cciXjCrG.s 			page 6


  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     //stvec Vector "table"
  83:src/../h/riscv.hpp ****     static void stvecVectorTable();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     //read a0 register
  86:src/../h/riscv.hpp ****     static uint64 r_a0();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     //write to a0 register
  89:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a1 register
  92:src/../h/riscv.hpp ****     static uint64 r_a1();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //write to a1 register
  95:src/../h/riscv.hpp ****     static void w_a1(uint64 writeValue);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //read a2 register
  98:src/../h/riscv.hpp ****     static uint64 r_a2();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //write to a2 register
 101:src/../h/riscv.hpp ****     static void w_a2(uint64 writeValue);
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp ****     //read a3 register
 104:src/../h/riscv.hpp ****     static uint64 r_a3();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     //write to a3 register
 107:src/../h/riscv.hpp ****     static void w_a3(uint64 writeValue);
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp ****     //read a4 register
 110:src/../h/riscv.hpp ****     static uint64 r_a4();
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     //write to a4 register
 113:src/../h/riscv.hpp ****     static void w_a4(uint64 writeValue);
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp ****     //read a5 register
 116:src/../h/riscv.hpp ****     static uint64 r_a5();
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp ****     //write to a5 register
 119:src/../h/riscv.hpp ****     static void w_a5(uint64 writeValue);
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp ****     //read a6 register
GAS LISTING /tmp/cciXjCrG.s 			page 7


 122:src/../h/riscv.hpp ****     static uint64 r_a6();
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp ****     //write to a6 register
 125:src/../h/riscv.hpp ****     static void w_a6(uint64 writeValue);
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp ****     //read a7 register
 128:src/../h/riscv.hpp ****     static uint64 r_a7();
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp ****     //write to a7 register
 131:src/../h/riscv.hpp ****     static void w_a7(uint64 writeValue);
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** private:
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp ****     // supervisor trap handler
 137:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
 142:src/../h/riscv.hpp **** };
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     uint64 volatile scause;
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 149:src/../h/riscv.hpp ****     return scause;
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sepc;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 161:src/../h/riscv.hpp ****     return sepc;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile stvec;
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 173:src/../h/riscv.hpp ****     return stvec;
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
GAS LISTING /tmp/cciXjCrG.s 			page 8


  83              		.loc 3 178 5 is_stmt 1
  84              		.loc 3 178 69 is_stmt 0
  85              	#APP
  86              	# 178 "src/../h/riscv.hpp" 1
 179              	}
  87              		csrw stvec, a5
  88              	# 0 "" 2
  89              	.LVL1:
  90              	#NO_APP
  91              	.LBE13:
  92              	.LBE12:
  90:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  93              		.loc 1 90 5 is_stmt 1
  94              	.LBB14:
  95              	.LBB15:
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile stval;
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 185:src/../h/riscv.hpp ****     return stval;
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 191:src/../h/riscv.hpp **** }
 192:src/../h/riscv.hpp **** 
 193:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 194:src/../h/riscv.hpp **** {
 195:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 196:src/../h/riscv.hpp **** }
 197:src/../h/riscv.hpp **** 
 198:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 199:src/../h/riscv.hpp **** {
 200:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 201:src/../h/riscv.hpp **** }
 202:src/../h/riscv.hpp **** 
 203:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 204:src/../h/riscv.hpp **** {
 205:src/../h/riscv.hpp ****     uint64 volatile sip;
 206:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 207:src/../h/riscv.hpp ****     return sip;
 208:src/../h/riscv.hpp **** }
 209:src/../h/riscv.hpp **** 
 210:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 211:src/../h/riscv.hpp **** {
 212:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 213:src/../h/riscv.hpp **** }
 214:src/../h/riscv.hpp **** 
 215:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 216:src/../h/riscv.hpp **** {
 217:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  96              		.loc 3 217 5
  97              		.loc 3 217 68 is_stmt 0
  98 009c 93072000 		li	a5,2
  99              	#APP
GAS LISTING /tmp/cciXjCrG.s 			page 9


 100              	# 217 "src/../h/riscv.hpp" 1
 218              	}
 101              		csrs sstatus, a5
 102              	# 0 "" 2
 103              	.LVL2:
 104              	#NO_APP
 105              	.LBE15:
 106              	.LBE14:
  91:src/main.cpp  **** 
  92:src/main.cpp  ****     threads[0] = TCB::createThread(nullptr,nullptr);
 107              		.loc 1 92 5 is_stmt 1
 108              		.loc 1 92 35 is_stmt 0
 109 00a4 93050000 		li	a1,0
 110 00a8 13050000 		li	a0,0
 111 00ac 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 111      E7800000 
 112              	.LVL3:
 113              		.loc 1 92 16
 114 00b4 2334A4FC 		sd	a0,-56(s0)
  93:src/main.cpp  ****     TCB::running = threads[0];
 115              		.loc 1 93 5 is_stmt 1
 116              		.loc 1 93 18 is_stmt 0
 117 00b8 97070000 		la	a5,_ZN3TCB7runningE
 117      83B70700 
 118 00c0 23B0A700 		sd	a0,0(a5)
  94:src/main.cpp  **** 
  95:src/main.cpp  ****     thread_create(&threads[1], reinterpret_cast<void (*)(void *)>(userMain), nullptr);
 119              		.loc 1 95 5 is_stmt 1
 120              		.loc 1 95 18 is_stmt 0
 121 00c4 13060000 		li	a2,0
 122 00c8 97050000 		la	a1,_Z8userMainv
 122      83B50500 
 123 00d0 130504FD 		addi	a0,s0,-48
 124 00d4 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
 124      E7800000 
 125              	.LVL4:
 126              	.L3:
  96:src/main.cpp  **** 
  97:src/main.cpp  ****     while(!threads[1]->isFinished()) {
 127              		.loc 1 97 5 is_stmt 1
 128              		.loc 1 97 11
 129              		.loc 1 97 21 is_stmt 0
 130 00dc 833704FD 		ld	a5,-48(s0)
 131              	.LVL5:
 132              	.LBB16:
 133              	.LBB17:
 134              		.file 4 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** #include "memoryAllocator.hpp"
GAS LISTING /tmp/cciXjCrG.s 			page 10


  11:src/../h/tcb.hpp **** 
  12:src/../h/tcb.hpp **** // Thread Control Block
  13:src/../h/tcb.hpp **** class TCB
  14:src/../h/tcb.hpp **** {
  15:src/../h/tcb.hpp **** public:
  16:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  17:src/../h/tcb.hpp **** 
  18:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
 135              		.loc 4 18 31 is_stmt 1
 136              		.loc 4 18 38 is_stmt 0
 137 00e0 83C70702 		lbu	a5,32(a5)
 138              	.LVL6:
 139              	.LBE17:
 140              	.LBE16:
 141              		.loc 1 97 11
 142 00e4 63980700 		bnez	a5,.L2
  98:src/main.cpp  ****         thread_dispatch();
 143              		.loc 1 98 9 is_stmt 1
 144              		.loc 1 98 24 is_stmt 0
 145 00e8 97000000 		call	_Z15thread_dispatchv@plt
 145      E7800000 
 146              	.LVL7:
 147 00f0 6FF0DFFE 		j	.L3
 148              	.L2:
  99:src/main.cpp  ****     }
 100:src/main.cpp  **** 
 101:src/main.cpp  ****     //userMain();
 102:src/main.cpp  **** 
 103:src/main.cpp  ****     return 0;
 149              		.loc 1 103 5 is_stmt 1
 104:src/main.cpp  **** }
 150              		.loc 1 104 1 is_stmt 0
 151 00f4 13050000 		li	a0,0
 152 00f8 83308103 		ld	ra,56(sp)
 153              		.cfi_restore 1
 154 00fc 03340103 		ld	s0,48(sp)
 155              		.cfi_restore 8
 156              		.cfi_def_cfa 2, 64
 157 0100 13010104 		addi	sp,sp,64
 158              		.cfi_def_cfa_offset 0
 159 0104 67800000 		jr	ra
 160              		.cfi_endproc
 161              	.LFE55:
 163              	.Letext0:
 164              		.file 5 "src/../h/../lib/hw.h"
 165              		.file 6 "src/../test/../h/syscall_c.hpp"
GAS LISTING /tmp/cciXjCrG.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cciXjCrG.s:9      .text:0000000000000000 main
     /tmp/cciXjCrG.s:13     .text:0000000000000000 .L0 
     /tmp/cciXjCrG.s:14     .text:0000000000000000 .L0 
     /tmp/cciXjCrG.s:15     .text:0000000000000004 .L0 
     /tmp/cciXjCrG.s:18     .text:000000000000000c .L0 
     /tmp/cciXjCrG.s:19     .text:000000000000000c .L0 
     /tmp/cciXjCrG.s:21     .text:0000000000000010 .L0 
     /tmp/cciXjCrG.s:23     .text:0000000000000010 .L0 
     /tmp/cciXjCrG.s:27     .text:0000000000000010 .L0 
     /tmp/cciXjCrG.s:28     .text:0000000000000010 .L0 
     /tmp/cciXjCrG.s:29     .text:0000000000000010 .L0 
     /tmp/cciXjCrG.s:34     .text:0000000000000028 .L0 
     /tmp/cciXjCrG.s:35     .text:0000000000000028 .L0 
     /tmp/cciXjCrG.s:38     .text:0000000000000034 .L0 
     /tmp/cciXjCrG.s:39     .text:0000000000000034 .L0 
     /tmp/cciXjCrG.s:41     .text:0000000000000038 .L0 
     /tmp/cciXjCrG.s:42     .text:0000000000000038 .L0 
     /tmp/cciXjCrG.s:44     .text:000000000000003c .L0 
     /tmp/cciXjCrG.s:46     .text:0000000000000040 .L0 
     /tmp/cciXjCrG.s:47     .text:0000000000000040 .L0 
     /tmp/cciXjCrG.s:49     .text:0000000000000044 .L0 
     /tmp/cciXjCrG.s:52     .text:0000000000000050 .L0 
     /tmp/cciXjCrG.s:54     .text:0000000000000054 .L0 
     /tmp/cciXjCrG.s:56     .text:0000000000000058 .L0 
     /tmp/cciXjCrG.s:58     .text:000000000000005c .L0 
     /tmp/cciXjCrG.s:59     .text:000000000000005c .L0 
     /tmp/cciXjCrG.s:62     .text:0000000000000068 .L0 
     /tmp/cciXjCrG.s:63     .text:0000000000000068 .L0 
     /tmp/cciXjCrG.s:66     .text:0000000000000074 .L0 
     /tmp/cciXjCrG.s:67     .text:0000000000000074 .L0 
     /tmp/cciXjCrG.s:70     .text:0000000000000080 .L0 
     /tmp/cciXjCrG.s:71     .text:0000000000000080 .L0 
     /tmp/cciXjCrG.s:76     .text:000000000000008c .L0 
     /tmp/cciXjCrG.s:77     .text:000000000000008c .L0 
     /tmp/cciXjCrG.s:84     .text:0000000000000098 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000098 .L0 
     /tmp/cciXjCrG.s:96     .text:000000000000009c .L0 
     /tmp/cciXjCrG.s:97     .text:000000000000009c .L0 
     /tmp/cciXjCrG.s:98     .text:000000000000009c .L0 
     /tmp/cciXjCrG.s:108    .text:00000000000000a4 .L0 
     /tmp/cciXjCrG.s:109    .text:00000000000000a4 .L0 
     /tmp/cciXjCrG.s:114    .text:00000000000000b4 .L0 
     /tmp/cciXjCrG.s:116    .text:00000000000000b8 .L0 
     /tmp/cciXjCrG.s:117    .text:00000000000000b8 .L0 
     /tmp/cciXjCrG.s:120    .text:00000000000000c4 .L0 
     /tmp/cciXjCrG.s:121    .text:00000000000000c4 .L0 
     /tmp/cciXjCrG.s:128    .text:00000000000000dc .L0 
     /tmp/cciXjCrG.s:129    .text:00000000000000dc .L0 
     /tmp/cciXjCrG.s:130    .text:00000000000000dc .L0 
     /tmp/cciXjCrG.s:136    .text:00000000000000e0 .L0 
     /tmp/cciXjCrG.s:137    .text:00000000000000e0 .L0 
     /tmp/cciXjCrG.s:142    .text:00000000000000e4 .L0 
     /tmp/cciXjCrG.s:144    .text:00000000000000e8 .L0 
     /tmp/cciXjCrG.s:145    .text:00000000000000e8 .L0 
     /tmp/cciXjCrG.s:150    .text:00000000000000f4 .L0 
GAS LISTING /tmp/cciXjCrG.s 			page 12


     /tmp/cciXjCrG.s:151    .text:00000000000000f4 .L0 
     /tmp/cciXjCrG.s:153    .text:00000000000000fc .L0 
     /tmp/cciXjCrG.s:155    .text:0000000000000100 .L0 
     /tmp/cciXjCrG.s:156    .text:0000000000000100 .L0 
     /tmp/cciXjCrG.s:158    .text:0000000000000104 .L0 
     /tmp/cciXjCrG.s:160    .text:0000000000000108 .L0 
     /tmp/cciXjCrG.s:166    .text:0000000000000108 .L0 
     /tmp/cciXjCrG.s:29     .text:0000000000000010 .L0 
     /tmp/cciXjCrG.s:31     .text:000000000000001c .L0 
     /tmp/cciXjCrG.s:35     .text:0000000000000028 .L0 
     /tmp/cciXjCrG.s:49     .text:0000000000000044 .L0 
     /tmp/cciXjCrG.s:59     .text:000000000000005c .L0 
     /tmp/cciXjCrG.s:63     .text:0000000000000068 .L0 
     /tmp/cciXjCrG.s:67     .text:0000000000000074 .L0 
     /tmp/cciXjCrG.s:71     .text:0000000000000080 .L0 
     /tmp/cciXjCrG.s:77     .text:000000000000008c .L0 
     /tmp/cciXjCrG.s:117    .text:00000000000000b8 .L0 
     /tmp/cciXjCrG.s:122    .text:00000000000000c8 .L0 
     /tmp/cciXjCrG.s:148    .text:00000000000000f4 .L2
     /tmp/cciXjCrG.s:126    .text:00000000000000dc .L3
     /tmp/cciXjCrG.s:1302   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cciXjCrG.s:2403   .debug_str:00000000000008cc .LASF168
     /tmp/cciXjCrG.s:2197   .debug_str:00000000000002a3 .LASF169
     /tmp/cciXjCrG.s:2381   .debug_str:000000000000080f .LASF170
     /tmp/cciXjCrG.s:5      .text:0000000000000000 .Ltext0
     /tmp/cciXjCrG.s:163    .text:0000000000000108 .Letext0
     /tmp/cciXjCrG.s:2113   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cciXjCrG.s:2223   .debug_str:0000000000000375 .LASF0
     /tmp/cciXjCrG.s:2255   .debug_str:0000000000000423 .LASF1
     /tmp/cciXjCrG.s:2341   .debug_str:00000000000006e9 .LASF2
     /tmp/cciXjCrG.s:2351   .debug_str:0000000000000731 .LASF4
     /tmp/cciXjCrG.s:2231   .debug_str:00000000000003a6 .LASF3
     /tmp/cciXjCrG.s:2127   .debug_str:000000000000006b .LASF5
     /tmp/cciXjCrG.s:2315   .debug_str:000000000000063b .LASF6
     /tmp/cciXjCrG.s:2249   .debug_str:00000000000003f8 .LASF7
     /tmp/cciXjCrG.s:2205   .debug_str:00000000000002d2 .LASF8
     /tmp/cciXjCrG.s:2213   .debug_str:0000000000000325 .LASF9
     /tmp/cciXjCrG.s:2153   .debug_str:0000000000000132 .LASF10
     /tmp/cciXjCrG.s:2195   .debug_str:0000000000000294 .LASF11
     /tmp/cciXjCrG.s:2169   .debug_str:00000000000001b9 .LASF12
     /tmp/cciXjCrG.s:2151   .debug_str:0000000000000122 .LASF13
     /tmp/cciXjCrG.s:2377   .debug_str:00000000000007ee .LASF14
     /tmp/cciXjCrG.s:2187   .debug_str:000000000000023a .LASF15
     /tmp/cciXjCrG.s:2369   .debug_str:00000000000007b0 .LASF16
     /tmp/cciXjCrG.s:2149   .debug_str:0000000000000118 .LASF31
     /tmp/cciXjCrG.s:2155   .debug_str:0000000000000141 .LASF17
     /tmp/cciXjCrG.s:2137   .debug_str:00000000000000cf .LASF18
     /tmp/cciXjCrG.s:2253   .debug_str:000000000000041e .LASF19
     /tmp/cciXjCrG.s:2311   .debug_str:000000000000061a .LASF30
     /tmp/cciXjCrG.s:2415   .debug_str:00000000000009d2 .LASF20
     /tmp/cciXjCrG.s:2321   .debug_str:0000000000000672 .LASF21
     /tmp/cciXjCrG.s:2331   .debug_str:00000000000006b5 .LASF22
     /tmp/cciXjCrG.s:2319   .debug_str:0000000000000663 .LASF23
     /tmp/cciXjCrG.s:2221   .debug_str:0000000000000368 .LASF24
     /tmp/cciXjCrG.s:2391   .debug_str:000000000000087b .LASF25
     /tmp/cciXjCrG.s:2279   .debug_str:00000000000004f9 .LASF26
     /tmp/cciXjCrG.s:2131   .debug_str:000000000000007d .LASF28
GAS LISTING /tmp/cciXjCrG.s 			page 13


     /tmp/cciXjCrG.s:2385   .debug_str:000000000000085c .LASF27
     /tmp/cciXjCrG.s:2281   .debug_str:0000000000000503 .LASF29
     /tmp/cciXjCrG.s:2229   .debug_str:000000000000039c .LASF49
     /tmp/cciXjCrG.s:2273   .debug_str:00000000000004a7 .LASF51
     /tmp/cciXjCrG.s:2283   .debug_str:0000000000000524 .LASF53
     /tmp/cciXjCrG.s:2211   .debug_str:00000000000002ff .LASF55
     /tmp/cciXjCrG.s:2161   .debug_str:000000000000016a .LASF32
     /tmp/cciXjCrG.s:2353   .debug_str:0000000000000738 .LASF33
     /tmp/cciXjCrG.s:2125   .debug_str:000000000000005f .LASF34
     /tmp/cciXjCrG.s:2387   .debug_str:0000000000000865 .LASF37
     /tmp/cciXjCrG.s:2287   .debug_str:0000000000000556 .LASF39
     /tmp/cciXjCrG.s:2139   .debug_str:00000000000000d4 .LASF35
     /tmp/cciXjCrG.s:2419   .debug_str:00000000000009e8 .LASF36
     /tmp/cciXjCrG.s:2345   .debug_str:0000000000000704 .LASF38
     /tmp/cciXjCrG.s:2147   .debug_str:0000000000000103 .LASF40
     /tmp/cciXjCrG.s:2389   .debug_str:0000000000000870 .LASF41
     /tmp/cciXjCrG.s:2193   .debug_str:000000000000027e .LASF42
     /tmp/cciXjCrG.s:2175   .debug_str:00000000000001ee .LASF43
     /tmp/cciXjCrG.s:2443   .debug_str:0000000000000a73 .LASF44
     /tmp/cciXjCrG.s:2375   .debug_str:00000000000007e1 .LASF45
     /tmp/cciXjCrG.s:2425   .debug_str:0000000000000a16 .LASF46
     /tmp/cciXjCrG.s:2303   .debug_str:00000000000005e1 .LASF171
     /tmp/cciXjCrG.s:2365   .debug_str:0000000000000781 .LASF47
     /tmp/cciXjCrG.s:2165   .debug_str:0000000000000185 .LASF48
     /tmp/cciXjCrG.s:2395   .debug_str:0000000000000892 .LASF50
     /tmp/cciXjCrG.s:2397   .debug_str:000000000000089e .LASF52
     /tmp/cciXjCrG.s:2257   .debug_str:0000000000000436 .LASF54
     /tmp/cciXjCrG.s:2407   .debug_str:00000000000009a4 .LASF56
     /tmp/cciXjCrG.s:2399   .debug_str:00000000000008b7 .LASF57
     /tmp/cciXjCrG.s:2461   .debug_str:0000000000000adb .LASF58
     /tmp/cciXjCrG.s:2209   .debug_str:00000000000002f3 .LASF59
     /tmp/cciXjCrG.s:2145   .debug_str:00000000000000f3 .LASF60
     /tmp/cciXjCrG.s:2203   .debug_str:00000000000002c6 .LASF61
     /tmp/cciXjCrG.s:2119   .debug_str:0000000000000016 .LASF62
     /tmp/cciXjCrG.s:2267   .debug_str:0000000000000478 .LASF63
     /tmp/cciXjCrG.s:2367   .debug_str:000000000000079d .LASF64
     /tmp/cciXjCrG.s:2343   .debug_str:00000000000006f7 .LASF65
     /tmp/cciXjCrG.s:2405   .debug_str:0000000000000990 .LASF172
     /tmp/cciXjCrG.s:2117   .debug_str:0000000000000011 .LASF66
     /tmp/cciXjCrG.s:2455   .debug_str:0000000000000abc .LASF67
     /tmp/cciXjCrG.s:2413   .debug_str:00000000000009ca .LASF68
     /tmp/cciXjCrG.s:2383   .debug_str:0000000000000853 .LASF69
     /tmp/cciXjCrG.s:2295   .debug_str:000000000000059e .LASF70
     /tmp/cciXjCrG.s:2459   .debug_str:0000000000000ad6 .LASF71
     /tmp/cciXjCrG.s:2143   .debug_str:00000000000000e5 .LASF72
     /tmp/cciXjCrG.s:2259   .debug_str:000000000000043c .LASF74
     /tmp/cciXjCrG.s:2171   .debug_str:00000000000001c9 .LASF76
     /tmp/cciXjCrG.s:2123   .debug_str:0000000000000037 .LASF78
     /tmp/cciXjCrG.s:2181   .debug_str:0000000000000213 .LASF73
     /tmp/cciXjCrG.s:2163   .debug_str:0000000000000172 .LASF75
     /tmp/cciXjCrG.s:2393   .debug_str:000000000000088d .LASF77
     /tmp/cciXjCrG.s:2199   .debug_str:00000000000002b0 .LASF79
     /tmp/cciXjCrG.s:2349   .debug_str:0000000000000726 .LASF173
     /tmp/cciXjCrG.s:2333   .debug_str:00000000000006bf .LASF80
     /tmp/cciXjCrG.s:2433   .debug_str:0000000000000a54 .LASF81
     /tmp/cciXjCrG.s:2427   .debug_str:0000000000000a36 .LASF174
     /tmp/cciXjCrG.s:2191   .debug_str:0000000000000272 .LASF82
GAS LISTING /tmp/cciXjCrG.s 			page 14


     /tmp/cciXjCrG.s:2401   .debug_str:00000000000008bf .LASF83
     /tmp/cciXjCrG.s:2177   .debug_str:00000000000001f5 .LASF84
     /tmp/cciXjCrG.s:2215   .debug_str:0000000000000333 .LASF85
     /tmp/cciXjCrG.s:2219   .debug_str:0000000000000350 .LASF86
     /tmp/cciXjCrG.s:2421   .debug_str:00000000000009ff .LASF89
     /tmp/cciXjCrG.s:2265   .debug_str:0000000000000463 .LASF91
     /tmp/cciXjCrG.s:2337   .debug_str:00000000000006d5 .LASF87
     /tmp/cciXjCrG.s:2297   .debug_str:00000000000005a6 .LASF88
     /tmp/cciXjCrG.s:2323   .debug_str:0000000000000677 .LASF90
     /tmp/cciXjCrG.s:2325   .debug_str:000000000000067e .LASF92
     /tmp/cciXjCrG.s:2291   .debug_str:0000000000000575 .LASF93
     /tmp/cciXjCrG.s:2251   .debug_str:000000000000040b .LASF94
     /tmp/cciXjCrG.s:2451   .debug_str:0000000000000a9e .LASF95
     /tmp/cciXjCrG.s:2373   .debug_str:00000000000007cd .LASF96
     /tmp/cciXjCrG.s:2289   .debug_str:000000000000056d .LASF97
     /tmp/cciXjCrG.s:2457   .debug_str:0000000000000ac2 .LASF98
     /tmp/cciXjCrG.s:2261   .debug_str:0000000000000455 .LASF99
     /tmp/cciXjCrG.s:2327   .debug_str:0000000000000691 .LASF100
     /tmp/cciXjCrG.s:2463   .debug_str:0000000000000ae8 .LASF101
     /tmp/cciXjCrG.s:2227   .debug_str:0000000000000388 .LASF102
     /tmp/cciXjCrG.s:2371   .debug_str:00000000000007c6 .LASF103
     /tmp/cciXjCrG.s:2355   .debug_str:000000000000073d .LASF104
     /tmp/cciXjCrG.s:2357   .debug_str:0000000000000750 .LASF105
     /tmp/cciXjCrG.s:2159   .debug_str:0000000000000157 .LASF106
     /tmp/cciXjCrG.s:2185   .debug_str:0000000000000234 .LASF107
     /tmp/cciXjCrG.s:2217   .debug_str:000000000000033e .LASF108
     /tmp/cciXjCrG.s:2225   .debug_str:0000000000000382 .LASF109
     /tmp/cciXjCrG.s:2179   .debug_str:0000000000000201 .LASF110
     /tmp/cciXjCrG.s:2129   .debug_str:0000000000000072 .LASF111
     /tmp/cciXjCrG.s:2347   .debug_str:000000000000070e .LASF112
     /tmp/cciXjCrG.s:2339   .debug_str:00000000000006de .LASF113
     /tmp/cciXjCrG.s:2183   .debug_str:000000000000021c .LASF114
     /tmp/cciXjCrG.s:2435   .debug_str:0000000000000a5a .LASF115
     /tmp/cciXjCrG.s:2453   .debug_str:0000000000000aa6 .LASF116
     /tmp/cciXjCrG.s:2431   .debug_str:0000000000000a4a .LASF117
     /tmp/cciXjCrG.s:2277   .debug_str:00000000000004e3 .LASF118
     /tmp/cciXjCrG.s:2445   .debug_str:0000000000000a85 .LASF119
     /tmp/cciXjCrG.s:2135   .debug_str:00000000000000b3 .LASF120
     /tmp/cciXjCrG.s:2359   .debug_str:0000000000000757 .LASF121
     /tmp/cciXjCrG.s:2307   .debug_str:00000000000005f7 .LASF122
     /tmp/cciXjCrG.s:2437   .debug_str:0000000000000a64 .LASF123
     /tmp/cciXjCrG.s:2305   .debug_str:00000000000005e6 .LASF124
     /tmp/cciXjCrG.s:2235   .debug_str:00000000000003c9 .LASF125
     /tmp/cciXjCrG.s:2275   .debug_str:00000000000004d2 .LASF126
     /tmp/cciXjCrG.s:2439   .debug_str:0000000000000a69 .LASF127
     /tmp/cciXjCrG.s:2233   .debug_str:00000000000003b8 .LASF128
     /tmp/cciXjCrG.s:2237   .debug_str:00000000000003ce .LASF129
     /tmp/cciXjCrG.s:2313   .debug_str:000000000000062a .LASF130
     /tmp/cciXjCrG.s:2441   .debug_str:0000000000000a6e .LASF131
     /tmp/cciXjCrG.s:2121   .debug_str:0000000000000026 .LASF132
     /tmp/cciXjCrG.s:2239   .debug_str:00000000000003d3 .LASF133
     /tmp/cciXjCrG.s:2247   .debug_str:00000000000003e7 .LASF134
     /tmp/cciXjCrG.s:2167   .debug_str:00000000000001b4 .LASF135
     /tmp/cciXjCrG.s:2465   .debug_str:0000000000000af0 .LASF136
     /tmp/cciXjCrG.s:2241   .debug_str:00000000000003d8 .LASF137
     /tmp/cciXjCrG.s:2363   .debug_str:0000000000000770 .LASF138
     /tmp/cciXjCrG.s:2299   .debug_str:00000000000005bb .LASF139
GAS LISTING /tmp/cciXjCrG.s 			page 15


     /tmp/cciXjCrG.s:2409   .debug_str:00000000000009b4 .LASF140
     /tmp/cciXjCrG.s:2243   .debug_str:00000000000003dd .LASF141
     /tmp/cciXjCrG.s:2115   .debug_str:0000000000000000 .LASF142
     /tmp/cciXjCrG.s:2447   .debug_str:0000000000000a94 .LASF143
     /tmp/cciXjCrG.s:2335   .debug_str:00000000000006c4 .LASF144
     /tmp/cciXjCrG.s:2245   .debug_str:00000000000003e2 .LASF145
     /tmp/cciXjCrG.s:2417   .debug_str:00000000000009d7 .LASF146
     /tmp/cciXjCrG.s:2449   .debug_str:0000000000000a99 .LASF147
     /tmp/cciXjCrG.s:2269   .debug_str:0000000000000485 .LASF148
     /tmp/cciXjCrG.s:2141   .debug_str:00000000000000e0 .LASF149
     /tmp/cciXjCrG.s:2271   .debug_str:0000000000000496 .LASF150
     /tmp/cciXjCrG.s:2309   .debug_str:0000000000000615 .LASF151
     /tmp/cciXjCrG.s:2207   .debug_str:00000000000002e2 .LASF152
     /tmp/cciXjCrG.s:2411   .debug_str:00000000000009c5 .LASF153
     /tmp/cciXjCrG.s:2157   .debug_str:0000000000000146 .LASF154
     /tmp/cciXjCrG.s:2317   .debug_str:000000000000064e .LASF155
     /tmp/cciXjCrG.s:2189   .debug_str:0000000000000250 .LASF156
     /tmp/cciXjCrG.s:2379   .debug_str:00000000000007fa .LASF157
     /tmp/cciXjCrG.s:2293   .debug_str:000000000000057c .LASF158
     /tmp/cciXjCrG.s:2173   .debug_str:00000000000001d7 .LASF159
     /tmp/cciXjCrG.s:2285   .debug_str:0000000000000532 .LASF160
     /tmp/cciXjCrG.s:10     .text:0000000000000000 .LFB55
     /tmp/cciXjCrG.s:161    .text:0000000000000108 .LFE55
     /tmp/cciXjCrG.s:2361   .debug_str:0000000000000768 .LASF161
     /tmp/cciXjCrG.s:24     .text:0000000000000010 .LBB10
     /tmp/cciXjCrG.s:74     .text:000000000000008c .LBE10
     /tmp/cciXjCrG.s:80     .text:0000000000000098 .LBB12
     /tmp/cciXjCrG.s:92     .text:000000000000009c .LBE12
     /tmp/cciXjCrG.s:2078   .debug_loc:0000000000000000 .LLST0
     /tmp/cciXjCrG.s:94     .text:000000000000009c .LBB14
     /tmp/cciXjCrG.s:106    .text:00000000000000a4 .LBE14
     /tmp/cciXjCrG.s:2085   .debug_loc:0000000000000023 .LLST1
     /tmp/cciXjCrG.s:132    .text:00000000000000e0 .LBB16
     /tmp/cciXjCrG.s:140    .text:00000000000000e4 .LBE16
     /tmp/cciXjCrG.s:2093   .debug_loc:0000000000000047 .LLST2
     /tmp/cciXjCrG.s:112    .text:00000000000000b4 .LVL3
     /tmp/cciXjCrG.s:125    .text:00000000000000dc .LVL4
     /tmp/cciXjCrG.s:146    .text:00000000000000f0 .LVL7
     /tmp/cciXjCrG.s:2429   .debug_str:0000000000000a45 .LASF162
     /tmp/cciXjCrG.s:2263   .debug_str:000000000000045d .LASF163
     /tmp/cciXjCrG.s:2201   .debug_str:00000000000002c1 .LASF175
     /tmp/cciXjCrG.s:2301   .debug_str:00000000000005c0 .LASF164
     /tmp/cciXjCrG.s:2423   .debug_str:0000000000000a08 .LASF166
     /tmp/cciXjCrG.s:2133   .debug_str:000000000000009e .LASF165
     /tmp/cciXjCrG.s:2329   .debug_str:00000000000006a5 .LASF167
     /tmp/cciXjCrG.s:79     .text:0000000000000098 .LVL0
     /tmp/cciXjCrG.s:89     .text:000000000000009c .LVL1
     /tmp/cciXjCrG.s:103    .text:00000000000000a4 .LVL2
     /tmp/cciXjCrG.s:131    .text:00000000000000e0 .LVL5
     /tmp/cciXjCrG.s:138    .text:00000000000000e4 .LVL6
     /tmp/cciXjCrG.s:167    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
HEAP_START_ADDR
_ZN15MemoryAllocator4freeE
_ZN15MemoryAllocator4usedE
HEAP_END_ADDR
GAS LISTING /tmp/cciXjCrG.s 			page 16


_ZN15MemoryAllocator9newCalledE
_ZN15MemoryAllocator14newArrayCalledE
_ZN15MemoryAllocator12deleteCalledE
_ZN15MemoryAllocator17deleteArrayCalledE
_ZN5Riscv16stvecVectorTableEv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB7runningE
_Z8userMainv
_Z13thread_createPP3TCBPFvPvES2_
_Z15thread_dispatchv
