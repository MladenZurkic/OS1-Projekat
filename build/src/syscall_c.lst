GAS LISTING /tmp/ccYTzKdO.s 			page 1


   1              		.file	"syscall_c.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z13thread_createPP3TCBPFvPvES2_
   9              	_Z13thread_createPP3TCBPFvPvES2_:
  10              	.LFB52:
  11              		.file 1 "src/syscall_c.cpp"
   1:src/syscall_c.cpp **** #include "../h/syscall_c.hpp"
   2:src/syscall_c.cpp **** #include "../h/tcb.hpp"
   3:src/syscall_c.cpp **** #include "../h/mySemaphore.hpp"
   4:src/syscall_c.cpp **** #include "../h/riscv.hpp"
   5:src/syscall_c.cpp **** 
   6:src/syscall_c.cpp **** //void* mem_alloc(size_t size) {
   7:src/syscall_c.cpp **** //    Riscv::w_a0(size);
   8:src/syscall_c.cpp **** //    __asm__ volatile("ecall");
   9:src/syscall_c.cpp **** //}
  10:src/syscall_c.cpp **** 
  11:src/syscall_c.cpp **** 
  12:src/syscall_c.cpp **** 
  13:src/syscall_c.cpp **** int thread_create(thread_t* handle, void (*start_routine)(void*), void* arg) {
  12              		.loc 1 13 78
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
  14:src/syscall_c.cpp **** 
  15:src/syscall_c.cpp ****     __asm__ volatile("mv a3, %0" : : "r"(arg));
  21              		.loc 1 15 5
  22              		.loc 1 15 47 is_stmt 0
  23              	#APP
  24              	# 15 "src/syscall_c.cpp" 1
  16              	    __asm__ volatile("mv a2, %0" : : "r"(start_routine));
  25              		mv a3, a2
  26              	# 0 "" 2
  27              		.loc 1 16 5 is_stmt 1
  28              		.loc 1 16 57 is_stmt 0
  29              	# 16 "src/syscall_c.cpp" 1
  17              	    __asm__ volatile("mv a1, %0" : : "r"(handle));
  30              		mv a2, a1
  31              	# 0 "" 2
  32              		.loc 1 17 5 is_stmt 1
  33              		.loc 1 17 50 is_stmt 0
  34              	# 17 "src/syscall_c.cpp" 1
  18              	    __asm__ volatile("li a0, 0x11");
  35              		mv a1, a0
  36              	# 0 "" 2
  37              		.loc 1 18 5 is_stmt 1
  38              		.loc 1 18 36 is_stmt 0
  39              	# 18 "src/syscall_c.cpp" 1
  19              	    __asm__ volatile("ecall");
GAS LISTING /tmp/ccYTzKdO.s 			page 2


  40              		li a0, 0x11
  41              	# 0 "" 2
  42              		.loc 1 19 5 is_stmt 1
  43              		.loc 1 19 30 is_stmt 0
  44              	# 19 "src/syscall_c.cpp" 1
  20              	
  21:src/syscall_c.cpp ****     uint64 returnValue; //bio je uint64 ali vrednosti mogu da budu i negativne
  45              		ecall
  46              	# 0 "" 2
  47              		.loc 1 21 5 is_stmt 1
  22:src/syscall_c.cpp ****     __asm__ volatile("mv %0, a0" : "=r"(returnValue));
  48              		.loc 1 22 5
  49              		.loc 1 22 54 is_stmt 0
  50              	# 22 "src/syscall_c.cpp" 1
  23              	    if(returnValue == (uint64)4294967295) { //maxint
  51              		mv a0, a0
  52              	# 0 "" 2
  53              	.LVL1:
  54              		.loc 1 23 5 is_stmt 1
  55              	#NO_APP
  56 0024 9307F0FF 		li	a5,-1
  57 0028 93D70702 		srli	a5,a5,32
  58 002c 630AF500 		beq	a0,a5,.L3
  24:src/syscall_c.cpp ****         return -1;
  25:src/syscall_c.cpp ****     }
  26:src/syscall_c.cpp ****     return (int)returnValue;
  59              		.loc 1 26 5
  60              		.loc 1 26 17 is_stmt 0
  61 0030 1B050500 		sext.w	a0,a0
  62              	.LVL2:
  63              	.L2:
  27:src/syscall_c.cpp **** }
  64              		.loc 1 27 1
  65 0034 03348100 		ld	s0,8(sp)
  66              		.cfi_remember_state
  67              		.cfi_restore 8
  68              		.cfi_def_cfa 2, 16
  69 0038 13010101 		addi	sp,sp,16
  70              		.cfi_def_cfa_offset 0
  71 003c 67800000 		jr	ra
  72              	.LVL3:
  73              	.L3:
  74              		.cfi_restore_state
  24:src/syscall_c.cpp ****         return -1;
  75              		.loc 1 24 17
  76 0040 1305F0FF 		li	a0,-1
  77              	.LVL4:
  78 0044 6FF01FFF 		j	.L2
  79              		.cfi_endproc
  80              	.LFE52:
  82              		.align	2
  83              		.globl	_Z15thread_dispatchv
  85              	_Z15thread_dispatchv:
  86              	.LFB53:
  28:src/syscall_c.cpp **** 
  29:src/syscall_c.cpp **** 
  30:src/syscall_c.cpp **** void thread_dispatch() {
GAS LISTING /tmp/ccYTzKdO.s 			page 3


  87              		.loc 1 30 24 is_stmt 1
  88              		.cfi_startproc
  89 0048 130101FF 		addi	sp,sp,-16
  90              		.cfi_def_cfa_offset 16
  91 004c 23348100 		sd	s0,8(sp)
  92              		.cfi_offset 8, -8
  93 0050 13040101 		addi	s0,sp,16
  94              		.cfi_def_cfa 8, 0
  31:src/syscall_c.cpp ****     Riscv::w_a0(0x13);
  95              		.loc 1 31 5
  96              	.LVL5:
  97              	.LBB4:
  98              	.LBB5:
  99              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
GAS LISTING /tmp/ccYTzKdO.s 			page 4


  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     //stvec Vector "table"
  83:src/../h/riscv.hpp ****     static void stvecVectorTable();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     //read a0 register
  86:src/../h/riscv.hpp ****     static uint64 r_a0();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     //write to a0 register
  89:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a1 register
  92:src/../h/riscv.hpp ****     static uint64 r_a1();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //write to a1 register
  95:src/../h/riscv.hpp ****     static void w_a1(uint64 writeValue);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //read a2 register
  98:src/../h/riscv.hpp ****     static uint64 r_a2();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //write to a2 register
GAS LISTING /tmp/ccYTzKdO.s 			page 5


 101:src/../h/riscv.hpp ****     static void w_a2(uint64 writeValue);
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp ****     //read a3 register
 104:src/../h/riscv.hpp ****     static uint64 r_a3();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     //write to a3 register
 107:src/../h/riscv.hpp ****     static void w_a3(uint64 writeValue);
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp ****     //read a4 register
 110:src/../h/riscv.hpp ****     static uint64 r_a4();
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     //write to a4 register
 113:src/../h/riscv.hpp ****     static void w_a4(uint64 writeValue);
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp ****     //read a5 register
 116:src/../h/riscv.hpp ****     static uint64 r_a5();
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp ****     //write to a5 register
 119:src/../h/riscv.hpp ****     static void w_a5(uint64 writeValue);
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp ****     //read a6 register
 122:src/../h/riscv.hpp ****     static uint64 r_a6();
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp ****     //write to a6 register
 125:src/../h/riscv.hpp ****     static void w_a6(uint64 writeValue);
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp ****     //read a7 register
 128:src/../h/riscv.hpp ****     static uint64 r_a7();
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp ****     //write to a7 register
 131:src/../h/riscv.hpp ****     static void w_a7(uint64 writeValue);
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** private:
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp ****     // supervisor trap handler
 137:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
 142:src/../h/riscv.hpp **** };
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     uint64 volatile scause;
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 149:src/../h/riscv.hpp ****     return scause;
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
GAS LISTING /tmp/ccYTzKdO.s 			page 6


 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sepc;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 161:src/../h/riscv.hpp ****     return sepc;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile stvec;
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 173:src/../h/riscv.hpp ****     return stvec;
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile stval;
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 185:src/../h/riscv.hpp ****     return stval;
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 191:src/../h/riscv.hpp **** }
 192:src/../h/riscv.hpp **** 
 193:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 194:src/../h/riscv.hpp **** {
 195:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 196:src/../h/riscv.hpp **** }
 197:src/../h/riscv.hpp **** 
 198:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 199:src/../h/riscv.hpp **** {
 200:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 201:src/../h/riscv.hpp **** }
 202:src/../h/riscv.hpp **** 
 203:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 204:src/../h/riscv.hpp **** {
 205:src/../h/riscv.hpp ****     uint64 volatile sip;
 206:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 207:src/../h/riscv.hpp ****     return sip;
 208:src/../h/riscv.hpp **** }
 209:src/../h/riscv.hpp **** 
 210:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 211:src/../h/riscv.hpp **** {
 212:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 213:src/../h/riscv.hpp **** }
 214:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccYTzKdO.s 			page 7


 215:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 216:src/../h/riscv.hpp **** {
 217:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 218:src/../h/riscv.hpp **** }
 219:src/../h/riscv.hpp **** 
 220:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 221:src/../h/riscv.hpp **** {
 222:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 223:src/../h/riscv.hpp **** }
 224:src/../h/riscv.hpp **** 
 225:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 226:src/../h/riscv.hpp **** {
 227:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 228:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 229:src/../h/riscv.hpp ****     return sstatus;
 230:src/../h/riscv.hpp **** }
 231:src/../h/riscv.hpp **** 
 232:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 233:src/../h/riscv.hpp **** {
 234:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 235:src/../h/riscv.hpp **** }
 236:src/../h/riscv.hpp **** 
 237:src/../h/riscv.hpp **** //a0
 238:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 239:src/../h/riscv.hpp **** {
 240:src/../h/riscv.hpp ****     uint64 volatile a0;
 241:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
 242:src/../h/riscv.hpp ****     return a0;
 243:src/../h/riscv.hpp **** }
 244:src/../h/riscv.hpp **** 
 245:src/../h/riscv.hpp **** 
 246:src/../h/riscv.hpp **** inline void Riscv::w_a0(uint64 writeValue) {
 247:src/../h/riscv.hpp ****     __asm__ volatile ("mv a0, %0" : : "r"(writeValue));
 100              		.loc 2 247 5
 101              		.loc 2 247 55 is_stmt 0
 102 0054 93073001 		li	a5,19
 103              	#APP
 104              	# 247 "src/../h/riscv.hpp" 1
 248              	}
 105              		mv a0, a5
 106              	# 0 "" 2
 107              	.LVL6:
 108              	#NO_APP
 109              	.LBE5:
 110              	.LBE4:
  32:src/syscall_c.cpp ****     __asm__ volatile ("ecall");
 111              		.loc 1 32 5 is_stmt 1
 112              		.loc 1 32 31 is_stmt 0
 113              	#APP
 114              	# 32 "src/syscall_c.cpp" 1
  33              	
  34:src/syscall_c.cpp **** }
 115              		ecall
 116              	# 0 "" 2
 117              		.loc 1 34 1
 118              	#NO_APP
 119 0060 03348100 		ld	s0,8(sp)
GAS LISTING /tmp/ccYTzKdO.s 			page 8


 120              		.cfi_restore 8
 121              		.cfi_def_cfa 2, 16
 122 0064 13010101 		addi	sp,sp,16
 123              		.cfi_def_cfa_offset 0
 124 0068 67800000 		jr	ra
 125              		.cfi_endproc
 126              	.LFE53:
 128              		.align	2
 129              		.globl	_Z11thread_joinP3TCB
 131              	_Z11thread_joinP3TCB:
 132              	.LFB54:
  35:src/syscall_c.cpp **** 
  36:src/syscall_c.cpp **** void thread_join(thread_t handle) {
 133              		.loc 1 36 35 is_stmt 1
 134              		.cfi_startproc
 135              	.LVL7:
 136 006c 130101FF 		addi	sp,sp,-16
 137              		.cfi_def_cfa_offset 16
 138 0070 23348100 		sd	s0,8(sp)
 139              		.cfi_offset 8, -8
 140 0074 13040101 		addi	s0,sp,16
 141              		.cfi_def_cfa 8, 0
  37:src/syscall_c.cpp ****     __asm__ volatile ("mv a1, %0" : : "r" (handle));
 142              		.loc 1 37 5
 143              		.loc 1 37 52 is_stmt 0
 144              	#APP
 145              	# 37 "src/syscall_c.cpp" 1
  38              	    __asm__ volatile("li a0, 0x14");
 146              		mv a1, a0
 147              	# 0 "" 2
 148              		.loc 1 38 5 is_stmt 1
 149              		.loc 1 38 36 is_stmt 0
 150              	# 38 "src/syscall_c.cpp" 1
  39              	    __asm__ volatile ("ecall");
 151              		li a0, 0x14
 152              	# 0 "" 2
 153              		.loc 1 39 5 is_stmt 1
 154              		.loc 1 39 31 is_stmt 0
 155              	# 39 "src/syscall_c.cpp" 1
  40              	}...
 156              		ecall
 157              	# 0 "" 2
 158              		.loc 1 40 1
 159              	#NO_APP
 160 0084 03348100 		ld	s0,8(sp)
 161              		.cfi_restore 8
 162              		.cfi_def_cfa 2, 16
 163 0088 13010101 		addi	sp,sp,16
 164              		.cfi_def_cfa_offset 0
 165 008c 67800000 		jr	ra
 166              		.cfi_endproc
 167              	.LFE54:
 169              	.Letext0:
 170              		.file 3 "src/../h/../lib/hw.h"
 171              		.file 4 "src/../h/tcb.hpp"
 172              		.file 5 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/ccYTzKdO.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscall_c.cpp
     /tmp/ccYTzKdO.s:9      .text:0000000000000000 _Z13thread_createPP3TCBPFvPvES2_
     /tmp/ccYTzKdO.s:13     .text:0000000000000000 .L0 
     /tmp/ccYTzKdO.s:15     .text:0000000000000000 .L0 
     /tmp/ccYTzKdO.s:16     .text:0000000000000004 .L0 
     /tmp/ccYTzKdO.s:18     .text:0000000000000008 .L0 
     /tmp/ccYTzKdO.s:20     .text:000000000000000c .L0 
     /tmp/ccYTzKdO.s:22     .text:000000000000000c .L0 
   src/syscall_c.cpp:15     .text:000000000000000c .L0 
     /tmp/ccYTzKdO.s:28     .text:0000000000000010 .L0 
   src/syscall_c.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccYTzKdO.s:33     .text:0000000000000014 .L0 
   src/syscall_c.cpp:17     .text:0000000000000014 .L0 
     /tmp/ccYTzKdO.s:38     .text:0000000000000018 .L0 
   src/syscall_c.cpp:18     .text:0000000000000018 .L0 
     /tmp/ccYTzKdO.s:43     .text:000000000000001c .L0 
   src/syscall_c.cpp:19     .text:000000000000001c .L0 
     /tmp/ccYTzKdO.s:48     .text:0000000000000020 .L0 
     /tmp/ccYTzKdO.s:49     .text:0000000000000020 .L0 
   src/syscall_c.cpp:22     .text:0000000000000020 .L0 
     /tmp/ccYTzKdO.s:56     .text:0000000000000024 .L0 
     /tmp/ccYTzKdO.s:60     .text:0000000000000030 .L0 
     /tmp/ccYTzKdO.s:61     .text:0000000000000030 .L0 
     /tmp/ccYTzKdO.s:65     .text:0000000000000034 .L0 
     /tmp/ccYTzKdO.s:66     .text:0000000000000038 .L0 
     /tmp/ccYTzKdO.s:67     .text:0000000000000038 .L0 
     /tmp/ccYTzKdO.s:68     .text:0000000000000038 .L0 
     /tmp/ccYTzKdO.s:70     .text:000000000000003c .L0 
     /tmp/ccYTzKdO.s:74     .text:0000000000000040 .L0 
     /tmp/ccYTzKdO.s:76     .text:0000000000000040 .L0 
     /tmp/ccYTzKdO.s:79     .text:0000000000000048 .L0 
     /tmp/ccYTzKdO.s:85     .text:0000000000000048 _Z15thread_dispatchv
     /tmp/ccYTzKdO.s:88     .text:0000000000000048 .L0 
     /tmp/ccYTzKdO.s:89     .text:0000000000000048 .L0 
     /tmp/ccYTzKdO.s:90     .text:000000000000004c .L0 
     /tmp/ccYTzKdO.s:92     .text:0000000000000050 .L0 
     /tmp/ccYTzKdO.s:94     .text:0000000000000054 .L0 
     /tmp/ccYTzKdO.s:100    .text:0000000000000054 .L0 
     /tmp/ccYTzKdO.s:101    .text:0000000000000054 .L0 
     /tmp/ccYTzKdO.s:102    .text:0000000000000054 .L0 
     /tmp/ccYTzKdO.s:112    .text:000000000000005c .L0 
   src/syscall_c.cpp:32     .text:000000000000005c .L0 
     /tmp/ccYTzKdO.s:119    .text:0000000000000060 .L0 
     /tmp/ccYTzKdO.s:120    .text:0000000000000064 .L0 
     /tmp/ccYTzKdO.s:121    .text:0000000000000064 .L0 
     /tmp/ccYTzKdO.s:123    .text:0000000000000068 .L0 
     /tmp/ccYTzKdO.s:125    .text:000000000000006c .L0 
     /tmp/ccYTzKdO.s:131    .text:000000000000006c _Z11thread_joinP3TCB
     /tmp/ccYTzKdO.s:134    .text:000000000000006c .L0 
     /tmp/ccYTzKdO.s:136    .text:000000000000006c .L0 
     /tmp/ccYTzKdO.s:137    .text:0000000000000070 .L0 
     /tmp/ccYTzKdO.s:139    .text:0000000000000074 .L0 
     /tmp/ccYTzKdO.s:141    .text:0000000000000078 .L0 
     /tmp/ccYTzKdO.s:143    .text:0000000000000078 .L0 
   src/syscall_c.cpp:37     .text:0000000000000078 .L0 
     /tmp/ccYTzKdO.s:149    .text:000000000000007c .L0 
GAS LISTING /tmp/ccYTzKdO.s 			page 10


   src/syscall_c.cpp:38     .text:000000000000007c .L0 
     /tmp/ccYTzKdO.s:154    .text:0000000000000080 .L0 
   src/syscall_c.cpp:39     .text:0000000000000080 .L0 
     /tmp/ccYTzKdO.s:160    .text:0000000000000084 .L0 
     /tmp/ccYTzKdO.s:161    .text:0000000000000088 .L0 
     /tmp/ccYTzKdO.s:162    .text:0000000000000088 .L0 
     /tmp/ccYTzKdO.s:164    .text:000000000000008c .L0 
     /tmp/ccYTzKdO.s:166    .text:0000000000000090 .L0 
     /tmp/ccYTzKdO.s:173    .text:0000000000000090 .L0 
     /tmp/ccYTzKdO.s:73     .text:0000000000000040 .L3
     /tmp/ccYTzKdO.s:63     .text:0000000000000034 .L2
     /tmp/ccYTzKdO.s:990    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccYTzKdO.s:1975   .debug_str:0000000000000725 .LASF125
     /tmp/ccYTzKdO.s:1847   .debug_str:000000000000035c .LASF126
     /tmp/ccYTzKdO.s:1791   .debug_str:00000000000001d1 .LASF127
     /tmp/ccYTzKdO.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccYTzKdO.s:169    .text:0000000000000090 .Letext0
     /tmp/ccYTzKdO.s:1731   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccYTzKdO.s:1805   .debug_str:000000000000025f .LASF0
     /tmp/ccYTzKdO.s:1835   .debug_str:000000000000030c .LASF1
     /tmp/ccYTzKdO.s:1905   .debug_str:000000000000054b .LASF2
     /tmp/ccYTzKdO.s:1913   .debug_str:000000000000058d .LASF4
     /tmp/ccYTzKdO.s:1811   .debug_str:0000000000000286 .LASF3
     /tmp/ccYTzKdO.s:1743   .debug_str:000000000000005b .LASF5
     /tmp/ccYTzKdO.s:1887   .debug_str:00000000000004c0 .LASF6
     /tmp/ccYTzKdO.s:1829   .debug_str:00000000000002d8 .LASF7
     /tmp/ccYTzKdO.s:1789   .debug_str:00000000000001c1 .LASF8
     /tmp/ccYTzKdO.s:1797   .debug_str:000000000000021c .LASF9
     /tmp/ccYTzKdO.s:1761   .debug_str:00000000000000cd .LASF10
     /tmp/ccYTzKdO.s:1785   .debug_str:00000000000001a1 .LASF11
     /tmp/ccYTzKdO.s:1767   .debug_str:0000000000000102 .LASF12
     /tmp/ccYTzKdO.s:1759   .debug_str:00000000000000bd .LASF13
     /tmp/ccYTzKdO.s:1933   .debug_str:000000000000060b .LASF14
     /tmp/ccYTzKdO.s:1781   .debug_str:0000000000000169 .LASF15
     /tmp/ccYTzKdO.s:1925   .debug_str:00000000000005cd .LASF16
     /tmp/ccYTzKdO.s:1937   .debug_str:000000000000062c .LASF128
     /tmp/ccYTzKdO.s:1915   .debug_str:0000000000000594 .LASF17
     /tmp/ccYTzKdO.s:1741   .debug_str:000000000000004f .LASF19
     /tmp/ccYTzKdO.s:1939   .debug_str:0000000000000634 .LASF116
     /tmp/ccYTzKdO.s:1855   .debug_str:00000000000003b9 .LASF118
     /tmp/ccYTzKdO.s:1751   .debug_str:000000000000008d .LASF18
     /tmp/ccYTzKdO.s:1961   .debug_str:00000000000006bd .LASF20
     /tmp/ccYTzKdO.s:1931   .debug_str:00000000000005fe .LASF21
     /tmp/ccYTzKdO.s:1967   .debug_str:00000000000006eb .LASF22
     /tmp/ccYTzKdO.s:1877   .debug_str:0000000000000476 .LASF129
     /tmp/ccYTzKdO.s:1837   .debug_str:000000000000031f .LASF38
     /tmp/ccYTzKdO.s:1949   .debug_str:0000000000000669 .LASF40
     /tmp/ccYTzKdO.s:1943   .debug_str:0000000000000644 .LASF130
     /tmp/ccYTzKdO.s:1947   .debug_str:0000000000000655 .LASF131
     /tmp/ccYTzKdO.s:1735   .debug_str:0000000000000011 .LASF23
     /tmp/ccYTzKdO.s:1995   .debug_str:0000000000000814 .LASF24
     /tmp/ccYTzKdO.s:1955   .debug_str:000000000000068f .LASF25
     /tmp/ccYTzKdO.s:1923   .debug_str:00000000000005c4 .LASF26
     /tmp/ccYTzKdO.s:1755   .debug_str:000000000000009e .LASF27
     /tmp/ccYTzKdO.s:1839   .debug_str:0000000000000325 .LASF29
     /tmp/ccYTzKdO.s:1769   .debug_str:0000000000000112 .LASF31
     /tmp/ccYTzKdO.s:1739   .debug_str:0000000000000027 .LASF33
GAS LISTING /tmp/ccYTzKdO.s 			page 11


     /tmp/ccYTzKdO.s:1775   .debug_str:0000000000000149 .LASF28
     /tmp/ccYTzKdO.s:1765   .debug_str:00000000000000ef .LASF30
     /tmp/ccYTzKdO.s:1941   .debug_str:000000000000063f .LASF32
     /tmp/ccYTzKdO.s:1787   .debug_str:00000000000001b0 .LASF34
     /tmp/ccYTzKdO.s:1911   .debug_str:0000000000000582 .LASF132
     /tmp/ccYTzKdO.s:1843   .debug_str:0000000000000346 .LASF35
     /tmp/ccYTzKdO.s:1945   .debug_str:000000000000064c .LASF36
     /tmp/ccYTzKdO.s:1971   .debug_str:0000000000000715 .LASF37
     /tmp/ccYTzKdO.s:1799   .debug_str:000000000000022a .LASF39
     /tmp/ccYTzKdO.s:1803   .debug_str:0000000000000247 .LASF41
     /tmp/ccYTzKdO.s:1963   .debug_str:00000000000006d4 .LASF43
     /tmp/ccYTzKdO.s:1957   .debug_str:0000000000000697 .LASF45
     /tmp/ccYTzKdO.s:1901   .debug_str:0000000000000537 .LASF42
     /tmp/ccYTzKdO.s:1871   .debug_str:000000000000043b .LASF48
     /tmp/ccYTzKdO.s:1891   .debug_str:00000000000004e8 .LASF44
     /tmp/ccYTzKdO.s:1893   .debug_str:00000000000004ef .LASF46
     /tmp/ccYTzKdO.s:1859   .debug_str:00000000000003d8 .LASF47
     /tmp/ccYTzKdO.s:1831   .debug_str:00000000000002eb .LASF49
     /tmp/ccYTzKdO.s:1989   .debug_str:00000000000007ef .LASF50
     /tmp/ccYTzKdO.s:1929   .debug_str:00000000000005ea .LASF51
     /tmp/ccYTzKdO.s:1857   .debug_str:00000000000003d0 .LASF52
     /tmp/ccYTzKdO.s:1869   .debug_str:0000000000000427 .LASF53
     /tmp/ccYTzKdO.s:1841   .debug_str:000000000000033e .LASF54
     /tmp/ccYTzKdO.s:1895   .debug_str:0000000000000502 .LASF55
     /tmp/ccYTzKdO.s:2001   .debug_str:000000000000083e .LASF56
     /tmp/ccYTzKdO.s:1809   .debug_str:0000000000000272 .LASF57
     /tmp/ccYTzKdO.s:1927   .debug_str:00000000000005e3 .LASF58
     /tmp/ccYTzKdO.s:1917   .debug_str:0000000000000599 .LASF59
     /tmp/ccYTzKdO.s:1919   .debug_str:00000000000005ac .LASF60
     /tmp/ccYTzKdO.s:1763   .debug_str:00000000000000dc .LASF61
     /tmp/ccYTzKdO.s:1779   .debug_str:0000000000000163 .LASF62
     /tmp/ccYTzKdO.s:1801   .debug_str:0000000000000235 .LASF63
     /tmp/ccYTzKdO.s:1807   .debug_str:000000000000026c .LASF64
     /tmp/ccYTzKdO.s:1773   .debug_str:0000000000000137 .LASF65
     /tmp/ccYTzKdO.s:1745   .debug_str:0000000000000062 .LASF66
     /tmp/ccYTzKdO.s:1909   .debug_str:000000000000056a .LASF67
     /tmp/ccYTzKdO.s:1903   .debug_str:0000000000000540 .LASF68
     /tmp/ccYTzKdO.s:1997   .debug_str:000000000000081a .LASF69
     /tmp/ccYTzKdO.s:1973   .debug_str:000000000000071b .LASF70
     /tmp/ccYTzKdO.s:1993   .debug_str:00000000000007fe .LASF71
     /tmp/ccYTzKdO.s:1969   .debug_str:000000000000070b .LASF72
     /tmp/ccYTzKdO.s:1849   .debug_str:000000000000036e .LASF73
     /tmp/ccYTzKdO.s:1983   .debug_str:00000000000007d6 .LASF74
     /tmp/ccYTzKdO.s:1795   .debug_str:0000000000000200 .LASF75
     /tmp/ccYTzKdO.s:1921   .debug_str:00000000000005b3 .LASF76
     /tmp/ccYTzKdO.s:1881   .debug_str:000000000000048c .LASF77
     /tmp/ccYTzKdO.s:1865   .debug_str:000000000000040d .LASF78
     /tmp/ccYTzKdO.s:1879   .debug_str:000000000000047b .LASF79
     /tmp/ccYTzKdO.s:1815   .debug_str:00000000000002a9 .LASF80
     /tmp/ccYTzKdO.s:1757   .debug_str:00000000000000ac .LASF81
     /tmp/ccYTzKdO.s:1977   .debug_str:00000000000007c7 .LASF82
     /tmp/ccYTzKdO.s:1813   .debug_str:0000000000000298 .LASF83
     /tmp/ccYTzKdO.s:1817   .debug_str:00000000000002ae .LASF84
     /tmp/ccYTzKdO.s:1885   .debug_str:00000000000004af .LASF85
     /tmp/ccYTzKdO.s:1979   .debug_str:00000000000007cc .LASF86
     /tmp/ccYTzKdO.s:1737   .debug_str:0000000000000016 .LASF87
     /tmp/ccYTzKdO.s:1819   .debug_str:00000000000002b3 .LASF88
GAS LISTING /tmp/ccYTzKdO.s 			page 12


     /tmp/ccYTzKdO.s:1827   .debug_str:00000000000002c7 .LASF89
     /tmp/ccYTzKdO.s:1981   .debug_str:00000000000007d1 .LASF90
     /tmp/ccYTzKdO.s:2003   .debug_str:0000000000000846 .LASF91
     /tmp/ccYTzKdO.s:1821   .debug_str:00000000000002b8 .LASF92
     /tmp/ccYTzKdO.s:1777   .debug_str:0000000000000152 .LASF93
     /tmp/ccYTzKdO.s:1873   .debug_str:0000000000000450 .LASF94
     /tmp/ccYTzKdO.s:1951   .debug_str:0000000000000679 .LASF95
     /tmp/ccYTzKdO.s:1823   .debug_str:00000000000002bd .LASF96
     /tmp/ccYTzKdO.s:1733   .debug_str:0000000000000000 .LASF97
     /tmp/ccYTzKdO.s:1985   .debug_str:00000000000007e5 .LASF98
     /tmp/ccYTzKdO.s:1899   .debug_str:0000000000000526 .LASF99
     /tmp/ccYTzKdO.s:1825   .debug_str:00000000000002c2 .LASF100
     /tmp/ccYTzKdO.s:1959   .debug_str:00000000000006ac .LASF101
     /tmp/ccYTzKdO.s:1987   .debug_str:00000000000007ea .LASF102
     /tmp/ccYTzKdO.s:1845   .debug_str:000000000000034b .LASF103
     /tmp/ccYTzKdO.s:1753   .debug_str:0000000000000099 .LASF104
     /tmp/ccYTzKdO.s:1907   .debug_str:0000000000000559 .LASF105
     /tmp/ccYTzKdO.s:1883   .debug_str:00000000000004aa .LASF106
     /tmp/ccYTzKdO.s:1793   .debug_str:00000000000001ef .LASF107
     /tmp/ccYTzKdO.s:1953   .debug_str:000000000000068a .LASF108
     /tmp/ccYTzKdO.s:1851   .debug_str:0000000000000384 .LASF109
     /tmp/ccYTzKdO.s:1889   .debug_str:00000000000004d3 .LASF110
     /tmp/ccYTzKdO.s:1783   .debug_str:000000000000017f .LASF111
     /tmp/ccYTzKdO.s:1935   .debug_str:0000000000000617 .LASF112
     /tmp/ccYTzKdO.s:1861   .debug_str:00000000000003df .LASF113
     /tmp/ccYTzKdO.s:1771   .debug_str:0000000000000120 .LASF114
     /tmp/ccYTzKdO.s:1853   .debug_str:0000000000000395 .LASF115
     /tmp/ccYTzKdO.s:1863   .debug_str:0000000000000401 .LASF117
     /tmp/ccYTzKdO.s:1867   .debug_str:0000000000000412 .LASF119
     /tmp/ccYTzKdO.s:132    .text:000000000000006c .LFB54
     /tmp/ccYTzKdO.s:167    .text:0000000000000090 .LFE54
     /tmp/ccYTzKdO.s:1991   .debug_str:00000000000007f7 .LASF122
     /tmp/ccYTzKdO.s:1897   .debug_str:0000000000000516 .LASF120
     /tmp/ccYTzKdO.s:1747   .debug_str:000000000000006d .LASF121
     /tmp/ccYTzKdO.s:86     .text:0000000000000048 .LFB53
     /tmp/ccYTzKdO.s:126    .text:000000000000006c .LFE53
     /tmp/ccYTzKdO.s:97     .text:0000000000000054 .LBB4
     /tmp/ccYTzKdO.s:110    .text:000000000000005c .LBE4
     /tmp/ccYTzKdO.s:1685   .debug_loc:0000000000000000 .LLST2
     /tmp/ccYTzKdO.s:1965   .debug_str:00000000000006dd .LASF133
     /tmp/ccYTzKdO.s:1875   .debug_str:0000000000000455 .LASF134
     /tmp/ccYTzKdO.s:10     .text:0000000000000000 .LFB52
     /tmp/ccYTzKdO.s:80     .text:0000000000000048 .LFE52
     /tmp/ccYTzKdO.s:1693   .debug_loc:0000000000000024 .LLST0
     /tmp/ccYTzKdO.s:1833   .debug_str:00000000000002fe .LASF123
     /tmp/ccYTzKdO.s:1999   .debug_str:0000000000000832 .LASF124
     /tmp/ccYTzKdO.s:1707   .debug_loc:000000000000005d .LLST1
     /tmp/ccYTzKdO.s:1749   .debug_str:0000000000000082 .LASF135
     /tmp/ccYTzKdO.s:96     .text:0000000000000054 .LVL5
     /tmp/ccYTzKdO.s:107    .text:000000000000005c .LVL6
     /tmp/ccYTzKdO.s:14     .text:0000000000000000 .LVL0
     /tmp/ccYTzKdO.s:53     .text:0000000000000024 .LVL1
     /tmp/ccYTzKdO.s:62     .text:0000000000000034 .LVL2
     /tmp/ccYTzKdO.s:72     .text:0000000000000040 .LVL3
     /tmp/ccYTzKdO.s:77     .text:0000000000000044 .LVL4
     /tmp/ccYTzKdO.s:174    .debug_info:0000000000000000 .Ldebug_info0

GAS LISTING /tmp/ccYTzKdO.s 			page 13


NO UNDEFINED SYMBOLS
