GAS LISTING /tmp/ccDT4Ris.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB52:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../h/syscall_c.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  12              		.loc 1 12 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 38 is_stmt 0
  22              	#APP
  23              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 29 is_stmt 0
  28              	# 14 "src/riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE52:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
GAS LISTING /tmp/ccDT4Ris.s 			page 2


  46              	.LFB53:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** using Body = void (*)(void*);
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  20:src/riscv.cpp **** {
  47              		.loc 1 20 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040105 		addi	s0,sp,80
  58              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp ****     uint64 scause = r_scause();
  59              		.loc 1 21 5
  60              	.LBB20:
  61              	.LBB21:
  62              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccDT4Ris.s 			page 3


  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     //stvec Vector "table"
  83:src/../h/riscv.hpp ****     static void stvecVectorTable();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     //read a0 register
  86:src/../h/riscv.hpp ****     static uint64 r_a0();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     //write to a0 register
  89:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a1 register
GAS LISTING /tmp/ccDT4Ris.s 			page 4


  92:src/../h/riscv.hpp ****     static uint64 r_a1();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //write to a1 register
  95:src/../h/riscv.hpp ****     static void w_a1(uint64 writeValue);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //read a2 register
  98:src/../h/riscv.hpp ****     static uint64 r_a2();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //write to a2 register
 101:src/../h/riscv.hpp ****     static void w_a2(uint64 writeValue);
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp ****     //read a3 register
 104:src/../h/riscv.hpp ****     static uint64 r_a3();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     //write to a3 register
 107:src/../h/riscv.hpp ****     static void w_a3(uint64 writeValue);
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp ****     //read a4 register
 110:src/../h/riscv.hpp ****     static uint64 r_a4();
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     //write to a4 register
 113:src/../h/riscv.hpp ****     static void w_a4(uint64 writeValue);
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp ****     //read a5 register
 116:src/../h/riscv.hpp ****     static uint64 r_a5();
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp ****     //write to a5 register
 119:src/../h/riscv.hpp ****     static void w_a5(uint64 writeValue);
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp ****     //read a6 register
 122:src/../h/riscv.hpp ****     static uint64 r_a6();
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp ****     //write to a6 register
 125:src/../h/riscv.hpp ****     static void w_a6(uint64 writeValue);
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp ****     //read a7 register
 128:src/../h/riscv.hpp ****     static uint64 r_a7();
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp ****     //write to a7 register
 131:src/../h/riscv.hpp ****     static void w_a7(uint64 writeValue);
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** private:
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp ****     // supervisor trap handler
 137:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
 142:src/../h/riscv.hpp **** };
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     uint64 volatile scause;
  63              		.loc 2 147 5
GAS LISTING /tmp/ccDT4Ris.s 			page 5


 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  64              		.loc 2 148 5
  65              		.loc 2 148 72 is_stmt 0
  66              	#APP
  67              	# 148 "src/../h/riscv.hpp" 1
 149              	    return scause;
  68              		csrr a5, scause
  69              	# 0 "" 2
  70              	#NO_APP
  71 0038 2330F4FC 		sd	a5,-64(s0)
  72              		.loc 2 149 5 is_stmt 1
  73              		.loc 2 149 12 is_stmt 0
  74 003c 833704FC 		ld	a5,-64(s0)
  75              	.LVL0:
  76              	.LBE21:
  77              	.LBE20:
  22:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  78              		.loc 1 22 5 is_stmt 1
  79              	.LBB22:
  80              		.loc 1 22 40 is_stmt 0
  81 0040 938787FF 		addi	a5,a5,-8
  82              	.LVL1:
  83              		.loc 1 22 5
  84 0044 13071000 		li	a4,1
  85 0048 637CF700 		bleu	a5,a4,.L10
  86              	.LVL2:
  87              	.L3:
  88              	.LBE22:
  23:src/riscv.cpp ****     {
  24:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****         uint64 codeOperation = Riscv::r_a0();
  29:src/riscv.cpp ****         switch (codeOperation) {
  30:src/riscv.cpp ****             case 0x01:
  31:src/riscv.cpp ****                 //mem_alloc
  32:src/riscv.cpp ****                 break;
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****             case 0x02:
  35:src/riscv.cpp ****                 //mem_free -> a1: ono sta se brise prima
  36:src/riscv.cpp ****                 //Vraca 0 u slucaju uspeha, negativno u slucaju greske
  37:src/riscv.cpp ****                 break;
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****             case 0x11:
  40:src/riscv.cpp ****                 //thread_create
  41:src/riscv.cpp ****                 //a1: handle - rucka niti - TCB TIP
  42:src/riscv.cpp ****                 //a2: start_routine - ono sto ce nit izvrsavati - Body TIP VEROVATNO?
  43:src/riscv.cpp ****                 //a3: arg - argument za start_routine
  44:src/riscv.cpp ****                 //Uspeh: u handle upisuje rucku i vraca 0, suprotno negativno
  45:src/riscv.cpp **** 
  46:src/riscv.cpp ****                 TCB** tcb;
  47:src/riscv.cpp ****                 Body body;
  48:src/riscv.cpp ****                 void* arg;
  49:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (tcb));
  50:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  51:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
GAS LISTING /tmp/ccDT4Ris.s 			page 6


  52:src/riscv.cpp ****                 *tcb = TCB::createThread(body, arg);
  53:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
  54:src/riscv.cpp ****                 if(*tcb == nullptr) {
  55:src/riscv.cpp ****                     //__asm__ volatile ("li a0, 0");
  56:src/riscv.cpp ****                     __asm__ volatile ("li t0, 0");
  57:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
  58:src/riscv.cpp ****                 }
  59:src/riscv.cpp ****                 else {
  60:src/riscv.cpp ****                     //__asm__ volatile ("li a0, -1");
  61:src/riscv.cpp ****                     __asm__ volatile ("li t0, -1");
  62:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
  63:src/riscv.cpp ****                 }
  64:src/riscv.cpp ****                 break;
  65:src/riscv.cpp **** 
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             case 0x12:
  68:src/riscv.cpp ****                 //thread_exit()
  69:src/riscv.cpp ****                 //Gasi tekucu nit samo, znaci treba i dispatch da se uradi
  70:src/riscv.cpp ****                 //0 ili -1 return
  71:src/riscv.cpp ****                 break;
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****             case 0x13:      //thread_dispatch()
  74:src/riscv.cpp ****                 //Poziva se thread dispatch
  75:src/riscv.cpp ****                 TCB::dispatch();
  76:src/riscv.cpp ****                 break;
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****             case 0x14:
  79:src/riscv.cpp ****                 thread_t handle;
  80:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  81:src/riscv.cpp ****                 TCB::join(handle);
  82:src/riscv.cpp ****                 break;
  83:src/riscv.cpp **** 
  84:src/riscv.cpp ****             case 0x21:
  85:src/riscv.cpp ****                 //sem_open
  86:src/riscv.cpp ****                 //check document
  87:src/riscv.cpp ****                 break;
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****             case 0x22:
  90:src/riscv.cpp ****                 //sem_close
  91:src/riscv.cpp ****                 //check document
  92:src/riscv.cpp ****                 break;
  93:src/riscv.cpp **** 
  94:src/riscv.cpp ****             case 0x23:
  95:src/riscv.cpp ****                 //sem_wait
  96:src/riscv.cpp ****                 //check document
  97:src/riscv.cpp ****                 break;
  98:src/riscv.cpp ****             case 0x24:
  99:src/riscv.cpp ****                 //sem_signal
 100:src/riscv.cpp ****                 break;
 101:src/riscv.cpp **** 
 102:src/riscv.cpp ****             case 0x31:
 103:src/riscv.cpp ****                 //time_sleep
 104:src/riscv.cpp ****                 break;
 105:src/riscv.cpp **** 
 106:src/riscv.cpp ****             case 0x41:
 107:src/riscv.cpp ****                 //getc
 108:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccDT4Ris.s 			page 7


 109:src/riscv.cpp **** 
 110:src/riscv.cpp ****             case 0x42:
 111:src/riscv.cpp ****                 //putc
 112:src/riscv.cpp ****                 break;
 113:src/riscv.cpp ****             //Da li treba 0x41 i 0x42 ako se ne radi asinhrono? izgleda ne
 114:src/riscv.cpp ****         }
 115:src/riscv.cpp **** 
 116:src/riscv.cpp ****         w_sstatus(sstatus);
 117:src/riscv.cpp ****         w_sepc(sepc);
 118:src/riscv.cpp ****     }
 119:src/riscv.cpp ****     else
 120:src/riscv.cpp ****     {
 121:src/riscv.cpp ****         // unexpected trap cause
 122:src/riscv.cpp ****         // Ovde se ulazi ako se desi neki interrupt tabele
 123:src/riscv.cpp ****     }
 124:src/riscv.cpp **** }
  89              		.loc 1 124 1
  90 004c 83308104 		ld	ra,72(sp)
  91              		.cfi_remember_state
  92              		.cfi_restore 1
  93 0050 03340104 		ld	s0,64(sp)
  94              		.cfi_restore 8
  95              		.cfi_def_cfa 2, 80
  96 0054 83348103 		ld	s1,56(sp)
  97              		.cfi_restore 9
  98 0058 13010105 		addi	sp,sp,80
  99              		.cfi_def_cfa_offset 0
 100 005c 67800000 		jr	ra
 101              	.LVL3:
 102              	.L10:
 103              		.cfi_restore_state
 104              	.LBB38:
 105              	.LBB23:
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 106              		.loc 1 25 9 is_stmt 1
 107              	.LBB24:
 108              	.LBB25:
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sepc;
 109              		.loc 2 159 5
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 110              		.loc 2 160 5
 111              		.loc 2 160 64 is_stmt 0
 112              	#APP
 113              	# 160 "src/../h/riscv.hpp" 1
 161              	    return sepc;
 114              		csrr a5, sepc
 115              	# 0 "" 2
 116              	.LVL4:
GAS LISTING /tmp/ccDT4Ris.s 			page 8


 117              	#NO_APP
 118 0064 233CF4FC 		sd	a5,-40(s0)
 119              		.loc 2 161 5 is_stmt 1
 120              		.loc 2 161 12 is_stmt 0
 121 0068 833784FD 		ld	a5,-40(s0)
 122              	.LBE25:
 123              	.LBE24:
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 124              		.loc 1 25 41
 125 006c 93874700 		addi	a5,a5,4
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 126              		.loc 1 25 43
 127 0070 2338F4FA 		sd	a5,-80(s0)
  26:src/riscv.cpp **** 
 128              		.loc 1 26 9 is_stmt 1
 129              	.LBB26:
 130              	.LBB27:
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile stvec;
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 173:src/../h/riscv.hpp ****     return stvec;
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile stval;
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 185:src/../h/riscv.hpp ****     return stval;
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 191:src/../h/riscv.hpp **** }
 192:src/../h/riscv.hpp **** 
 193:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 194:src/../h/riscv.hpp **** {
 195:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 196:src/../h/riscv.hpp **** }
 197:src/../h/riscv.hpp **** 
 198:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 199:src/../h/riscv.hpp **** {
 200:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 201:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccDT4Ris.s 			page 9


 202:src/../h/riscv.hpp **** 
 203:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 204:src/../h/riscv.hpp **** {
 205:src/../h/riscv.hpp ****     uint64 volatile sip;
 206:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 207:src/../h/riscv.hpp ****     return sip;
 208:src/../h/riscv.hpp **** }
 209:src/../h/riscv.hpp **** 
 210:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 211:src/../h/riscv.hpp **** {
 212:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 213:src/../h/riscv.hpp **** }
 214:src/../h/riscv.hpp **** 
 215:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 216:src/../h/riscv.hpp **** {
 217:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 218:src/../h/riscv.hpp **** }
 219:src/../h/riscv.hpp **** 
 220:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 221:src/../h/riscv.hpp **** {
 222:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 223:src/../h/riscv.hpp **** }
 224:src/../h/riscv.hpp **** 
 225:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 226:src/../h/riscv.hpp **** {
 227:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 131              		.loc 2 227 5
 228:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 132              		.loc 2 228 5
 133              		.loc 2 228 76 is_stmt 0
 134              	#APP
 135              	# 228 "src/../h/riscv.hpp" 1
 229              	    return sstatus;
 136              		csrr a5, sstatus
 137              	# 0 "" 2
 138              	#NO_APP
 139 0078 2338F4FC 		sd	a5,-48(s0)
 140              		.loc 2 229 5 is_stmt 1
 141              		.loc 2 229 12 is_stmt 0
 142 007c 833704FD 		ld	a5,-48(s0)
 143              	.LBE27:
 144              	.LBE26:
  26:src/riscv.cpp **** 
 145              		.loc 1 26 45
 146 0080 233CF4FA 		sd	a5,-72(s0)
  28:src/riscv.cpp ****         switch (codeOperation) {
 147              		.loc 1 28 9 is_stmt 1
 148              	.LBB28:
 149              	.LBB29:
 230:src/../h/riscv.hpp **** }
 231:src/../h/riscv.hpp **** 
 232:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 233:src/../h/riscv.hpp **** {
 234:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 235:src/../h/riscv.hpp **** }
 236:src/../h/riscv.hpp **** 
 237:src/../h/riscv.hpp **** //a0
GAS LISTING /tmp/ccDT4Ris.s 			page 10


 238:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 239:src/../h/riscv.hpp **** {
 240:src/../h/riscv.hpp ****     uint64 volatile a0;
 150              		.loc 2 240 5
 241:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
 151              		.loc 2 241 5
 152              		.loc 2 241 46 is_stmt 0
 153              	#APP
 154              	# 241 "src/../h/riscv.hpp" 1
 242              	    return a0;
 155              		mv a5, a0
 156              	# 0 "" 2
 157              	#NO_APP
 158 0088 2334F4FC 		sd	a5,-56(s0)
 159              		.loc 2 242 5 is_stmt 1
 160              		.loc 2 242 12 is_stmt 0
 161 008c 833784FC 		ld	a5,-56(s0)
 162              	.LVL5:
 163              	.LBE29:
 164              	.LBE28:
  29:src/riscv.cpp ****             case 0x01:
 165              		.loc 1 29 9 is_stmt 1
 166              	.LBB30:
 167 0090 13073001 		li	a4,19
 168 0094 638EE704 		beq	a5,a4,.L5
 169 0098 13074001 		li	a4,20
 170 009c 6380E706 		beq	a5,a4,.L6
 171 00a0 13071001 		li	a4,17
 172 00a4 638CE700 		beq	a5,a4,.L11
 173              	.LVL6:
 174              	.L7:
 175              	.LBE30:
 116:src/riscv.cpp ****         w_sepc(sepc);
 176              		.loc 1 116 9
 116:src/riscv.cpp ****         w_sepc(sepc);
 177              		.loc 1 116 18 is_stmt 0
 178 00a8 833784FB 		ld	a5,-72(s0)
 179              	.LVL7:
 180              	.LBB32:
 181              	.LBB33:
 234:src/../h/riscv.hpp **** }
 182              		.loc 2 234 5 is_stmt 1
 234:src/../h/riscv.hpp **** }
 183              		.loc 2 234 77 is_stmt 0
 184              	#APP
 185              	# 234 "src/../h/riscv.hpp" 1
 186              		csrw sstatus, a5
 187              	# 0 "" 2
 188              	.LVL8:
 189              	#NO_APP
 190              	.LBE33:
 191              	.LBE32:
 117:src/riscv.cpp ****     }
 192              		.loc 1 117 9 is_stmt 1
 117:src/riscv.cpp ****     }
 193              		.loc 1 117 15 is_stmt 0
 194 00b0 833704FB 		ld	a5,-80(s0)
GAS LISTING /tmp/ccDT4Ris.s 			page 11


 195              	.LVL9:
 196              	.LBB34:
 197              	.LBB35:
 166:src/../h/riscv.hpp **** }
 198              		.loc 2 166 5 is_stmt 1
 166:src/../h/riscv.hpp **** }
 199              		.loc 2 166 65 is_stmt 0
 200              	#APP
 201              	# 166 "src/../h/riscv.hpp" 1
 202              		csrw sepc, a5
 203              	# 0 "" 2
 204              	.LVL10:
 205              	#NO_APP
 206              	.LBE35:
 207              	.LBE34:
 208              	.LBE23:
 209              	.LBE38:
 210              		.loc 1 124 1
 211 00b8 6FF05FF9 		j	.L3
 212              	.LVL11:
 213              	.L11:
 214              	.LBB39:
 215              	.LBB37:
 216              	.LBB36:
 217              	.LBB31:
  39:src/riscv.cpp ****                 //thread_create
 218              		.loc 1 39 13 is_stmt 1
  46:src/riscv.cpp ****                 Body body;
 219              		.loc 1 46 17
  47:src/riscv.cpp ****                 void* arg;
 220              		.loc 1 47 17
  48:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (tcb));
 221              		.loc 1 48 17
  49:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 222              		.loc 1 49 17
  49:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 223              		.loc 1 49 60 is_stmt 0
 224              	#APP
 225              	# 49 "src/riscv.cpp" 1
 226              		mv s1, a1
 227              	# 0 "" 2
 228              	.LVL12:
  50:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 229              		.loc 1 50 17 is_stmt 1
  50:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 230              		.loc 1 50 61 is_stmt 0
 231              	# 50 "src/riscv.cpp" 1
 232              		mv a0, a2
 233              	# 0 "" 2
 234              	.LVL13:
  51:src/riscv.cpp ****                 *tcb = TCB::createThread(body, arg);
 235              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 *tcb = TCB::createThread(body, arg);
 236              		.loc 1 51 60 is_stmt 0
 237              	# 51 "src/riscv.cpp" 1
 238              		mv a1, a3
 239              	# 0 "" 2
GAS LISTING /tmp/ccDT4Ris.s 			page 12


 240              	.LVL14:
  52:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
 241              		.loc 1 52 17 is_stmt 1
  52:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
 242              		.loc 1 52 41 is_stmt 0
 243              	#NO_APP
 244 00c8 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 244      E7800000 
 245              	.LVL15:
  52:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
 246              		.loc 1 52 22
 247 00d0 23B0A400 		sd	a0,0(s1)
  54:src/riscv.cpp ****                     //__asm__ volatile ("li a0, 0");
 248              		.loc 1 54 17 is_stmt 1
 249 00d4 63080500 		beqz	a0,.L12
  61:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 250              		.loc 1 61 21
  61:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 251              		.loc 1 61 51 is_stmt 0
 252              	#APP
 253              	# 61 "src/riscv.cpp" 1
  62:src/riscv.cpp ****                 }
 254              		li t0, -1
 255              	# 0 "" 2
 256              		.loc 1 62 21 is_stmt 1
  62:src/riscv.cpp ****                 }
 257              		.loc 1 62 55 is_stmt 0
 258              	# 62 "src/riscv.cpp" 1
 259              		sw t0, 80(x8)
 260              	# 0 "" 2
 261              	#NO_APP
 262 00e0 6FF09FFC 		j	.L7
 263              	.L12:
  56:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 264              		.loc 1 56 21 is_stmt 1
  56:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 265              		.loc 1 56 50 is_stmt 0
 266              	#APP
 267              	# 56 "src/riscv.cpp" 1
  57:src/riscv.cpp ****                 }
 268              		li t0, 0
 269              	# 0 "" 2
 270              		.loc 1 57 21 is_stmt 1
  57:src/riscv.cpp ****                 }
 271              		.loc 1 57 55 is_stmt 0
 272              	# 57 "src/riscv.cpp" 1
 273              		sw t0, 80(x8)
 274              	# 0 "" 2
 275              	#NO_APP
 276 00ec 6FF0DFFB 		j	.L7
 277              	.LVL16:
 278              	.L5:
  73:src/riscv.cpp ****                 //Poziva se thread dispatch
 279              		.loc 1 73 13 is_stmt 1
  75:src/riscv.cpp ****                 break;
 280              		.loc 1 75 17
  75:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccDT4Ris.s 			page 13


 281              		.loc 1 75 30 is_stmt 0
 282 00f0 97000000 		call	_ZN3TCB8dispatchEv@plt
 282      E7800000 
 283              	.LVL17:
  76:src/riscv.cpp **** 
 284              		.loc 1 76 17 is_stmt 1
 285 00f8 6FF01FFB 		j	.L7
 286              	.LVL18:
 287              	.L6:
  78:src/riscv.cpp ****                 thread_t handle;
 288              		.loc 1 78 13
  79:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 289              		.loc 1 79 17
  80:src/riscv.cpp ****                 TCB::join(handle);
 290              		.loc 1 80 17
  80:src/riscv.cpp ****                 TCB::join(handle);
 291              		.loc 1 80 63 is_stmt 0
 292              	#APP
 293              	# 80 "src/riscv.cpp" 1
 294              		mv a0, a1
 295              	# 0 "" 2
 296              	.LVL19:
  81:src/riscv.cpp ****                 break;
 297              		.loc 1 81 17 is_stmt 1
  81:src/riscv.cpp ****                 break;
 298              		.loc 1 81 26 is_stmt 0
 299              	#NO_APP
 300 0100 97000000 		call	_ZN3TCB4joinEPS_@plt
 300      E7800000 
 301              	.LVL20:
  82:src/riscv.cpp **** 
 302              		.loc 1 82 17 is_stmt 1
 303 0108 6FF01FFA 		j	.L7
 304              	.LBE31:
 305              	.LBE36:
 306              	.LBE37:
 307              	.LBE39:
 308              		.cfi_endproc
 309              	.LFE53:
 311              		.align	2
 312              		.globl	_ZN5Riscv22handleConsoleInterruptEv
 314              	_ZN5Riscv22handleConsoleInterruptEv:
 315              	.LFB54:
 125:src/riscv.cpp **** 
 126:src/riscv.cpp **** void Riscv::handleConsoleInterrupt() {
 316              		.loc 1 126 38
 317              		.cfi_startproc
 318 010c 130101FF 		addi	sp,sp,-16
 319              		.cfi_def_cfa_offset 16
 320 0110 23341100 		sd	ra,8(sp)
 321 0114 23308100 		sd	s0,0(sp)
 322              		.cfi_offset 1, -8
 323              		.cfi_offset 8, -16
 324 0118 13040101 		addi	s0,sp,16
 325              		.cfi_def_cfa 8, 0
 127:src/riscv.cpp ****     console_handler();
 326              		.loc 1 127 5
GAS LISTING /tmp/ccDT4Ris.s 			page 14


 327              		.loc 1 127 20 is_stmt 0
 328 011c 97000000 		call	console_handler@plt
 328      E7800000 
 329              	.LVL21:
 128:src/riscv.cpp **** }
 330              		.loc 1 128 1
 331 0124 83308100 		ld	ra,8(sp)
 332              		.cfi_restore 1
 333 0128 03340100 		ld	s0,0(sp)
 334              		.cfi_restore 8
 335              		.cfi_def_cfa 2, 16
 336 012c 13010101 		addi	sp,sp,16
 337              		.cfi_def_cfa_offset 0
 338 0130 67800000 		jr	ra
 339              		.cfi_endproc
 340              	.LFE54:
 342              		.align	2
 343              		.globl	_ZN5Riscv20handleTimerInterruptEv
 345              	_ZN5Riscv20handleTimerInterruptEv:
 346              	.LFB55:
 129:src/riscv.cpp **** 
 130:src/riscv.cpp **** void Riscv::handleTimerInterrupt() {
 347              		.loc 1 130 36 is_stmt 1
 348              		.cfi_startproc
 349 0134 130101FF 		addi	sp,sp,-16
 350              		.cfi_def_cfa_offset 16
 351 0138 23348100 		sd	s0,8(sp)
 352              		.cfi_offset 8, -8
 353 013c 13040101 		addi	s0,sp,16
 354              		.cfi_def_cfa 8, 0
 131:src/riscv.cpp ****     mc_sip(SIP_SSIP); // MORA DA SE OBRISE PENDING BIT - ZATO NIJE RADILO!
 355              		.loc 1 131 5
 356              	.LVL22:
 357              	.LBB40:
 358              	.LBB41:
 200:src/../h/riscv.hpp **** }
 359              		.loc 2 200 5
 200:src/../h/riscv.hpp **** }
 360              		.loc 2 200 64 is_stmt 0
 361 0140 93072000 		li	a5,2
 362              	#APP
 363              	# 200 "src/../h/riscv.hpp" 1
 364              		csrc sip, a5
 365              	# 0 "" 2
 366              	.LVL23:
 367              	#NO_APP
 368              	.LBE41:
 369              	.LBE40:
 132:src/riscv.cpp ****     /*uint64 volatile sepc = r_sepc();
 133:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 134:src/riscv.cpp ****     TCB::dispatch();
 135:src/riscv.cpp ****     w_sstatus(sstatus);
 136:src/riscv.cpp ****     w_sepc(sepc);*/
 137:src/riscv.cpp **** }...
 370              		.loc 1 137 1
 371 0148 03348100 		ld	s0,8(sp)
 372              		.cfi_restore 8
GAS LISTING /tmp/ccDT4Ris.s 			page 15


 373              		.cfi_def_cfa 2, 16
 374 014c 13010101 		addi	sp,sp,16
 375              		.cfi_def_cfa_offset 0
 376 0150 67800000 		jr	ra
 377              		.cfi_endproc
 378              	.LFE55:
 380              	.Letext0:
 381              		.file 3 "src/../h/../lib/hw.h"
 382              		.file 4 "src/../h/tcb.hpp"
 383              		.file 5 "src/../h/syscall_c.hpp"
 384              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/ccDT4Ris.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccDT4Ris.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccDT4Ris.s:13     .text:0000000000000000 .L0 
     /tmp/ccDT4Ris.s:14     .text:0000000000000000 .L0 
     /tmp/ccDT4Ris.s:15     .text:0000000000000004 .L0 
     /tmp/ccDT4Ris.s:17     .text:0000000000000008 .L0 
     /tmp/ccDT4Ris.s:19     .text:000000000000000c .L0 
     /tmp/ccDT4Ris.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccDT4Ris.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccDT4Ris.s:33     .text:0000000000000014 .L0 
     /tmp/ccDT4Ris.s:34     .text:0000000000000018 .L0 
     /tmp/ccDT4Ris.s:35     .text:0000000000000018 .L0 
     /tmp/ccDT4Ris.s:37     .text:000000000000001c .L0 
     /tmp/ccDT4Ris.s:39     .text:0000000000000020 .L0 
     /tmp/ccDT4Ris.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccDT4Ris.s:48     .text:0000000000000020 .L0 
     /tmp/ccDT4Ris.s:49     .text:0000000000000020 .L0 
     /tmp/ccDT4Ris.s:50     .text:0000000000000024 .L0 
     /tmp/ccDT4Ris.s:54     .text:0000000000000030 .L0 
     /tmp/ccDT4Ris.s:55     .text:0000000000000030 .L0 
     /tmp/ccDT4Ris.s:56     .text:0000000000000030 .L0 
     /tmp/ccDT4Ris.s:58     .text:0000000000000034 .L0 
     /tmp/ccDT4Ris.s:63     .text:0000000000000034 .L0 
     /tmp/ccDT4Ris.s:64     .text:0000000000000034 .L0 
     /tmp/ccDT4Ris.s:65     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:148    .text:0000000000000034 .L0 
     /tmp/ccDT4Ris.s:73     .text:000000000000003c .L0 
     /tmp/ccDT4Ris.s:74     .text:000000000000003c .L0 
     /tmp/ccDT4Ris.s:80     .text:0000000000000040 .L0 
     /tmp/ccDT4Ris.s:81     .text:0000000000000040 .L0 
     /tmp/ccDT4Ris.s:84     .text:0000000000000044 .L0 
     /tmp/ccDT4Ris.s:90     .text:000000000000004c .L0 
     /tmp/ccDT4Ris.s:91     .text:0000000000000050 .L0 
     /tmp/ccDT4Ris.s:92     .text:0000000000000050 .L0 
     /tmp/ccDT4Ris.s:94     .text:0000000000000054 .L0 
     /tmp/ccDT4Ris.s:95     .text:0000000000000054 .L0 
     /tmp/ccDT4Ris.s:97     .text:0000000000000058 .L0 
     /tmp/ccDT4Ris.s:99     .text:000000000000005c .L0 
     /tmp/ccDT4Ris.s:103    .text:0000000000000060 .L0 
     /tmp/ccDT4Ris.s:109    .text:0000000000000060 .L0 
     /tmp/ccDT4Ris.s:110    .text:0000000000000060 .L0 
     /tmp/ccDT4Ris.s:111    .text:0000000000000060 .L0 
  src/../h/riscv.hpp:160    .text:0000000000000060 .L0 
     /tmp/ccDT4Ris.s:120    .text:0000000000000068 .L0 
     /tmp/ccDT4Ris.s:121    .text:0000000000000068 .L0 
     /tmp/ccDT4Ris.s:125    .text:000000000000006c .L0 
     /tmp/ccDT4Ris.s:127    .text:0000000000000070 .L0 
     /tmp/ccDT4Ris.s:131    .text:0000000000000074 .L0 
     /tmp/ccDT4Ris.s:132    .text:0000000000000074 .L0 
     /tmp/ccDT4Ris.s:133    .text:0000000000000074 .L0 
  src/../h/riscv.hpp:228    .text:0000000000000074 .L0 
     /tmp/ccDT4Ris.s:141    .text:000000000000007c .L0 
     /tmp/ccDT4Ris.s:142    .text:000000000000007c .L0 
     /tmp/ccDT4Ris.s:146    .text:0000000000000080 .L0 
GAS LISTING /tmp/ccDT4Ris.s 			page 17


     /tmp/ccDT4Ris.s:150    .text:0000000000000084 .L0 
     /tmp/ccDT4Ris.s:151    .text:0000000000000084 .L0 
     /tmp/ccDT4Ris.s:152    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:241    .text:0000000000000084 .L0 
     /tmp/ccDT4Ris.s:160    .text:000000000000008c .L0 
     /tmp/ccDT4Ris.s:161    .text:000000000000008c .L0 
     /tmp/ccDT4Ris.s:167    .text:0000000000000090 .L0 
     /tmp/ccDT4Ris.s:177    .text:00000000000000a8 .L0 
     /tmp/ccDT4Ris.s:178    .text:00000000000000a8 .L0 
     /tmp/ccDT4Ris.s:183    .text:00000000000000ac .L0 
  src/../h/riscv.hpp:234    .text:00000000000000ac .L0 
     /tmp/ccDT4Ris.s:193    .text:00000000000000b0 .L0 
     /tmp/ccDT4Ris.s:194    .text:00000000000000b0 .L0 
     /tmp/ccDT4Ris.s:199    .text:00000000000000b4 .L0 
  src/../h/riscv.hpp:166    .text:00000000000000b4 .L0 
     /tmp/ccDT4Ris.s:211    .text:00000000000000b8 .L0 
     /tmp/ccDT4Ris.s:219    .text:00000000000000bc .L0 
     /tmp/ccDT4Ris.s:220    .text:00000000000000bc .L0 
     /tmp/ccDT4Ris.s:221    .text:00000000000000bc .L0 
     /tmp/ccDT4Ris.s:222    .text:00000000000000bc .L0 
     /tmp/ccDT4Ris.s:223    .text:00000000000000bc .L0 
       src/riscv.cpp:49     .text:00000000000000bc .L0 
     /tmp/ccDT4Ris.s:230    .text:00000000000000c0 .L0 
       src/riscv.cpp:50     .text:00000000000000c0 .L0 
     /tmp/ccDT4Ris.s:236    .text:00000000000000c4 .L0 
       src/riscv.cpp:51     .text:00000000000000c4 .L0 
     /tmp/ccDT4Ris.s:242    .text:00000000000000c8 .L0 
     /tmp/ccDT4Ris.s:244    .text:00000000000000c8 .L0 
     /tmp/ccDT4Ris.s:247    .text:00000000000000d0 .L0 
     /tmp/ccDT4Ris.s:249    .text:00000000000000d4 .L0 
     /tmp/ccDT4Ris.s:251    .text:00000000000000d8 .L0 
       src/riscv.cpp:61     .text:00000000000000d8 .L0 
     /tmp/ccDT4Ris.s:257    .text:00000000000000dc .L0 
       src/riscv.cpp:62     .text:00000000000000dc .L0 
     /tmp/ccDT4Ris.s:265    .text:00000000000000e4 .L0 
       src/riscv.cpp:56     .text:00000000000000e4 .L0 
     /tmp/ccDT4Ris.s:271    .text:00000000000000e8 .L0 
       src/riscv.cpp:57     .text:00000000000000e8 .L0 
     /tmp/ccDT4Ris.s:280    .text:00000000000000f0 .L0 
     /tmp/ccDT4Ris.s:281    .text:00000000000000f0 .L0 
     /tmp/ccDT4Ris.s:282    .text:00000000000000f0 .L0 
     /tmp/ccDT4Ris.s:285    .text:00000000000000f8 .L0 
     /tmp/ccDT4Ris.s:289    .text:00000000000000fc .L0 
     /tmp/ccDT4Ris.s:290    .text:00000000000000fc .L0 
     /tmp/ccDT4Ris.s:291    .text:00000000000000fc .L0 
       src/riscv.cpp:80     .text:00000000000000fc .L0 
     /tmp/ccDT4Ris.s:298    .text:0000000000000100 .L0 
     /tmp/ccDT4Ris.s:300    .text:0000000000000100 .L0 
     /tmp/ccDT4Ris.s:303    .text:0000000000000108 .L0 
     /tmp/ccDT4Ris.s:308    .text:000000000000010c .L0 
     /tmp/ccDT4Ris.s:314    .text:000000000000010c _ZN5Riscv22handleConsoleInterruptEv
     /tmp/ccDT4Ris.s:317    .text:000000000000010c .L0 
     /tmp/ccDT4Ris.s:318    .text:000000000000010c .L0 
     /tmp/ccDT4Ris.s:319    .text:0000000000000110 .L0 
     /tmp/ccDT4Ris.s:322    .text:0000000000000118 .L0 
     /tmp/ccDT4Ris.s:323    .text:0000000000000118 .L0 
     /tmp/ccDT4Ris.s:325    .text:000000000000011c .L0 
GAS LISTING /tmp/ccDT4Ris.s 			page 18


     /tmp/ccDT4Ris.s:327    .text:000000000000011c .L0 
     /tmp/ccDT4Ris.s:328    .text:000000000000011c .L0 
     /tmp/ccDT4Ris.s:331    .text:0000000000000124 .L0 
     /tmp/ccDT4Ris.s:332    .text:0000000000000128 .L0 
     /tmp/ccDT4Ris.s:334    .text:000000000000012c .L0 
     /tmp/ccDT4Ris.s:335    .text:000000000000012c .L0 
     /tmp/ccDT4Ris.s:337    .text:0000000000000130 .L0 
     /tmp/ccDT4Ris.s:339    .text:0000000000000134 .L0 
     /tmp/ccDT4Ris.s:345    .text:0000000000000134 _ZN5Riscv20handleTimerInterruptEv
     /tmp/ccDT4Ris.s:348    .text:0000000000000134 .L0 
     /tmp/ccDT4Ris.s:349    .text:0000000000000134 .L0 
     /tmp/ccDT4Ris.s:350    .text:0000000000000138 .L0 
     /tmp/ccDT4Ris.s:352    .text:000000000000013c .L0 
     /tmp/ccDT4Ris.s:354    .text:0000000000000140 .L0 
     /tmp/ccDT4Ris.s:359    .text:0000000000000140 .L0 
     /tmp/ccDT4Ris.s:360    .text:0000000000000140 .L0 
     /tmp/ccDT4Ris.s:361    .text:0000000000000140 .L0 
     /tmp/ccDT4Ris.s:371    .text:0000000000000148 .L0 
     /tmp/ccDT4Ris.s:372    .text:000000000000014c .L0 
     /tmp/ccDT4Ris.s:373    .text:000000000000014c .L0 
     /tmp/ccDT4Ris.s:375    .text:0000000000000150 .L0 
     /tmp/ccDT4Ris.s:377    .text:0000000000000154 .L0 
     /tmp/ccDT4Ris.s:385    .text:0000000000000154 .L0 
     /tmp/ccDT4Ris.s:102    .text:0000000000000060 .L10
     /tmp/ccDT4Ris.s:278    .text:00000000000000f0 .L5
     /tmp/ccDT4Ris.s:287    .text:00000000000000fc .L6
     /tmp/ccDT4Ris.s:213    .text:00000000000000bc .L11
     /tmp/ccDT4Ris.s:87     .text:000000000000004c .L3
     /tmp/ccDT4Ris.s:263    .text:00000000000000e4 .L12
     /tmp/ccDT4Ris.s:174    .text:00000000000000a8 .L7
     /tmp/ccDT4Ris.s:1441   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccDT4Ris.s:2616   .debug_str:00000000000006d9 .LASF126
     /tmp/ccDT4Ris.s:2632   .debug_str:00000000000007ab .LASF127
     /tmp/ccDT4Ris.s:2430   .debug_str:00000000000001b7 .LASF128
     /tmp/ccDT4Ris.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccDT4Ris.s:380    .text:0000000000000154 .Letext0
     /tmp/ccDT4Ris.s:2372   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccDT4Ris.s:2446   .debug_str:0000000000000255 .LASF0
     /tmp/ccDT4Ris.s:2474   .debug_str:00000000000002f4 .LASF1
     /tmp/ccDT4Ris.s:2540   .debug_str:00000000000004f3 .LASF2
     /tmp/ccDT4Ris.s:2548   .debug_str:0000000000000535 .LASF4
     /tmp/ccDT4Ris.s:2452   .debug_str:000000000000027c .LASF3
     /tmp/ccDT4Ris.s:2382   .debug_str:000000000000004a .LASF5
     /tmp/ccDT4Ris.s:2520   .debug_str:000000000000045d .LASF6
     /tmp/ccDT4Ris.s:2470   .debug_str:00000000000002ce .LASF7
     /tmp/ccDT4Ris.s:2428   .debug_str:00000000000001a7 .LASF8
     /tmp/ccDT4Ris.s:2438   .debug_str:0000000000000212 .LASF9
     /tmp/ccDT4Ris.s:2396   .debug_str:000000000000009c .LASF10
     /tmp/ccDT4Ris.s:2424   .debug_str:0000000000000187 .LASF11
     /tmp/ccDT4Ris.s:2402   .debug_str:00000000000000d1 .LASF12
     /tmp/ccDT4Ris.s:2394   .debug_str:000000000000008c .LASF13
     /tmp/ccDT4Ris.s:2568   .debug_str:00000000000005aa .LASF14
     /tmp/ccDT4Ris.s:2418   .debug_str:0000000000000146 .LASF15
     /tmp/ccDT4Ris.s:2560   .debug_str:0000000000000575 .LASF16
     /tmp/ccDT4Ris.s:2610   .debug_str:00000000000006c1 .LASF96
     /tmp/ccDT4Ris.s:2530   .debug_str:00000000000004b3 .LASF129
     /tmp/ccDT4Ris.s:2478   .debug_str:000000000000030d .LASF17
GAS LISTING /tmp/ccDT4Ris.s 			page 19


     /tmp/ccDT4Ris.s:2422   .debug_str:000000000000017e .LASF18
     /tmp/ccDT4Ris.s:2634   .debug_str:00000000000007b9 .LASF19
     /tmp/ccDT4Ris.s:2440   .debug_str:0000000000000220 .LASF52
     /tmp/ccDT4Ris.s:2444   .debug_str:000000000000023d .LASF54
     /tmp/ccDT4Ris.s:2600   .debug_str:0000000000000684 .LASF20
     /tmp/ccDT4Ris.s:2594   .debug_str:0000000000000647 .LASF22
     /tmp/ccDT4Ris.s:2536   .debug_str:00000000000004df .LASF24
     /tmp/ccDT4Ris.s:2506   .debug_str:00000000000003f9 .LASF26
     /tmp/ccDT4Ris.s:2524   .debug_str:0000000000000485 .LASF21
     /tmp/ccDT4Ris.s:2526   .debug_str:000000000000048c .LASF23
     /tmp/ccDT4Ris.s:2498   .debug_str:00000000000003b7 .LASF25
     /tmp/ccDT4Ris.s:2472   .debug_str:00000000000002e1 .LASF27
     /tmp/ccDT4Ris.s:2630   .debug_str:00000000000007a3 .LASF28
     /tmp/ccDT4Ris.s:2586   .debug_str:0000000000000615 .LASF29
     /tmp/ccDT4Ris.s:2496   .debug_str:00000000000003af .LASF30
     /tmp/ccDT4Ris.s:2504   .debug_str:00000000000003e5 .LASF31
     /tmp/ccDT4Ris.s:2482   .debug_str:000000000000032f .LASF32
     /tmp/ccDT4Ris.s:2528   .debug_str:000000000000049f .LASF33
     /tmp/ccDT4Ris.s:2644   .debug_str:00000000000007fd .LASF34
     /tmp/ccDT4Ris.s:2450   .debug_str:0000000000000268 .LASF35
     /tmp/ccDT4Ris.s:2564   .debug_str:0000000000000592 .LASF36
     /tmp/ccDT4Ris.s:2552   .debug_str:0000000000000541 .LASF37
     /tmp/ccDT4Ris.s:2554   .debug_str:0000000000000554 .LASF38
     /tmp/ccDT4Ris.s:2398   .debug_str:00000000000000ab .LASF39
     /tmp/ccDT4Ris.s:2416   .debug_str:0000000000000140 .LASF40
     /tmp/ccDT4Ris.s:2442   .debug_str:000000000000022b .LASF41
     /tmp/ccDT4Ris.s:2448   .debug_str:0000000000000262 .LASF42
     /tmp/ccDT4Ris.s:2410   .debug_str:0000000000000114 .LASF43
     /tmp/ccDT4Ris.s:2384   .debug_str:0000000000000051 .LASF44
     /tmp/ccDT4Ris.s:2544   .debug_str:0000000000000512 .LASF45
     /tmp/ccDT4Ris.s:2538   .debug_str:00000000000004e8 .LASF46
     /tmp/ccDT4Ris.s:2642   .debug_str:00000000000007e5 .LASF47
     /tmp/ccDT4Ris.s:2612   .debug_str:00000000000006c7 .LASF48
     /tmp/ccDT4Ris.s:2638   .debug_str:00000000000007c9 .LASF49
     /tmp/ccDT4Ris.s:2608   .debug_str:00000000000006b7 .LASF50
     /tmp/ccDT4Ris.s:2488   .debug_str:000000000000034d .LASF51
     /tmp/ccDT4Ris.s:2624   .debug_str:000000000000078a .LASF53
     /tmp/ccDT4Ris.s:2436   .debug_str:00000000000001f6 .LASF55
     /tmp/ccDT4Ris.s:2556   .debug_str:000000000000055b .LASF56
     /tmp/ccDT4Ris.s:2514   .debug_str:0000000000000429 .LASF57
     /tmp/ccDT4Ris.s:2502   .debug_str:00000000000003e0 .LASF58
     /tmp/ccDT4Ris.s:2512   .debug_str:0000000000000418 .LASF59
     /tmp/ccDT4Ris.s:2456   .debug_str:000000000000029f .LASF60
     /tmp/ccDT4Ris.s:2566   .debug_str:0000000000000599 .LASF61
     /tmp/ccDT4Ris.s:2618   .debug_str:000000000000077b .LASF62
     /tmp/ccDT4Ris.s:2454   .debug_str:000000000000028e .LASF63
     /tmp/ccDT4Ris.s:2458   .debug_str:00000000000002a4 .LASF64
     /tmp/ccDT4Ris.s:2518   .debug_str:000000000000044c .LASF65
     /tmp/ccDT4Ris.s:2620   .debug_str:0000000000000780 .LASF66
     /tmp/ccDT4Ris.s:2392   .debug_str:000000000000007b .LASF67
     /tmp/ccDT4Ris.s:2460   .debug_str:00000000000002a9 .LASF68
     /tmp/ccDT4Ris.s:2468   .debug_str:00000000000002bd .LASF69
     /tmp/ccDT4Ris.s:2622   .debug_str:0000000000000785 .LASF70
     /tmp/ccDT4Ris.s:2646   .debug_str:0000000000000805 .LASF71
     /tmp/ccDT4Ris.s:2462   .debug_str:00000000000002ae .LASF72
     /tmp/ccDT4Ris.s:2414   .debug_str:000000000000012f .LASF73
     /tmp/ccDT4Ris.s:2508   .debug_str:000000000000040e .LASF74
GAS LISTING /tmp/ccDT4Ris.s 			page 20


     /tmp/ccDT4Ris.s:2588   .debug_str:0000000000000629 .LASF75
     /tmp/ccDT4Ris.s:2464   .debug_str:00000000000002b3 .LASF76
     /tmp/ccDT4Ris.s:2374   .debug_str:0000000000000000 .LASF77
     /tmp/ccDT4Ris.s:2626   .debug_str:0000000000000799 .LASF78
     /tmp/ccDT4Ris.s:2532   .debug_str:00000000000004be .LASF79
     /tmp/ccDT4Ris.s:2466   .debug_str:00000000000002b8 .LASF80
     /tmp/ccDT4Ris.s:2596   .debug_str:000000000000065c .LASF81
     /tmp/ccDT4Ris.s:2628   .debug_str:000000000000079e .LASF82
     /tmp/ccDT4Ris.s:2486   .debug_str:000000000000033c .LASF83
     /tmp/ccDT4Ris.s:2388   .debug_str:0000000000000068 .LASF84
     /tmp/ccDT4Ris.s:2542   .debug_str:0000000000000501 .LASF85
     /tmp/ccDT4Ris.s:2516   .debug_str:0000000000000447 .LASF86
     /tmp/ccDT4Ris.s:2434   .debug_str:00000000000001e5 .LASF87
     /tmp/ccDT4Ris.s:2590   .debug_str:000000000000063a .LASF88
     /tmp/ccDT4Ris.s:2490   .debug_str:0000000000000363 .LASF89
     /tmp/ccDT4Ris.s:2522   .debug_str:0000000000000470 .LASF90
     /tmp/ccDT4Ris.s:2420   .debug_str:000000000000015c .LASF92
     /tmp/ccDT4Ris.s:2570   .debug_str:00000000000005b6 .LASF91
     /tmp/ccDT4Ris.s:2500   .debug_str:00000000000003be .LASF93
     /tmp/ccDT4Ris.s:2406   .debug_str:00000000000000ef .LASF94
     /tmp/ccDT4Ris.s:2492   .debug_str:0000000000000374 .LASF95
     /tmp/ccDT4Ris.s:2572   .debug_str:00000000000005cb .LASF130
     /tmp/ccDT4Ris.s:2550   .debug_str:000000000000053c .LASF97
     /tmp/ccDT4Ris.s:2380   .debug_str:000000000000003e .LASF99
     /tmp/ccDT4Ris.s:2574   .debug_str:00000000000005d3 .LASF131
     /tmp/ccDT4Ris.s:2494   .debug_str:0000000000000398 .LASF132
     /tmp/ccDT4Ris.s:2386   .debug_str:000000000000005c .LASF98
     /tmp/ccDT4Ris.s:2598   .debug_str:000000000000066d .LASF100
     /tmp/ccDT4Ris.s:2584   .debug_str:0000000000000608 .LASF101
     /tmp/ccDT4Ris.s:2604   .debug_str:0000000000000692 .LASF102
     /tmp/ccDT4Ris.s:2510   .debug_str:0000000000000413 .LASF119
     /tmp/ccDT4Ris.s:2476   .debug_str:0000000000000307 .LASF103
     /tmp/ccDT4Ris.s:2534   .debug_str:00000000000004cf .LASF104
     /tmp/ccDT4Ris.s:2578   .debug_str:00000000000005e3 .LASF133
     /tmp/ccDT4Ris.s:2582   .debug_str:00000000000005f4 .LASF134
     /tmp/ccDT4Ris.s:2376   .debug_str:0000000000000011 .LASF105
     /tmp/ccDT4Ris.s:2640   .debug_str:00000000000007df .LASF106
     /tmp/ccDT4Ris.s:2592   .debug_str:000000000000063f .LASF107
     /tmp/ccDT4Ris.s:2558   .debug_str:000000000000056c .LASF108
     /tmp/ccDT4Ris.s:2390   .debug_str:000000000000006d .LASF109
     /tmp/ccDT4Ris.s:2480   .debug_str:0000000000000316 .LASF110
     /tmp/ccDT4Ris.s:2404   .debug_str:00000000000000e1 .LASF113
     /tmp/ccDT4Ris.s:2378   .debug_str:0000000000000016 .LASF115
     /tmp/ccDT4Ris.s:2412   .debug_str:0000000000000126 .LASF111
     /tmp/ccDT4Ris.s:2400   .debug_str:00000000000000be .LASF112
     /tmp/ccDT4Ris.s:2576   .debug_str:00000000000005de .LASF114
     /tmp/ccDT4Ris.s:2426   .debug_str:0000000000000196 .LASF116
     /tmp/ccDT4Ris.s:2546   .debug_str:000000000000052a .LASF135
     /tmp/ccDT4Ris.s:2484   .debug_str:0000000000000337 .LASF117
     /tmp/ccDT4Ris.s:2580   .debug_str:00000000000005eb .LASF118
     /tmp/ccDT4Ris.s:346    .text:0000000000000134 .LFB55
     /tmp/ccDT4Ris.s:378    .text:0000000000000154 .LFE55
     /tmp/ccDT4Ris.s:357    .text:0000000000000140 .LBB40
     /tmp/ccDT4Ris.s:369    .text:0000000000000148 .LBE40
     /tmp/ccDT4Ris.s:2263   .debug_loc:0000000000000000 .LLST8
     /tmp/ccDT4Ris.s:315    .text:000000000000010c .LFB54
     /tmp/ccDT4Ris.s:340    .text:0000000000000134 .LFE54
GAS LISTING /tmp/ccDT4Ris.s 			page 21


     /tmp/ccDT4Ris.s:329    .text:0000000000000124 .LVL21
     /tmp/ccDT4Ris.s:46     .text:0000000000000020 .LFB53
     /tmp/ccDT4Ris.s:309    .text:000000000000010c .LFE53
     /tmp/ccDT4Ris.s:2562   .debug_str:000000000000058b .LASF120
     /tmp/ccDT4Ris.s:2271   .debug_loc:0000000000000024 .LLST0
     /tmp/ccDT4Ris.s:2364   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccDT4Ris.s:2602   .debug_str:000000000000068d .LASF121
     /tmp/ccDT4Ris.s:2614   .debug_str:00000000000006d1 .LASF122
     /tmp/ccDT4Ris.s:2408   .debug_str:0000000000000106 .LASF123
     /tmp/ccDT4Ris.s:2290   .debug_loc:0000000000000071 .LLST1
     /tmp/ccDT4Ris.s:217    .text:00000000000000bc .LBB31
     /tmp/ccDT4Ris.s:304    .text:000000000000010c .LBE31
     /tmp/ccDT4Ris.s:2309   .debug_loc:00000000000000cd .LLST2
     /tmp/ccDT4Ris.s:2316   .debug_loc:00000000000000f0 .LLST3
     /tmp/ccDT4Ris.s:2323   .debug_loc:0000000000000113 .LLST4
     /tmp/ccDT4Ris.s:2636   .debug_str:00000000000007c2 .LASF124
     /tmp/ccDT4Ris.s:2330   .debug_loc:0000000000000136 .LLST5
     /tmp/ccDT4Ris.s:245    .text:00000000000000d0 .LVL15
     /tmp/ccDT4Ris.s:283    .text:00000000000000f8 .LVL17
     /tmp/ccDT4Ris.s:301    .text:0000000000000108 .LVL20
     /tmp/ccDT4Ris.s:107    .text:0000000000000060 .LBB24
     /tmp/ccDT4Ris.s:123    .text:000000000000006c .LBE24
     /tmp/ccDT4Ris.s:129    .text:0000000000000074 .LBB26
     /tmp/ccDT4Ris.s:144    .text:0000000000000080 .LBE26
     /tmp/ccDT4Ris.s:148    .text:0000000000000084 .LBB28
     /tmp/ccDT4Ris.s:164    .text:0000000000000090 .LBE28
     /tmp/ccDT4Ris.s:180    .text:00000000000000ac .LBB32
     /tmp/ccDT4Ris.s:191    .text:00000000000000b0 .LBE32
     /tmp/ccDT4Ris.s:2337   .debug_loc:0000000000000159 .LLST6
     /tmp/ccDT4Ris.s:196    .text:00000000000000b4 .LBB34
     /tmp/ccDT4Ris.s:207    .text:00000000000000b8 .LBE34
     /tmp/ccDT4Ris.s:2344   .debug_loc:000000000000017c .LLST7
     /tmp/ccDT4Ris.s:60     .text:0000000000000034 .LBB20
     /tmp/ccDT4Ris.s:77     .text:0000000000000040 .LBE20
     /tmp/ccDT4Ris.s:10     .text:0000000000000000 .LFB52
     /tmp/ccDT4Ris.s:40     .text:0000000000000020 .LFE52
     /tmp/ccDT4Ris.s:2606   .debug_str:00000000000006b2 .LASF125
     /tmp/ccDT4Ris.s:2432   .debug_str:00000000000001d5 .LASF136
     /tmp/ccDT4Ris.s:356    .text:0000000000000140 .LVL22
     /tmp/ccDT4Ris.s:366    .text:0000000000000148 .LVL23
     /tmp/ccDT4Ris.s:75     .text:0000000000000040 .LVL0
     /tmp/ccDT4Ris.s:82     .text:0000000000000044 .LVL1
     /tmp/ccDT4Ris.s:86     .text:000000000000004c .LVL2
     /tmp/ccDT4Ris.s:101    .text:0000000000000060 .LVL3
     /tmp/ccDT4Ris.s:116    .text:0000000000000064 .LVL4
     /tmp/ccDT4Ris.s:162    .text:0000000000000090 .LVL5
     /tmp/ccDT4Ris.s:173    .text:00000000000000a8 .LVL6
     /tmp/ccDT4Ris.s:212    .text:00000000000000bc .LVL11
     /tmp/ccDT4Ris.s:277    .text:00000000000000f0 .LVL16
     /tmp/ccDT4Ris.s:286    .text:00000000000000fc .LVL18
     /tmp/ccDT4Ris.s:228    .text:00000000000000c0 .LVL12
     /tmp/ccDT4Ris.s:234    .text:00000000000000c4 .LVL13
     /tmp/ccDT4Ris.s:240    .text:00000000000000c8 .LVL14
     /tmp/ccDT4Ris.s:296    .text:0000000000000100 .LVL19
     /tmp/ccDT4Ris.s:179    .text:00000000000000ac .LVL7
     /tmp/ccDT4Ris.s:188    .text:00000000000000b0 .LVL8
     /tmp/ccDT4Ris.s:195    .text:00000000000000b4 .LVL9
GAS LISTING /tmp/ccDT4Ris.s 			page 22


     /tmp/ccDT4Ris.s:204    .text:00000000000000b8 .LVL10
     /tmp/ccDT4Ris.s:386    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccDT4Ris.s:105    .text:0000000000000060 .LBB23
     /tmp/ccDT4Ris.s:208    .text:00000000000000b8 .LBE23
     /tmp/ccDT4Ris.s:215    .text:00000000000000bc .LBB37
     /tmp/ccDT4Ris.s:306    .text:000000000000010c .LBE37

UNDEFINED SYMBOLS
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB8dispatchEv
_ZN3TCB4joinEPS_
console_handler
