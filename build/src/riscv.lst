GAS LISTING /tmp/ccb10ON1.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB40:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../h/syscall_c.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::popSppSpie()
  12:src/riscv.cpp **** {
  12              		.loc 1 12 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 38 is_stmt 0
  22              	#APP
  23              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 29 is_stmt 0
  28              	# 14 "src/riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE40:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
GAS LISTING /tmp/ccb10ON1.s 			page 2


  46              	.LFB41:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** using Body = void (*)(void*);
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  20:src/riscv.cpp **** {
  47              		.loc 1 20 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040105 		addi	s0,sp,80
  58              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp ****     uint64 scause = r_scause();
  59              		.loc 1 21 5
  60              	.LBB22:
  61              	.LBB23:
  62              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccb10ON1.s 			page 3


  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     //stvec Vector "table"
  83:src/../h/riscv.hpp ****     static void stvecVectorTable();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     //read a0 register
  86:src/../h/riscv.hpp ****     static uint64 r_a0();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     //write to a0 register
  89:src/../h/riscv.hpp ****     static void w_a0(uint64 writeValue);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a1 register
GAS LISTING /tmp/ccb10ON1.s 			page 4


  92:src/../h/riscv.hpp ****     static uint64 r_a1();
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     //write to a1 register
  95:src/../h/riscv.hpp ****     static void w_a1(uint64 writeValue);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     //read a2 register
  98:src/../h/riscv.hpp ****     static uint64 r_a2();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     //write to a2 register
 101:src/../h/riscv.hpp ****     static void w_a2(uint64 writeValue);
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp ****     //read a3 register
 104:src/../h/riscv.hpp ****     static uint64 r_a3();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     //write to a3 register
 107:src/../h/riscv.hpp ****     static void w_a3(uint64 writeValue);
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp ****     //read a4 register
 110:src/../h/riscv.hpp ****     static uint64 r_a4();
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     //write to a4 register
 113:src/../h/riscv.hpp ****     static void w_a4(uint64 writeValue);
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp ****     //read a5 register
 116:src/../h/riscv.hpp ****     static uint64 r_a5();
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp ****     //write to a5 register
 119:src/../h/riscv.hpp ****     static void w_a5(uint64 writeValue);
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp ****     //read a6 register
 122:src/../h/riscv.hpp ****     static uint64 r_a6();
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp ****     //write to a6 register
 125:src/../h/riscv.hpp ****     static void w_a6(uint64 writeValue);
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp ****     //read a7 register
 128:src/../h/riscv.hpp ****     static uint64 r_a7();
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp ****     //write to a7 register
 131:src/../h/riscv.hpp ****     static void w_a7(uint64 writeValue);
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** private:
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp ****     // supervisor trap handler
 137:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
 142:src/../h/riscv.hpp **** };
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** 
 145:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 146:src/../h/riscv.hpp **** {
 147:src/../h/riscv.hpp ****     uint64 volatile scause;
  63              		.loc 2 147 5
GAS LISTING /tmp/ccb10ON1.s 			page 5


 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  64              		.loc 2 148 5
  65              		.loc 2 148 72 is_stmt 0
  66              	#APP
  67              	# 148 "src/../h/riscv.hpp" 1
 149              	    return scause;
  68              		csrr a5, scause
  69              	# 0 "" 2
  70              	#NO_APP
  71 0038 2330F4FC 		sd	a5,-64(s0)
  72              		.loc 2 149 5 is_stmt 1
  73              		.loc 2 149 12 is_stmt 0
  74 003c 833704FC 		ld	a5,-64(s0)
  75              	.LVL0:
  76              	.LBE23:
  77              	.LBE22:
  22:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  78              		.loc 1 22 5 is_stmt 1
  79              	.LBB24:
  80              		.loc 1 22 40 is_stmt 0
  81 0040 938787FF 		addi	a5,a5,-8
  82              	.LVL1:
  83              		.loc 1 22 5
  84 0044 13071000 		li	a4,1
  85 0048 637CF700 		bleu	a5,a4,.L25
  86              	.LVL2:
  87              	.L3:
  88              	.LBE24:
  23:src/riscv.cpp ****     {
  24:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****         uint64 codeOperation = Riscv::r_a0();
  29:src/riscv.cpp ****         int returnValue;
  30:src/riscv.cpp ****         MySemaphore* semHandlePtr;
  31:src/riscv.cpp ****         switch (codeOperation) {
  32:src/riscv.cpp ****             case 0x01:
  33:src/riscv.cpp ****                 //mem_alloc
  34:src/riscv.cpp ****                 break;
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****             case 0x02:
  37:src/riscv.cpp ****                 //mem_free -> a1: ono sta se brise prima
  38:src/riscv.cpp ****                 break;
  39:src/riscv.cpp **** 
  40:src/riscv.cpp ****             //THREAD DEO
  41:src/riscv.cpp ****             case 0x11:
  42:src/riscv.cpp ****                 //thread_create
  43:src/riscv.cpp ****                 TCB** tcb;
  44:src/riscv.cpp ****                 Body body;
  45:src/riscv.cpp ****                 void* arg;
  46:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (tcb));
  47:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  48:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
  49:src/riscv.cpp ****                 *tcb = TCB::createThread(body, arg);
  50:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
  51:src/riscv.cpp ****                 if(*tcb != nullptr) {
GAS LISTING /tmp/ccb10ON1.s 			page 6


  52:src/riscv.cpp ****                     //__asm__ volatile ("li a0, 0");
  53:src/riscv.cpp ****                     __asm__ volatile ("li t0, 0");
  54:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
  55:src/riscv.cpp ****                 }
  56:src/riscv.cpp ****                 else {
  57:src/riscv.cpp ****                     //__asm__ volatile ("li a0, -1");
  58:src/riscv.cpp ****                     __asm__ volatile ("li t0, -1");
  59:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
  60:src/riscv.cpp ****                 }
  61:src/riscv.cpp ****                 break;
  62:src/riscv.cpp **** 
  63:src/riscv.cpp ****             case 0x12:
  64:src/riscv.cpp ****                 //thread_exit()
  65:src/riscv.cpp ****                 TCB::running->setFinished(true);
  66:src/riscv.cpp ****                 TCB::dispatch();
  67:src/riscv.cpp ****                 __asm__ volatile ("li t0, 0");
  68:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
  69:src/riscv.cpp ****                 break;
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****             case 0x13:
  72:src/riscv.cpp ****                 //thread_dispatch()
  73:src/riscv.cpp ****                 TCB::dispatch();
  74:src/riscv.cpp ****                 break;
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****             case 0x14:
  77:src/riscv.cpp ****                 thread_t handle;
  78:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  79:src/riscv.cpp ****                 TCB::join(handle);
  80:src/riscv.cpp ****                 break;
  81:src/riscv.cpp **** 
  82:src/riscv.cpp ****             case 0x21:
  83:src/riscv.cpp ****                 //sem_open
  84:src/riscv.cpp ****                 unsigned init;
  85:src/riscv.cpp ****                 MySemaphore** semHandle;
  86:src/riscv.cpp **** 
  87:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (init));
  88:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
  89:src/riscv.cpp ****                 *semHandle = MySemaphore::createSemaphore(init);
  90:src/riscv.cpp **** 
  91:src/riscv.cpp ****                 if(*semHandle != nullptr) {
  92:src/riscv.cpp ****                     __asm__ volatile ("li t0, 0");
  93:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
  94:src/riscv.cpp ****                 }
  95:src/riscv.cpp ****                 else {
  96:src/riscv.cpp ****                     __asm__ volatile ("li t0, -1");
  97:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
  98:src/riscv.cpp ****                 }
  99:src/riscv.cpp ****                 break;
 100:src/riscv.cpp **** 
 101:src/riscv.cpp ****             case 0x22:
 102:src/riscv.cpp ****                 //sem_close
 103:src/riscv.cpp ****                 //check document
 104:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandlePtr));
 105:src/riscv.cpp ****                 if(semHandlePtr!= nullptr) {
 106:src/riscv.cpp ****                     returnValue = semHandlePtr->close();
 107:src/riscv.cpp ****                 }
 108:src/riscv.cpp ****                 else returnValue = -2;
GAS LISTING /tmp/ccb10ON1.s 			page 7


 109:src/riscv.cpp **** 
 110:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(returnValue));
 111:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 112:src/riscv.cpp ****                 break;
 113:src/riscv.cpp **** 
 114:src/riscv.cpp ****             case 0x23:
 115:src/riscv.cpp ****                 //sem_wait
 116:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandlePtr));
 117:src/riscv.cpp ****                 if(semHandlePtr!= nullptr) {
 118:src/riscv.cpp ****                     returnValue = semHandlePtr->wait();
 119:src/riscv.cpp ****                 }
 120:src/riscv.cpp ****                 else returnValue = -2;
 121:src/riscv.cpp **** 
 122:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(returnValue));
 123:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 124:src/riscv.cpp ****                 break;
 125:src/riscv.cpp ****             case 0x24:
 126:src/riscv.cpp ****                 //sem_signal
 127:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandlePtr));
 128:src/riscv.cpp ****                 if(semHandlePtr!= nullptr)
 129:src/riscv.cpp ****                     returnValue = semHandlePtr->signal();
 130:src/riscv.cpp ****                 else
 131:src/riscv.cpp ****                     returnValue = -2;
 132:src/riscv.cpp **** 
 133:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(returnValue));
 134:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 135:src/riscv.cpp ****                 break;
 136:src/riscv.cpp **** 
 137:src/riscv.cpp ****             /*case 0x31:
 138:src/riscv.cpp ****                 //time_sleep
 139:src/riscv.cpp ****                 break;
 140:src/riscv.cpp **** 
 141:src/riscv.cpp ****             case 0x41:
 142:src/riscv.cpp ****                 //getc
 143:src/riscv.cpp ****                 break;
 144:src/riscv.cpp **** 
 145:src/riscv.cpp ****             case 0x42:
 146:src/riscv.cpp ****                 //putc
 147:src/riscv.cpp ****                 break;*/
 148:src/riscv.cpp ****             //Da li treba 0x41 i 0x42 ako se ne radi asinhrono? izgleda ne
 149:src/riscv.cpp ****             case 0x43:
 150:src/riscv.cpp ****                 TCB::dispatch();
 151:src/riscv.cpp ****                 break;
 152:src/riscv.cpp ****         }
 153:src/riscv.cpp **** 
 154:src/riscv.cpp ****         w_sstatus(sstatus);
 155:src/riscv.cpp ****         w_sepc(sepc);
 156:src/riscv.cpp ****     }
 157:src/riscv.cpp ****     else
 158:src/riscv.cpp ****     {
 159:src/riscv.cpp ****         // unexpected trap cause
 160:src/riscv.cpp ****         // Ovde se ulazi ako se desi neki interrupt tabele
 161:src/riscv.cpp ****     }
 162:src/riscv.cpp **** }
  89              		.loc 1 162 1
  90 004c 83308104 		ld	ra,72(sp)
  91              		.cfi_remember_state
GAS LISTING /tmp/ccb10ON1.s 			page 8


  92              		.cfi_restore 1
  93 0050 03340104 		ld	s0,64(sp)
  94              		.cfi_restore 8
  95              		.cfi_def_cfa 2, 80
  96 0054 83348103 		ld	s1,56(sp)
  97              		.cfi_restore 9
  98 0058 13010105 		addi	sp,sp,80
  99              		.cfi_def_cfa_offset 0
 100 005c 67800000 		jr	ra
 101              	.LVL3:
 102              	.L25:
 103              		.cfi_restore_state
 104              	.LBB43:
 105              	.LBB25:
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 106              		.loc 1 25 9 is_stmt 1
 107              	.LBB26:
 108              	.LBB27:
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     uint64 volatile sepc;
 109              		.loc 2 159 5
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 110              		.loc 2 160 5
 111              		.loc 2 160 64 is_stmt 0
 112              	#APP
 113              	# 160 "src/../h/riscv.hpp" 1
 161              	    return sepc;
 114              		csrr a5, sepc
 115              	# 0 "" 2
 116              	.LVL4:
 117              	#NO_APP
 118 0064 233CF4FC 		sd	a5,-40(s0)
 119              		.loc 2 161 5 is_stmt 1
 120              		.loc 2 161 12 is_stmt 0
 121 0068 833784FD 		ld	a5,-40(s0)
 122              	.LBE27:
 123              	.LBE26:
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 124              		.loc 1 25 41
 125 006c 93874700 		addi	a5,a5,4
  25:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 126              		.loc 1 25 43
 127 0070 2338F4FA 		sd	a5,-80(s0)
  26:src/riscv.cpp **** 
 128              		.loc 1 26 9 is_stmt 1
 129              	.LBB28:
 130              	.LBB29:
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccb10ON1.s 			page 9


 164:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile stvec;
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 173:src/../h/riscv.hpp ****     return stvec;
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 179:src/../h/riscv.hpp **** }
 180:src/../h/riscv.hpp **** 
 181:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 182:src/../h/riscv.hpp **** {
 183:src/../h/riscv.hpp ****     uint64 volatile stval;
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 185:src/../h/riscv.hpp ****     return stval;
 186:src/../h/riscv.hpp **** }
 187:src/../h/riscv.hpp **** 
 188:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 189:src/../h/riscv.hpp **** {
 190:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 191:src/../h/riscv.hpp **** }
 192:src/../h/riscv.hpp **** 
 193:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 194:src/../h/riscv.hpp **** {
 195:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 196:src/../h/riscv.hpp **** }
 197:src/../h/riscv.hpp **** 
 198:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 199:src/../h/riscv.hpp **** {
 200:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 201:src/../h/riscv.hpp **** }
 202:src/../h/riscv.hpp **** 
 203:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 204:src/../h/riscv.hpp **** {
 205:src/../h/riscv.hpp ****     uint64 volatile sip;
 206:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 207:src/../h/riscv.hpp ****     return sip;
 208:src/../h/riscv.hpp **** }
 209:src/../h/riscv.hpp **** 
 210:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 211:src/../h/riscv.hpp **** {
 212:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 213:src/../h/riscv.hpp **** }
 214:src/../h/riscv.hpp **** 
 215:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 216:src/../h/riscv.hpp **** {
 217:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 218:src/../h/riscv.hpp **** }
 219:src/../h/riscv.hpp **** 
 220:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
GAS LISTING /tmp/ccb10ON1.s 			page 10


 221:src/../h/riscv.hpp **** {
 222:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 223:src/../h/riscv.hpp **** }
 224:src/../h/riscv.hpp **** 
 225:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 226:src/../h/riscv.hpp **** {
 227:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 131              		.loc 2 227 5
 228:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 132              		.loc 2 228 5
 133              		.loc 2 228 76 is_stmt 0
 134              	#APP
 135              	# 228 "src/../h/riscv.hpp" 1
 229              	    return sstatus;
 136              		csrr a5, sstatus
 137              	# 0 "" 2
 138              	#NO_APP
 139 0078 2338F4FC 		sd	a5,-48(s0)
 140              		.loc 2 229 5 is_stmt 1
 141              		.loc 2 229 12 is_stmt 0
 142 007c 833704FD 		ld	a5,-48(s0)
 143              	.LBE29:
 144              	.LBE28:
  26:src/riscv.cpp **** 
 145              		.loc 1 26 45
 146 0080 233CF4FA 		sd	a5,-72(s0)
  28:src/riscv.cpp ****         int returnValue;
 147              		.loc 1 28 9 is_stmt 1
 148              	.LBB30:
 149              	.LBB31:
 230:src/../h/riscv.hpp **** }
 231:src/../h/riscv.hpp **** 
 232:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 233:src/../h/riscv.hpp **** {
 234:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 235:src/../h/riscv.hpp **** }
 236:src/../h/riscv.hpp **** 
 237:src/../h/riscv.hpp **** //a0
 238:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 239:src/../h/riscv.hpp **** {
 240:src/../h/riscv.hpp ****     uint64 volatile a0;
 150              		.loc 2 240 5
 241:src/../h/riscv.hpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
 151              		.loc 2 241 5
 152              		.loc 2 241 46 is_stmt 0
 153              	#APP
 154              	# 241 "src/../h/riscv.hpp" 1
 242              	    return a0;
 155              		mv a5, a0
 156              	# 0 "" 2
 157              	#NO_APP
 158 0088 2334F4FC 		sd	a5,-56(s0)
 159              		.loc 2 242 5 is_stmt 1
 160              		.loc 2 242 12 is_stmt 0
 161 008c 833784FC 		ld	a5,-56(s0)
 162              	.LVL5:
 163              	.LBE31:
GAS LISTING /tmp/ccb10ON1.s 			page 11


 164              	.LBE30:
  29:src/riscv.cpp ****         MySemaphore* semHandlePtr;
 165              		.loc 1 29 9 is_stmt 1
  30:src/riscv.cpp ****         switch (codeOperation) {
 166              		.loc 1 30 9
  31:src/riscv.cpp ****             case 0x01:
 167              		.loc 1 31 9
 168 0090 9387F7FE 		addi	a5,a5,-17
 169              	.LVL6:
 170 0094 13072003 		li	a4,50
 171 0098 636CF706 		bgtu	a5,a4,.L5
 172 009c 93972700 		slli	a5,a5,2
 173              	.LVL7:
 174 00a0 17070000 		lla	a4,.L7
 174      13070700 
 175 00a8 B387E700 		add	a5,a5,a4
 176 00ac 83A70700 		lw	a5,0(a5)
 177 00b0 B387E700 		add	a5,a5,a4
 178 00b4 67800700 		jr	a5
 179              		.section	.rodata
 180              		.align	2
 181              		.align	2
 182              	.L7:
 183 0000 00000000 		.word	.L15-.L7
 184 0004 00000000 		.word	.L14-.L7
 185 0008 00000000 		.word	.L13-.L7
 186 000c 00000000 		.word	.L12-.L7
 187 0010 00000000 		.word	.L5-.L7
 188 0014 00000000 		.word	.L5-.L7
 189 0018 00000000 		.word	.L5-.L7
 190 001c 00000000 		.word	.L5-.L7
 191 0020 00000000 		.word	.L5-.L7
 192 0024 00000000 		.word	.L5-.L7
 193 0028 00000000 		.word	.L5-.L7
 194 002c 00000000 		.word	.L5-.L7
 195 0030 00000000 		.word	.L5-.L7
 196 0034 00000000 		.word	.L5-.L7
 197 0038 00000000 		.word	.L5-.L7
 198 003c 00000000 		.word	.L5-.L7
 199 0040 00000000 		.word	.L11-.L7
 200 0044 00000000 		.word	.L10-.L7
 201 0048 00000000 		.word	.L9-.L7
 202 004c 00000000 		.word	.L8-.L7
 203 0050 00000000 		.word	.L5-.L7
 204 0054 00000000 		.word	.L5-.L7
 205 0058 00000000 		.word	.L5-.L7
 206 005c 00000000 		.word	.L5-.L7
 207 0060 00000000 		.word	.L5-.L7
 208 0064 00000000 		.word	.L5-.L7
 209 0068 00000000 		.word	.L5-.L7
 210 006c 00000000 		.word	.L5-.L7
 211 0070 00000000 		.word	.L5-.L7
 212 0074 00000000 		.word	.L5-.L7
 213 0078 00000000 		.word	.L5-.L7
 214 007c 00000000 		.word	.L5-.L7
 215 0080 00000000 		.word	.L5-.L7
 216 0084 00000000 		.word	.L5-.L7
GAS LISTING /tmp/ccb10ON1.s 			page 12


 217 0088 00000000 		.word	.L5-.L7
 218 008c 00000000 		.word	.L5-.L7
 219 0090 00000000 		.word	.L5-.L7
 220 0094 00000000 		.word	.L5-.L7
 221 0098 00000000 		.word	.L5-.L7
 222 009c 00000000 		.word	.L5-.L7
 223 00a0 00000000 		.word	.L5-.L7
 224 00a4 00000000 		.word	.L5-.L7
 225 00a8 00000000 		.word	.L5-.L7
 226 00ac 00000000 		.word	.L5-.L7
 227 00b0 00000000 		.word	.L5-.L7
 228 00b4 00000000 		.word	.L5-.L7
 229 00b8 00000000 		.word	.L5-.L7
 230 00bc 00000000 		.word	.L5-.L7
 231 00c0 00000000 		.word	.L5-.L7
 232 00c4 00000000 		.word	.L5-.L7
 233 00c8 00000000 		.word	.L6-.L7
 234              		.text
 235              	.L15:
 236              	.LBB32:
 237              	.LBB33:
  41:src/riscv.cpp ****                 //thread_create
 238              		.loc 1 41 13
  43:src/riscv.cpp ****                 Body body;
 239              		.loc 1 43 17
  44:src/riscv.cpp ****                 void* arg;
 240              		.loc 1 44 17
  45:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (tcb));
 241              		.loc 1 45 17
  46:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 242              		.loc 1 46 17
  46:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 243              		.loc 1 46 60 is_stmt 0
 244              	#APP
 245              	# 46 "src/riscv.cpp" 1
 246              		mv s1, a1
 247              	# 0 "" 2
 248              	.LVL8:
  47:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 249              		.loc 1 47 17 is_stmt 1
  47:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a3" : "=r" (arg));
 250              		.loc 1 47 61 is_stmt 0
 251              	# 47 "src/riscv.cpp" 1
 252              		mv a0, a2
 253              	# 0 "" 2
 254              	.LVL9:
  48:src/riscv.cpp ****                 *tcb = TCB::createThread(body, arg);
 255              		.loc 1 48 17 is_stmt 1
  48:src/riscv.cpp ****                 *tcb = TCB::createThread(body, arg);
 256              		.loc 1 48 60 is_stmt 0
 257              	# 48 "src/riscv.cpp" 1
 258              		mv a1, a3
 259              	# 0 "" 2
 260              	.LVL10:
  49:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
 261              		.loc 1 49 17 is_stmt 1
  49:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
GAS LISTING /tmp/ccb10ON1.s 			page 13


 262              		.loc 1 49 41 is_stmt 0
 263              	#NO_APP
 264 00c4 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 264      E7800000 
 265              	.LVL11:
  49:src/riscv.cpp ****                 //POVRATNA VREDNOST: Upis mora na stek direktno, jer se posle ovoga vraca stari kon
 266              		.loc 1 49 22
 267 00cc 23B0A400 		sd	a0,0(s1)
  51:src/riscv.cpp ****                     //__asm__ volatile ("li a0, 0");
 268              		.loc 1 51 17 is_stmt 1
 269 00d0 63080500 		beqz	a0,.L16
  53:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 270              		.loc 1 53 21
  53:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 271              		.loc 1 53 50 is_stmt 0
 272              	#APP
 273              	# 53 "src/riscv.cpp" 1
  54:src/riscv.cpp ****                 }
 274              		li t0, 0
 275              	# 0 "" 2
 276              		.loc 1 54 21 is_stmt 1
  54:src/riscv.cpp ****                 }
 277              		.loc 1 54 55 is_stmt 0
 278              	# 54 "src/riscv.cpp" 1
 279              		sw t0, 80(x8)
 280              	# 0 "" 2
 281              	#NO_APP
 282 00dc 6F004003 		j	.L5
 283              	.L16:
  58:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 284              		.loc 1 58 21 is_stmt 1
  58:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 285              		.loc 1 58 51 is_stmt 0
 286              	#APP
 287              	# 58 "src/riscv.cpp" 1
  59:src/riscv.cpp ****                 }
 288              		li t0, -1
 289              	# 0 "" 2
 290              		.loc 1 59 21 is_stmt 1
  59:src/riscv.cpp ****                 }
 291              		.loc 1 59 55 is_stmt 0
 292              	# 59 "src/riscv.cpp" 1
 293              		sw t0, 80(x8)
 294              	# 0 "" 2
 295              	#NO_APP
 296 00e8 6F008002 		j	.L5
 297              	.LVL12:
 298              	.L14:
  63:src/riscv.cpp ****                 //thread_exit()
 299              		.loc 1 63 13 is_stmt 1
  65:src/riscv.cpp ****                 TCB::dispatch();
 300              		.loc 1 65 17
  65:src/riscv.cpp ****                 TCB::dispatch();
 301              		.loc 1 65 42 is_stmt 0
 302 00ec 97070000 		la	a5,_ZN3TCB7runningE
 302      83B70700 
 303 00f4 83B70700 		ld	a5,0(a5)
GAS LISTING /tmp/ccb10ON1.s 			page 14


 304              	.LVL13:
 305              	.LBB34:
 306              	.LBB35:
 307              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
 308              		.loc 3 19 36 is_stmt 1
 309              		.loc 3 19 45 is_stmt 0
 310 00f8 13071000 		li	a4,1
 311 00fc 2380E702 		sb	a4,32(a5)
 312              	.LVL14:
 313              	.LBE35:
 314              	.LBE34:
  66:src/riscv.cpp ****                 __asm__ volatile ("li t0, 0");
 315              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 __asm__ volatile ("li t0, 0");
 316              		.loc 1 66 30 is_stmt 0
 317 0100 97000000 		call	_ZN3TCB8dispatchEv@plt
 317      E7800000 
 318              	.LVL15:
  67:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 319              		.loc 1 67 17 is_stmt 1
  67:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 320              		.loc 1 67 46 is_stmt 0
 321              	#APP
 322              	# 67 "src/riscv.cpp" 1
  68:src/riscv.cpp ****                 break;
 323              		li t0, 0
 324              	# 0 "" 2
 325              		.loc 1 68 17 is_stmt 1
  68:src/riscv.cpp ****                 break;
 326              		.loc 1 68 51 is_stmt 0
 327              	# 68 "src/riscv.cpp" 1
  69:src/riscv.cpp **** 
 328              		sw t0, 80(x8)
 329              	# 0 "" 2
 330              		.loc 1 69 17 is_stmt 1
 331              	#NO_APP
 332              	.L5:
 333              	.LBE33:
GAS LISTING /tmp/ccb10ON1.s 			page 15


 334              	.LBE32:
 154:src/riscv.cpp ****         w_sepc(sepc);
 335              		.loc 1 154 9
 154:src/riscv.cpp ****         w_sepc(sepc);
 336              		.loc 1 154 18 is_stmt 0
 337 0110 833784FB 		ld	a5,-72(s0)
 338              	.LVL16:
 339              	.LBB37:
 340              	.LBB38:
 234:src/../h/riscv.hpp **** }
 341              		.loc 2 234 5 is_stmt 1
 234:src/../h/riscv.hpp **** }
 342              		.loc 2 234 77 is_stmt 0
 343              	#APP
 344              	# 234 "src/../h/riscv.hpp" 1
 345              		csrw sstatus, a5
 346              	# 0 "" 2
 347              	.LVL17:
 348              	#NO_APP
 349              	.LBE38:
 350              	.LBE37:
 155:src/riscv.cpp ****     }
 351              		.loc 1 155 9 is_stmt 1
 155:src/riscv.cpp ****     }
 352              		.loc 1 155 15 is_stmt 0
 353 0118 833704FB 		ld	a5,-80(s0)
 354              	.LVL18:
 355              	.LBB39:
 356              	.LBB40:
 166:src/../h/riscv.hpp **** }
 357              		.loc 2 166 5 is_stmt 1
 166:src/../h/riscv.hpp **** }
 358              		.loc 2 166 65 is_stmt 0
 359              	#APP
 360              	# 166 "src/../h/riscv.hpp" 1
 361              		csrw sepc, a5
 362              	# 0 "" 2
 363              	.LVL19:
 364              	#NO_APP
 365              	.LBE40:
 366              	.LBE39:
 367              	.LBE25:
 368              	.LBE43:
 369              		.loc 1 162 1
 370 0120 6FF0DFF2 		j	.L3
 371              	.L13:
 372              	.LBB44:
 373              	.LBB42:
 374              	.LBB41:
 375              	.LBB36:
  71:src/riscv.cpp ****                 //thread_dispatch()
 376              		.loc 1 71 13 is_stmt 1
  73:src/riscv.cpp ****                 break;
 377              		.loc 1 73 17
  73:src/riscv.cpp ****                 break;
 378              		.loc 1 73 30 is_stmt 0
 379 0124 97000000 		call	_ZN3TCB8dispatchEv@plt
GAS LISTING /tmp/ccb10ON1.s 			page 16


 379      E7800000 
 380              	.LVL20:
  74:src/riscv.cpp **** 
 381              		.loc 1 74 17 is_stmt 1
 382 012c 6FF05FFE 		j	.L5
 383              	.L12:
  76:src/riscv.cpp ****                 thread_t handle;
 384              		.loc 1 76 13
  77:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 385              		.loc 1 77 17
  78:src/riscv.cpp ****                 TCB::join(handle);
 386              		.loc 1 78 17
  78:src/riscv.cpp ****                 TCB::join(handle);
 387              		.loc 1 78 63 is_stmt 0
 388              	#APP
 389              	# 78 "src/riscv.cpp" 1
 390              		mv a0, a1
 391              	# 0 "" 2
 392              	.LVL21:
  79:src/riscv.cpp ****                 break;
 393              		.loc 1 79 17 is_stmt 1
  79:src/riscv.cpp ****                 break;
 394              		.loc 1 79 26 is_stmt 0
 395              	#NO_APP
 396 0134 97000000 		call	_ZN3TCB4joinEPS_@plt
 396      E7800000 
 397              	.LVL22:
  80:src/riscv.cpp **** 
 398              		.loc 1 80 17 is_stmt 1
 399 013c 6FF05FFD 		j	.L5
 400              	.L11:
  82:src/riscv.cpp ****                 //sem_open
 401              		.loc 1 82 13
  84:src/riscv.cpp ****                 MySemaphore** semHandle;
 402              		.loc 1 84 17
  85:src/riscv.cpp **** 
 403              		.loc 1 85 17
  87:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 404              		.loc 1 87 17
  87:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 405              		.loc 1 87 61 is_stmt 0
 406              	#APP
 407              	# 87 "src/riscv.cpp" 1
 408              		mv a0, a2
 409              	# 0 "" 2
 410              	#NO_APP
 411 0144 1B050500 		sext.w	a0,a0
 412              	.LVL23:
  88:src/riscv.cpp ****                 *semHandle = MySemaphore::createSemaphore(init);
 413              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 *semHandle = MySemaphore::createSemaphore(init);
 414              		.loc 1 88 66 is_stmt 0
 415              	#APP
 416              	# 88 "src/riscv.cpp" 1
 417              		mv s1, a1
 418              	# 0 "" 2
 419              	.LVL24:
GAS LISTING /tmp/ccb10ON1.s 			page 17


  89:src/riscv.cpp **** 
 420              		.loc 1 89 17 is_stmt 1
  89:src/riscv.cpp **** 
 421              		.loc 1 89 58 is_stmt 0
 422              	#NO_APP
 423 014c 97000000 		call	_ZN11MySemaphore15createSemaphoreEj@plt
 423      E7800000 
 424              	.LVL25:
  89:src/riscv.cpp **** 
 425              		.loc 1 89 28
 426 0154 23B0A400 		sd	a0,0(s1)
  91:src/riscv.cpp ****                     __asm__ volatile ("li t0, 0");
 427              		.loc 1 91 17 is_stmt 1
 428 0158 63080500 		beqz	a0,.L17
  92:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 429              		.loc 1 92 21
  92:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 430              		.loc 1 92 50 is_stmt 0
 431              	#APP
 432              	# 92 "src/riscv.cpp" 1
  93:src/riscv.cpp ****                 }
 433              		li t0, 0
 434              	# 0 "" 2
 435              		.loc 1 93 21 is_stmt 1
  93:src/riscv.cpp ****                 }
 436              		.loc 1 93 55 is_stmt 0
 437              	# 93 "src/riscv.cpp" 1
 438              		sw t0, 80(x8)
 439              	# 0 "" 2
 440              	#NO_APP
 441 0164 6FF0DFFA 		j	.L5
 442              	.L17:
  96:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 443              		.loc 1 96 21 is_stmt 1
  96:src/riscv.cpp ****                     __asm__ volatile ("sw t0, 80(x8)");
 444              		.loc 1 96 51 is_stmt 0
 445              	#APP
 446              	# 96 "src/riscv.cpp" 1
  97:src/riscv.cpp ****                 }
 447              		li t0, -1
 448              	# 0 "" 2
 449              		.loc 1 97 21 is_stmt 1
  97:src/riscv.cpp ****                 }
 450              		.loc 1 97 55 is_stmt 0
 451              	# 97 "src/riscv.cpp" 1
 452              		sw t0, 80(x8)
 453              	# 0 "" 2
 454              	#NO_APP
 455 0170 6FF01FFA 		j	.L5
 456              	.LVL26:
 457              	.L10:
 101:src/riscv.cpp ****                 //sem_close
 458              		.loc 1 101 13 is_stmt 1
 104:src/riscv.cpp ****                 if(semHandlePtr!= nullptr) {
 459              		.loc 1 104 17
 104:src/riscv.cpp ****                 if(semHandlePtr!= nullptr) {
 460              		.loc 1 104 69 is_stmt 0
GAS LISTING /tmp/ccb10ON1.s 			page 18


 461              	#APP
 462              	# 104 "src/riscv.cpp" 1
 463              		mv a0, a1
 464              	# 0 "" 2
 465              	.LVL27:
 105:src/riscv.cpp ****                     returnValue = semHandlePtr->close();
 466              		.loc 1 105 17 is_stmt 1
 467              	#NO_APP
 468 0178 630C0500 		beqz	a0,.L21
 106:src/riscv.cpp ****                 }
 469              		.loc 1 106 21
 106:src/riscv.cpp ****                 }
 470              		.loc 1 106 54 is_stmt 0
 471 017c 97000000 		call	_ZN11MySemaphore5closeEv@plt
 471      E7800000 
 472              	.LVL28:
 473              	.L18:
 110:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 474              		.loc 1 110 17 is_stmt 1
 110:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 475              		.loc 1 110 68 is_stmt 0
 476              	#APP
 477              	# 110 "src/riscv.cpp" 1
 111:src/riscv.cpp ****                 break;
 478              		mv t0, a0
 479              	# 0 "" 2
 480              		.loc 1 111 17 is_stmt 1
 111:src/riscv.cpp ****                 break;
 481              		.loc 1 111 51 is_stmt 0
 482              	# 111 "src/riscv.cpp" 1
 112:src/riscv.cpp **** 
 483              		sw t0, 80(x8)
 484              	# 0 "" 2
 485              		.loc 1 112 17 is_stmt 1
 486              	#NO_APP
 487 018c 6FF05FF8 		j	.L5
 488              	.LVL29:
 489              	.L21:
 108:src/riscv.cpp **** 
 490              		.loc 1 108 34 is_stmt 0
 491 0190 1305E0FF 		li	a0,-2
 492              	.LVL30:
 493 0194 6FF01FFF 		j	.L18
 494              	.L9:
 114:src/riscv.cpp ****                 //sem_wait
 495              		.loc 1 114 13 is_stmt 1
 116:src/riscv.cpp ****                 if(semHandlePtr!= nullptr) {
 496              		.loc 1 116 17
 116:src/riscv.cpp ****                 if(semHandlePtr!= nullptr) {
 497              		.loc 1 116 69 is_stmt 0
 498              	#APP
 499              	# 116 "src/riscv.cpp" 1
 500              		mv a0, a1
 501              	# 0 "" 2
 502              	.LVL31:
 117:src/riscv.cpp ****                     returnValue = semHandlePtr->wait();
 503              		.loc 1 117 17 is_stmt 1
GAS LISTING /tmp/ccb10ON1.s 			page 19


 504              	#NO_APP
 505 019c 630C0500 		beqz	a0,.L22
 118:src/riscv.cpp ****                 }
 506              		.loc 1 118 21
 118:src/riscv.cpp ****                 }
 507              		.loc 1 118 53 is_stmt 0
 508 01a0 97000000 		call	_ZN11MySemaphore4waitEv@plt
 508      E7800000 
 509              	.LVL32:
 510              	.L19:
 122:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 511              		.loc 1 122 17 is_stmt 1
 122:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 512              		.loc 1 122 68 is_stmt 0
 513              	#APP
 514              	# 122 "src/riscv.cpp" 1
 123:src/riscv.cpp ****                 break;
 515              		mv t0, a0
 516              	# 0 "" 2
 517              		.loc 1 123 17 is_stmt 1
 123:src/riscv.cpp ****                 break;
 518              		.loc 1 123 51 is_stmt 0
 519              	# 123 "src/riscv.cpp" 1
 124:src/riscv.cpp ****             case 0x24:
 520              		sw t0, 80(x8)
 521              	# 0 "" 2
 522              		.loc 1 124 17 is_stmt 1
 523              	#NO_APP
 524 01b0 6FF01FF6 		j	.L5
 525              	.LVL33:
 526              	.L22:
 120:src/riscv.cpp **** 
 527              		.loc 1 120 34 is_stmt 0
 528 01b4 1305E0FF 		li	a0,-2
 529              	.LVL34:
 530 01b8 6FF01FFF 		j	.L19
 531              	.L8:
 125:src/riscv.cpp ****                 //sem_signal
 532              		.loc 1 125 13 is_stmt 1
 127:src/riscv.cpp ****                 if(semHandlePtr!= nullptr)
 533              		.loc 1 127 17
 127:src/riscv.cpp ****                 if(semHandlePtr!= nullptr)
 534              		.loc 1 127 69 is_stmt 0
 535              	#APP
 536              	# 127 "src/riscv.cpp" 1
 537              		mv a0, a1
 538              	# 0 "" 2
 539              	.LVL35:
 128:src/riscv.cpp ****                     returnValue = semHandlePtr->signal();
 540              		.loc 1 128 17 is_stmt 1
 541              	#NO_APP
 542 01c0 630C0500 		beqz	a0,.L23
 129:src/riscv.cpp ****                 else
 543              		.loc 1 129 21
 129:src/riscv.cpp ****                 else
 544              		.loc 1 129 55 is_stmt 0
 545 01c4 97000000 		call	_ZN11MySemaphore6signalEv@plt
GAS LISTING /tmp/ccb10ON1.s 			page 20


 545      E7800000 
 546              	.LVL36:
 547              	.L20:
 133:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 548              		.loc 1 133 17 is_stmt 1
 133:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(x8)");
 549              		.loc 1 133 68 is_stmt 0
 550              	#APP
 551              	# 133 "src/riscv.cpp" 1
 134:src/riscv.cpp ****                 break;
 552              		mv t0, a0
 553              	# 0 "" 2
 554              		.loc 1 134 17 is_stmt 1
 134:src/riscv.cpp ****                 break;
 555              		.loc 1 134 51 is_stmt 0
 556              	# 134 "src/riscv.cpp" 1
 135:src/riscv.cpp **** 
 557              		sw t0, 80(x8)
 558              	# 0 "" 2
 559              		.loc 1 135 17 is_stmt 1
 560              	#NO_APP
 561 01d4 6FF0DFF3 		j	.L5
 562              	.LVL37:
 563              	.L23:
 131:src/riscv.cpp **** 
 564              		.loc 1 131 33 is_stmt 0
 565 01d8 1305E0FF 		li	a0,-2
 566              	.LVL38:
 567 01dc 6FF01FFF 		j	.L20
 568              	.L6:
 149:src/riscv.cpp ****                 TCB::dispatch();
 569              		.loc 1 149 13 is_stmt 1
 150:src/riscv.cpp ****                 break;
 570              		.loc 1 150 17
 150:src/riscv.cpp ****                 break;
 571              		.loc 1 150 30 is_stmt 0
 572 01e0 97000000 		call	_ZN3TCB8dispatchEv@plt
 572      E7800000 
 573              	.LVL39:
 151:src/riscv.cpp ****         }
 574              		.loc 1 151 17 is_stmt 1
 575 01e8 6FF09FF2 		j	.L5
 576              	.LBE36:
 577              	.LBE41:
 578              	.LBE42:
 579              	.LBE44:
 580              		.cfi_endproc
 581              	.LFE41:
 583              		.align	2
 584              		.globl	_ZN5Riscv22handleConsoleInterruptEv
 586              	_ZN5Riscv22handleConsoleInterruptEv:
 587              	.LFB42:
 163:src/riscv.cpp **** 
 164:src/riscv.cpp **** void Riscv::handleConsoleInterrupt() {
 588              		.loc 1 164 38
 589              		.cfi_startproc
 590 01ec 130101FF 		addi	sp,sp,-16
GAS LISTING /tmp/ccb10ON1.s 			page 21


 591              		.cfi_def_cfa_offset 16
 592 01f0 23341100 		sd	ra,8(sp)
 593 01f4 23308100 		sd	s0,0(sp)
 594              		.cfi_offset 1, -8
 595              		.cfi_offset 8, -16
 596 01f8 13040101 		addi	s0,sp,16
 597              		.cfi_def_cfa 8, 0
 165:src/riscv.cpp ****     console_handler();
 598              		.loc 1 165 5
 599              		.loc 1 165 20 is_stmt 0
 600 01fc 97000000 		call	console_handler@plt
 600      E7800000 
 601              	.LVL40:
 166:src/riscv.cpp **** }
 602              		.loc 1 166 1
 603 0204 83308100 		ld	ra,8(sp)
 604              		.cfi_restore 1
 605 0208 03340100 		ld	s0,0(sp)
 606              		.cfi_restore 8
 607              		.cfi_def_cfa 2, 16
 608 020c 13010101 		addi	sp,sp,16
 609              		.cfi_def_cfa_offset 0
 610 0210 67800000 		jr	ra
 611              		.cfi_endproc
 612              	.LFE42:
 614              		.align	2
 615              		.globl	_ZN5Riscv20handleTimerInterruptEv
 617              	_ZN5Riscv20handleTimerInterruptEv:
 618              	.LFB43:
 167:src/riscv.cpp **** 
 168:src/riscv.cpp **** void Riscv::handleTimerInterrupt() {
 619              		.loc 1 168 36 is_stmt 1
 620              		.cfi_startproc
 621 0214 130101FF 		addi	sp,sp,-16
 622              		.cfi_def_cfa_offset 16
 623 0218 23348100 		sd	s0,8(sp)
 624              		.cfi_offset 8, -8
 625 021c 13040101 		addi	s0,sp,16
 626              		.cfi_def_cfa 8, 0
 169:src/riscv.cpp ****     mc_sip(SIP_SSIP); // MORA DA SE OBRISE PENDING BIT - ZATO NIJE RADILO!
 627              		.loc 1 169 5
 628              	.LVL41:
 629              	.LBB45:
 630              	.LBB46:
 200:src/../h/riscv.hpp **** }
 631              		.loc 2 200 5
 200:src/../h/riscv.hpp **** }
 632              		.loc 2 200 64 is_stmt 0
 633 0220 93072000 		li	a5,2
 634              	#APP
 635              	# 200 "src/../h/riscv.hpp" 1
 636              		csrc sip, a5
 637              	# 0 "" 2
 638              	.LVL42:
 639              	#NO_APP
 640              	.LBE46:
 641              	.LBE45:
GAS LISTING /tmp/ccb10ON1.s 			page 22


 170:src/riscv.cpp ****     /*uint64 volatile sepc = r_sepc();
 171:src/riscv.cpp ****     uint64 volatile sstatus = r_sstatus();
 172:src/riscv.cpp ****     TCB::dispatch();
 173:src/riscv.cpp ****     w_sstatus(sstatus);
 174:src/riscv.cpp ****     w_sepc(sepc);*/
 175:src/riscv.cpp **** }...
 642              		.loc 1 175 1
 643 0228 03348100 		ld	s0,8(sp)
 644              		.cfi_restore 8
 645              		.cfi_def_cfa 2, 16
 646 022c 13010101 		addi	sp,sp,16
 647              		.cfi_def_cfa_offset 0
 648 0230 67800000 		jr	ra
 649              		.cfi_endproc
 650              	.LFE43:
 652              	.Letext0:
 653              		.file 4 "src/../h/../lib/hw.h"
 654              		.file 5 "src/../h/list.hpp"
 655              		.file 6 "src/../h/mySemaphore.hpp"
 656              		.file 7 "src/../h/syscall_c.hpp"
 657              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/ccb10ON1.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccb10ON1.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccb10ON1.s:13     .text:0000000000000000 .L0 
     /tmp/ccb10ON1.s:14     .text:0000000000000000 .L0 
     /tmp/ccb10ON1.s:15     .text:0000000000000004 .L0 
     /tmp/ccb10ON1.s:17     .text:0000000000000008 .L0 
     /tmp/ccb10ON1.s:19     .text:000000000000000c .L0 
     /tmp/ccb10ON1.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccb10ON1.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccb10ON1.s:33     .text:0000000000000014 .L0 
     /tmp/ccb10ON1.s:34     .text:0000000000000018 .L0 
     /tmp/ccb10ON1.s:35     .text:0000000000000018 .L0 
     /tmp/ccb10ON1.s:37     .text:000000000000001c .L0 
     /tmp/ccb10ON1.s:39     .text:0000000000000020 .L0 
     /tmp/ccb10ON1.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccb10ON1.s:48     .text:0000000000000020 .L0 
     /tmp/ccb10ON1.s:49     .text:0000000000000020 .L0 
     /tmp/ccb10ON1.s:50     .text:0000000000000024 .L0 
     /tmp/ccb10ON1.s:54     .text:0000000000000030 .L0 
     /tmp/ccb10ON1.s:55     .text:0000000000000030 .L0 
     /tmp/ccb10ON1.s:56     .text:0000000000000030 .L0 
     /tmp/ccb10ON1.s:58     .text:0000000000000034 .L0 
     /tmp/ccb10ON1.s:63     .text:0000000000000034 .L0 
     /tmp/ccb10ON1.s:64     .text:0000000000000034 .L0 
     /tmp/ccb10ON1.s:65     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:148    .text:0000000000000034 .L0 
     /tmp/ccb10ON1.s:73     .text:000000000000003c .L0 
     /tmp/ccb10ON1.s:74     .text:000000000000003c .L0 
     /tmp/ccb10ON1.s:80     .text:0000000000000040 .L0 
     /tmp/ccb10ON1.s:81     .text:0000000000000040 .L0 
     /tmp/ccb10ON1.s:84     .text:0000000000000044 .L0 
     /tmp/ccb10ON1.s:90     .text:000000000000004c .L0 
     /tmp/ccb10ON1.s:91     .text:0000000000000050 .L0 
     /tmp/ccb10ON1.s:92     .text:0000000000000050 .L0 
     /tmp/ccb10ON1.s:94     .text:0000000000000054 .L0 
     /tmp/ccb10ON1.s:95     .text:0000000000000054 .L0 
     /tmp/ccb10ON1.s:97     .text:0000000000000058 .L0 
     /tmp/ccb10ON1.s:99     .text:000000000000005c .L0 
     /tmp/ccb10ON1.s:103    .text:0000000000000060 .L0 
     /tmp/ccb10ON1.s:109    .text:0000000000000060 .L0 
     /tmp/ccb10ON1.s:110    .text:0000000000000060 .L0 
     /tmp/ccb10ON1.s:111    .text:0000000000000060 .L0 
  src/../h/riscv.hpp:160    .text:0000000000000060 .L0 
     /tmp/ccb10ON1.s:120    .text:0000000000000068 .L0 
     /tmp/ccb10ON1.s:121    .text:0000000000000068 .L0 
     /tmp/ccb10ON1.s:125    .text:000000000000006c .L0 
     /tmp/ccb10ON1.s:127    .text:0000000000000070 .L0 
     /tmp/ccb10ON1.s:131    .text:0000000000000074 .L0 
     /tmp/ccb10ON1.s:132    .text:0000000000000074 .L0 
     /tmp/ccb10ON1.s:133    .text:0000000000000074 .L0 
  src/../h/riscv.hpp:228    .text:0000000000000074 .L0 
     /tmp/ccb10ON1.s:141    .text:000000000000007c .L0 
     /tmp/ccb10ON1.s:142    .text:000000000000007c .L0 
     /tmp/ccb10ON1.s:146    .text:0000000000000080 .L0 
GAS LISTING /tmp/ccb10ON1.s 			page 24


     /tmp/ccb10ON1.s:150    .text:0000000000000084 .L0 
     /tmp/ccb10ON1.s:151    .text:0000000000000084 .L0 
     /tmp/ccb10ON1.s:152    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:241    .text:0000000000000084 .L0 
     /tmp/ccb10ON1.s:160    .text:000000000000008c .L0 
     /tmp/ccb10ON1.s:161    .text:000000000000008c .L0 
     /tmp/ccb10ON1.s:166    .text:0000000000000090 .L0 
     /tmp/ccb10ON1.s:167    .text:0000000000000090 .L0 
     /tmp/ccb10ON1.s:168    .text:0000000000000090 .L0 
     /tmp/ccb10ON1.s:239    .text:00000000000000b8 .L0 
     /tmp/ccb10ON1.s:240    .text:00000000000000b8 .L0 
     /tmp/ccb10ON1.s:241    .text:00000000000000b8 .L0 
     /tmp/ccb10ON1.s:242    .text:00000000000000b8 .L0 
     /tmp/ccb10ON1.s:243    .text:00000000000000b8 .L0 
       src/riscv.cpp:46     .text:00000000000000b8 .L0 
     /tmp/ccb10ON1.s:250    .text:00000000000000bc .L0 
       src/riscv.cpp:47     .text:00000000000000bc .L0 
     /tmp/ccb10ON1.s:256    .text:00000000000000c0 .L0 
       src/riscv.cpp:48     .text:00000000000000c0 .L0 
     /tmp/ccb10ON1.s:262    .text:00000000000000c4 .L0 
     /tmp/ccb10ON1.s:264    .text:00000000000000c4 .L0 
     /tmp/ccb10ON1.s:267    .text:00000000000000cc .L0 
     /tmp/ccb10ON1.s:269    .text:00000000000000d0 .L0 
     /tmp/ccb10ON1.s:271    .text:00000000000000d4 .L0 
       src/riscv.cpp:53     .text:00000000000000d4 .L0 
     /tmp/ccb10ON1.s:277    .text:00000000000000d8 .L0 
       src/riscv.cpp:54     .text:00000000000000d8 .L0 
     /tmp/ccb10ON1.s:285    .text:00000000000000e0 .L0 
       src/riscv.cpp:58     .text:00000000000000e0 .L0 
     /tmp/ccb10ON1.s:291    .text:00000000000000e4 .L0 
       src/riscv.cpp:59     .text:00000000000000e4 .L0 
     /tmp/ccb10ON1.s:300    .text:00000000000000ec .L0 
     /tmp/ccb10ON1.s:301    .text:00000000000000ec .L0 
     /tmp/ccb10ON1.s:302    .text:00000000000000ec .L0 
     /tmp/ccb10ON1.s:309    .text:00000000000000f8 .L0 
     /tmp/ccb10ON1.s:310    .text:00000000000000f8 .L0 
     /tmp/ccb10ON1.s:316    .text:0000000000000100 .L0 
     /tmp/ccb10ON1.s:317    .text:0000000000000100 .L0 
     /tmp/ccb10ON1.s:320    .text:0000000000000108 .L0 
       src/riscv.cpp:67     .text:0000000000000108 .L0 
     /tmp/ccb10ON1.s:326    .text:000000000000010c .L0 
       src/riscv.cpp:68     .text:000000000000010c .L0 
     /tmp/ccb10ON1.s:335    .text:0000000000000110 .L0 
     /tmp/ccb10ON1.s:336    .text:0000000000000110 .L0 
     /tmp/ccb10ON1.s:337    .text:0000000000000110 .L0 
     /tmp/ccb10ON1.s:342    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:234    .text:0000000000000114 .L0 
     /tmp/ccb10ON1.s:352    .text:0000000000000118 .L0 
     /tmp/ccb10ON1.s:353    .text:0000000000000118 .L0 
     /tmp/ccb10ON1.s:358    .text:000000000000011c .L0 
  src/../h/riscv.hpp:166    .text:000000000000011c .L0 
     /tmp/ccb10ON1.s:370    .text:0000000000000120 .L0 
     /tmp/ccb10ON1.s:377    .text:0000000000000124 .L0 
     /tmp/ccb10ON1.s:378    .text:0000000000000124 .L0 
     /tmp/ccb10ON1.s:379    .text:0000000000000124 .L0 
     /tmp/ccb10ON1.s:382    .text:000000000000012c .L0 
     /tmp/ccb10ON1.s:385    .text:0000000000000130 .L0 
GAS LISTING /tmp/ccb10ON1.s 			page 25


     /tmp/ccb10ON1.s:386    .text:0000000000000130 .L0 
     /tmp/ccb10ON1.s:387    .text:0000000000000130 .L0 
       src/riscv.cpp:78     .text:0000000000000130 .L0 
     /tmp/ccb10ON1.s:394    .text:0000000000000134 .L0 
     /tmp/ccb10ON1.s:396    .text:0000000000000134 .L0 
     /tmp/ccb10ON1.s:399    .text:000000000000013c .L0 
     /tmp/ccb10ON1.s:402    .text:0000000000000140 .L0 
     /tmp/ccb10ON1.s:403    .text:0000000000000140 .L0 
     /tmp/ccb10ON1.s:404    .text:0000000000000140 .L0 
     /tmp/ccb10ON1.s:405    .text:0000000000000140 .L0 
       src/riscv.cpp:87     .text:0000000000000140 .L0 
     /tmp/ccb10ON1.s:414    .text:0000000000000148 .L0 
       src/riscv.cpp:88     .text:0000000000000148 .L0 
     /tmp/ccb10ON1.s:421    .text:000000000000014c .L0 
     /tmp/ccb10ON1.s:423    .text:000000000000014c .L0 
     /tmp/ccb10ON1.s:426    .text:0000000000000154 .L0 
     /tmp/ccb10ON1.s:428    .text:0000000000000158 .L0 
     /tmp/ccb10ON1.s:430    .text:000000000000015c .L0 
       src/riscv.cpp:92     .text:000000000000015c .L0 
     /tmp/ccb10ON1.s:436    .text:0000000000000160 .L0 
       src/riscv.cpp:93     .text:0000000000000160 .L0 
     /tmp/ccb10ON1.s:444    .text:0000000000000168 .L0 
       src/riscv.cpp:96     .text:0000000000000168 .L0 
     /tmp/ccb10ON1.s:450    .text:000000000000016c .L0 
       src/riscv.cpp:97     .text:000000000000016c .L0 
     /tmp/ccb10ON1.s:459    .text:0000000000000174 .L0 
     /tmp/ccb10ON1.s:460    .text:0000000000000174 .L0 
       src/riscv.cpp:104    .text:0000000000000174 .L0 
     /tmp/ccb10ON1.s:468    .text:0000000000000178 .L0 
     /tmp/ccb10ON1.s:470    .text:000000000000017c .L0 
     /tmp/ccb10ON1.s:471    .text:000000000000017c .L0 
     /tmp/ccb10ON1.s:475    .text:0000000000000184 .L0 
       src/riscv.cpp:110    .text:0000000000000184 .L0 
     /tmp/ccb10ON1.s:481    .text:0000000000000188 .L0 
       src/riscv.cpp:111    .text:0000000000000188 .L0 
     /tmp/ccb10ON1.s:487    .text:000000000000018c .L0 
     /tmp/ccb10ON1.s:491    .text:0000000000000190 .L0 
     /tmp/ccb10ON1.s:496    .text:0000000000000198 .L0 
     /tmp/ccb10ON1.s:497    .text:0000000000000198 .L0 
       src/riscv.cpp:116    .text:0000000000000198 .L0 
     /tmp/ccb10ON1.s:505    .text:000000000000019c .L0 
     /tmp/ccb10ON1.s:507    .text:00000000000001a0 .L0 
     /tmp/ccb10ON1.s:508    .text:00000000000001a0 .L0 
     /tmp/ccb10ON1.s:512    .text:00000000000001a8 .L0 
       src/riscv.cpp:122    .text:00000000000001a8 .L0 
     /tmp/ccb10ON1.s:518    .text:00000000000001ac .L0 
       src/riscv.cpp:123    .text:00000000000001ac .L0 
     /tmp/ccb10ON1.s:524    .text:00000000000001b0 .L0 
     /tmp/ccb10ON1.s:528    .text:00000000000001b4 .L0 
     /tmp/ccb10ON1.s:533    .text:00000000000001bc .L0 
     /tmp/ccb10ON1.s:534    .text:00000000000001bc .L0 
       src/riscv.cpp:127    .text:00000000000001bc .L0 
     /tmp/ccb10ON1.s:542    .text:00000000000001c0 .L0 
     /tmp/ccb10ON1.s:544    .text:00000000000001c4 .L0 
     /tmp/ccb10ON1.s:545    .text:00000000000001c4 .L0 
     /tmp/ccb10ON1.s:549    .text:00000000000001cc .L0 
       src/riscv.cpp:133    .text:00000000000001cc .L0 
GAS LISTING /tmp/ccb10ON1.s 			page 26


     /tmp/ccb10ON1.s:555    .text:00000000000001d0 .L0 
       src/riscv.cpp:134    .text:00000000000001d0 .L0 
     /tmp/ccb10ON1.s:561    .text:00000000000001d4 .L0 
     /tmp/ccb10ON1.s:565    .text:00000000000001d8 .L0 
     /tmp/ccb10ON1.s:570    .text:00000000000001e0 .L0 
     /tmp/ccb10ON1.s:571    .text:00000000000001e0 .L0 
     /tmp/ccb10ON1.s:572    .text:00000000000001e0 .L0 
     /tmp/ccb10ON1.s:575    .text:00000000000001e8 .L0 
     /tmp/ccb10ON1.s:580    .text:00000000000001ec .L0 
     /tmp/ccb10ON1.s:586    .text:00000000000001ec _ZN5Riscv22handleConsoleInterruptEv
     /tmp/ccb10ON1.s:589    .text:00000000000001ec .L0 
     /tmp/ccb10ON1.s:590    .text:00000000000001ec .L0 
     /tmp/ccb10ON1.s:591    .text:00000000000001f0 .L0 
     /tmp/ccb10ON1.s:594    .text:00000000000001f8 .L0 
     /tmp/ccb10ON1.s:595    .text:00000000000001f8 .L0 
     /tmp/ccb10ON1.s:597    .text:00000000000001fc .L0 
     /tmp/ccb10ON1.s:599    .text:00000000000001fc .L0 
     /tmp/ccb10ON1.s:600    .text:00000000000001fc .L0 
     /tmp/ccb10ON1.s:603    .text:0000000000000204 .L0 
     /tmp/ccb10ON1.s:604    .text:0000000000000208 .L0 
     /tmp/ccb10ON1.s:606    .text:000000000000020c .L0 
     /tmp/ccb10ON1.s:607    .text:000000000000020c .L0 
     /tmp/ccb10ON1.s:609    .text:0000000000000210 .L0 
     /tmp/ccb10ON1.s:611    .text:0000000000000214 .L0 
     /tmp/ccb10ON1.s:617    .text:0000000000000214 _ZN5Riscv20handleTimerInterruptEv
     /tmp/ccb10ON1.s:620    .text:0000000000000214 .L0 
     /tmp/ccb10ON1.s:621    .text:0000000000000214 .L0 
     /tmp/ccb10ON1.s:622    .text:0000000000000218 .L0 
     /tmp/ccb10ON1.s:624    .text:000000000000021c .L0 
     /tmp/ccb10ON1.s:626    .text:0000000000000220 .L0 
     /tmp/ccb10ON1.s:631    .text:0000000000000220 .L0 
     /tmp/ccb10ON1.s:632    .text:0000000000000220 .L0 
     /tmp/ccb10ON1.s:633    .text:0000000000000220 .L0 
     /tmp/ccb10ON1.s:643    .text:0000000000000228 .L0 
     /tmp/ccb10ON1.s:644    .text:000000000000022c .L0 
     /tmp/ccb10ON1.s:645    .text:000000000000022c .L0 
     /tmp/ccb10ON1.s:647    .text:0000000000000230 .L0 
     /tmp/ccb10ON1.s:649    .text:0000000000000234 .L0 
     /tmp/ccb10ON1.s:658    .text:0000000000000234 .L0 
     /tmp/ccb10ON1.s:182    .rodata:0000000000000000 .L7
     /tmp/ccb10ON1.s:174    .text:00000000000000a0 .L0 
     /tmp/ccb10ON1.s:302    .text:00000000000000ec .L0 
     /tmp/ccb10ON1.s:102    .text:0000000000000060 .L25
     /tmp/ccb10ON1.s:332    .text:0000000000000110 .L5
     /tmp/ccb10ON1.s:283    .text:00000000000000e0 .L16
     /tmp/ccb10ON1.s:87     .text:000000000000004c .L3
     /tmp/ccb10ON1.s:442    .text:0000000000000168 .L17
     /tmp/ccb10ON1.s:489    .text:0000000000000190 .L21
     /tmp/ccb10ON1.s:473    .text:0000000000000184 .L18
     /tmp/ccb10ON1.s:526    .text:00000000000001b4 .L22
     /tmp/ccb10ON1.s:510    .text:00000000000001a8 .L19
     /tmp/ccb10ON1.s:563    .text:00000000000001d8 .L23
     /tmp/ccb10ON1.s:547    .text:00000000000001cc .L20
     /tmp/ccb10ON1.s:235    .text:00000000000000b8 .L15
     /tmp/ccb10ON1.s:298    .text:00000000000000ec .L14
     /tmp/ccb10ON1.s:371    .text:0000000000000124 .L13
     /tmp/ccb10ON1.s:383    .text:0000000000000130 .L12
GAS LISTING /tmp/ccb10ON1.s 			page 27


     /tmp/ccb10ON1.s:400    .text:0000000000000140 .L11
     /tmp/ccb10ON1.s:457    .text:0000000000000174 .L10
     /tmp/ccb10ON1.s:494    .text:0000000000000198 .L9
     /tmp/ccb10ON1.s:531    .text:00000000000001bc .L8
     /tmp/ccb10ON1.s:568    .text:00000000000001e0 .L6
     /tmp/ccb10ON1.s:2105   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccb10ON1.s:3512   .debug_str:0000000000000831 .LASF169
     /tmp/ccb10ON1.s:3574   .debug_str:0000000000000a4b .LASF170
     /tmp/ccb10ON1.s:3498   .debug_str:00000000000007bb .LASF171
     /tmp/ccb10ON1.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccb10ON1.s:652    .text:0000000000000234 .Letext0
     /tmp/ccb10ON1.s:3230   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccb10ON1.s:3338   .debug_str:0000000000000363 .LASF0
     /tmp/ccb10ON1.s:3370   .debug_str:0000000000000428 .LASF1
     /tmp/ccb10ON1.s:3458   .debug_str:00000000000006ba .LASF2
     /tmp/ccb10ON1.s:3466   .debug_str:00000000000006fc .LASF4
     /tmp/ccb10ON1.s:3344   .debug_str:000000000000038a .LASF3
     /tmp/ccb10ON1.s:3244   .debug_str:0000000000000079 .LASF5
     /tmp/ccb10ON1.s:3426   .debug_str:00000000000005d4 .LASF6
     /tmp/ccb10ON1.s:3362   .debug_str:00000000000003dc .LASF7
     /tmp/ccb10ON1.s:3316   .debug_str:00000000000002aa .LASF8
     /tmp/ccb10ON1.s:3326   .debug_str:0000000000000301 .LASF9
     /tmp/ccb10ON1.s:3268   .debug_str:0000000000000120 .LASF10
     /tmp/ccb10ON1.s:3310   .debug_str:0000000000000285 .LASF11
     /tmp/ccb10ON1.s:3280   .debug_str:0000000000000191 .LASF12
     /tmp/ccb10ON1.s:3266   .debug_str:0000000000000110 .LASF13
     /tmp/ccb10ON1.s:3494   .debug_str:000000000000079a .LASF14
     /tmp/ccb10ON1.s:3300   .debug_str:0000000000000211 .LASF15
     /tmp/ccb10ON1.s:3482   .debug_str:000000000000074d .LASF16
     /tmp/ccb10ON1.s:3552   .debug_str:00000000000009fe .LASF96
     /tmp/ccb10ON1.s:3446   .debug_str:0000000000000663 .LASF172
     /tmp/ccb10ON1.s:3374   .debug_str:0000000000000441 .LASF17
     /tmp/ccb10ON1.s:3306   .debug_str:0000000000000265 .LASF18
     /tmp/ccb10ON1.s:3576   .debug_str:0000000000000a59 .LASF19
     /tmp/ccb10ON1.s:3330   .debug_str:0000000000000328 .LASF52
     /tmp/ccb10ON1.s:3336   .debug_str:000000000000034b .LASF54
     /tmp/ccb10ON1.s:3534   .debug_str:000000000000098e .LASF20
     /tmp/ccb10ON1.s:3528   .debug_str:0000000000000951 .LASF22
     /tmp/ccb10ON1.s:3454   .debug_str:00000000000006a6 .LASF24
     /tmp/ccb10ON1.s:3410   .debug_str:0000000000000564 .LASF26
     /tmp/ccb10ON1.s:3438   .debug_str:0000000000000627 .LASF21
     /tmp/ccb10ON1.s:3442   .debug_str:000000000000063c .LASF23
     /tmp/ccb10ON1.s:3404   .debug_str:0000000000000527 .LASF25
     /tmp/ccb10ON1.s:3364   .debug_str:00000000000003ef .LASF27
     /tmp/ccb10ON1.s:3572   .debug_str:0000000000000a43 .LASF28
     /tmp/ccb10ON1.s:3518   .debug_str:0000000000000916 .LASF29
     /tmp/ccb10ON1.s:3400   .debug_str:000000000000051a .LASF30
     /tmp/ccb10ON1.s:3408   .debug_str:0000000000000550 .LASF31
     /tmp/ccb10ON1.s:3378   .debug_str:0000000000000463 .LASF32
     /tmp/ccb10ON1.s:3444   .debug_str:000000000000064f .LASF33
     /tmp/ccb10ON1.s:3590   .debug_str:0000000000000ae2 .LASF34
     /tmp/ccb10ON1.s:3342   .debug_str:0000000000000376 .LASF35
     /tmp/ccb10ON1.s:3490   .debug_str:0000000000000782 .LASF36
     /tmp/ccb10ON1.s:3470   .debug_str:0000000000000708 .LASF37
     /tmp/ccb10ON1.s:3472   .debug_str:000000000000071b .LASF38
     /tmp/ccb10ON1.s:3270   .debug_str:000000000000012f .LASF39
     /tmp/ccb10ON1.s:3296   .debug_str:0000000000000201 .LASF40
GAS LISTING /tmp/ccb10ON1.s 			page 28


     /tmp/ccb10ON1.s:3334   .debug_str:0000000000000339 .LASF41
     /tmp/ccb10ON1.s:3340   .debug_str:0000000000000370 .LASF42
     /tmp/ccb10ON1.s:3288   .debug_str:00000000000001d0 .LASF43
     /tmp/ccb10ON1.s:3246   .debug_str:0000000000000080 .LASF44
     /tmp/ccb10ON1.s:3462   .debug_str:00000000000006d9 .LASF45
     /tmp/ccb10ON1.s:3456   .debug_str:00000000000006af .LASF46
     /tmp/ccb10ON1.s:3586   .debug_str:0000000000000abe .LASF47
     /tmp/ccb10ON1.s:3554   .debug_str:0000000000000a04 .LASF48
     /tmp/ccb10ON1.s:3580   .debug_str:0000000000000a69 .LASF49
     /tmp/ccb10ON1.s:3546   .debug_str:00000000000009cf .LASF50
     /tmp/ccb10ON1.s:3388   .debug_str:0000000000000496 .LASF51
     /tmp/ccb10ON1.s:3566   .debug_str:0000000000000a2a .LASF53
     /tmp/ccb10ON1.s:3324   .debug_str:00000000000002e5 .LASF55
     /tmp/ccb10ON1.s:3474   .debug_str:0000000000000722 .LASF56
     /tmp/ccb10ON1.s:3418   .debug_str:0000000000000594 .LASF57
     /tmp/ccb10ON1.s:3558   .debug_str:0000000000000a16 .LASF58
     /tmp/ccb10ON1.s:3416   .debug_str:0000000000000583 .LASF59
     /tmp/ccb10ON1.s:3348   .debug_str:00000000000003ad .LASF60
     /tmp/ccb10ON1.s:3492   .debug_str:0000000000000789 .LASF61
     /tmp/ccb10ON1.s:3560   .debug_str:0000000000000a1b .LASF62
     /tmp/ccb10ON1.s:3346   .debug_str:000000000000039c .LASF63
     /tmp/ccb10ON1.s:3350   .debug_str:00000000000003b2 .LASF64
     /tmp/ccb10ON1.s:3424   .debug_str:00000000000005c3 .LASF65
     /tmp/ccb10ON1.s:3562   .debug_str:0000000000000a20 .LASF66
     /tmp/ccb10ON1.s:3258   .debug_str:00000000000000b5 .LASF67
     /tmp/ccb10ON1.s:3352   .debug_str:00000000000003b7 .LASF68
     /tmp/ccb10ON1.s:3360   .debug_str:00000000000003cb .LASF69
     /tmp/ccb10ON1.s:3564   .debug_str:0000000000000a25 .LASF70
     /tmp/ccb10ON1.s:3592   .debug_str:0000000000000aea .LASF71
     /tmp/ccb10ON1.s:3354   .debug_str:00000000000003bc .LASF72
     /tmp/ccb10ON1.s:3294   .debug_str:00000000000001f0 .LASF73
     /tmp/ccb10ON1.s:3412   .debug_str:0000000000000579 .LASF74
     /tmp/ccb10ON1.s:3522   .debug_str:0000000000000933 .LASF75
     /tmp/ccb10ON1.s:3356   .debug_str:00000000000003c1 .LASF76
     /tmp/ccb10ON1.s:3234   .debug_str:0000000000000015 .LASF77
     /tmp/ccb10ON1.s:3568   .debug_str:0000000000000a39 .LASF78
     /tmp/ccb10ON1.s:3450   .debug_str:0000000000000685 .LASF79
     /tmp/ccb10ON1.s:3358   .debug_str:00000000000003c6 .LASF80
     /tmp/ccb10ON1.s:3530   .debug_str:0000000000000966 .LASF81
     /tmp/ccb10ON1.s:3570   .debug_str:0000000000000a3e .LASF82
     /tmp/ccb10ON1.s:3386   .debug_str:0000000000000485 .LASF83
     /tmp/ccb10ON1.s:3254   .debug_str:00000000000000a2 .LASF84
     /tmp/ccb10ON1.s:3460   .debug_str:00000000000006c8 .LASF85
     /tmp/ccb10ON1.s:3420   .debug_str:00000000000005b2 .LASF86
     /tmp/ccb10ON1.s:3320   .debug_str:00000000000002ca .LASF87
     /tmp/ccb10ON1.s:3524   .debug_str:0000000000000944 .LASF88
     /tmp/ccb10ON1.s:3392   .debug_str:00000000000004c9 .LASF89
     /tmp/ccb10ON1.s:3432   .debug_str:0000000000000601 .LASF90
     /tmp/ccb10ON1.s:3304   .debug_str:0000000000000243 .LASF92
     /tmp/ccb10ON1.s:3496   .debug_str:00000000000007a6 .LASF91
     /tmp/ccb10ON1.s:3406   .debug_str:000000000000052e .LASF93
     /tmp/ccb10ON1.s:3284   .debug_str:00000000000001af .LASF94
     /tmp/ccb10ON1.s:3394   .debug_str:00000000000004da .LASF95
     /tmp/ccb10ON1.s:3428   .debug_str:00000000000005e7 .LASF97
     /tmp/ccb10ON1.s:3536   .debug_str:0000000000000997 .LASF173
     /tmp/ccb10ON1.s:3488   .debug_str:000000000000077d .LASF98
     /tmp/ccb10ON1.s:3402   .debug_str:0000000000000522 .LASF99
GAS LISTING /tmp/ccb10ON1.s 			page 29


     /tmp/ccb10ON1.s:3396   .debug_str:00000000000004fe .LASF100
     /tmp/ccb10ON1.s:3484   .debug_str:0000000000000763 .LASF102
     /tmp/ccb10ON1.s:3308   .debug_str:000000000000026e .LASF107
     /tmp/ccb10ON1.s:3286   .debug_str:00000000000001c6 .LASF174
     /tmp/ccb10ON1.s:3448   .debug_str:000000000000066e .LASF175
     /tmp/ccb10ON1.s:3366   .debug_str:0000000000000402 .LASF101
     /tmp/ccb10ON1.s:3262   .debug_str:00000000000000db .LASF103
     /tmp/ccb10ON1.s:3380   .debug_str:000000000000046b .LASF104
     /tmp/ccb10ON1.s:3302   .debug_str:0000000000000227 .LASF105
     /tmp/ccb10ON1.s:3422   .debug_str:00000000000005b7 .LASF106
     /tmp/ccb10ON1.s:3548   .debug_str:00000000000009d9 .LASF108
     /tmp/ccb10ON1.s:3594   .debug_str:0000000000000afb .LASF109
     /tmp/ccb10ON1.s:3584   .debug_str:0000000000000aa3 .LASF110
     /tmp/ccb10ON1.s:3476   .debug_str:0000000000000733 .LASF111
     /tmp/ccb10ON1.s:3390   .debug_str:00000000000004ac .LASF112
     /tmp/ccb10ON1.s:3434   .debug_str:0000000000000616 .LASF113
     /tmp/ccb10ON1.s:3238   .debug_str:000000000000002b .LASF114
     /tmp/ccb10ON1.s:3502   .debug_str:0000000000000806 .LASF176
     /tmp/ccb10ON1.s:3468   .debug_str:0000000000000703 .LASF115
     /tmp/ccb10ON1.s:3242   .debug_str:000000000000006d .LASF116
     /tmp/ccb10ON1.s:3504   .debug_str:000000000000080e .LASF117
     /tmp/ccb10ON1.s:3398   .debug_str:0000000000000503 .LASF118
     /tmp/ccb10ON1.s:3252   .debug_str:0000000000000096 .LASF119
     /tmp/ccb10ON1.s:3532   .debug_str:0000000000000977 .LASF120
     /tmp/ccb10ON1.s:3298   .debug_str:0000000000000207 .LASF121
     /tmp/ccb10ON1.s:3260   .debug_str:00000000000000c6 .LASF122
     /tmp/ccb10ON1.s:3506   .debug_str:0000000000000819 .LASF123
     /tmp/ccb10ON1.s:3276   .debug_str:0000000000000161 .LASF124
     /tmp/ccb10ON1.s:3516   .debug_str:0000000000000909 .LASF125
     /tmp/ccb10ON1.s:3540   .debug_str:00000000000009a1 .LASF126
     /tmp/ccb10ON1.s:3414   .debug_str:000000000000057e .LASF158
     /tmp/ccb10ON1.s:3372   .debug_str:000000000000043b .LASF127
     /tmp/ccb10ON1.s:3452   .debug_str:0000000000000696 .LASF128
     /tmp/ccb10ON1.s:3510   .debug_str:0000000000000829 .LASF177
     /tmp/ccb10ON1.s:3514   .debug_str:00000000000008f5 .LASF178
     /tmp/ccb10ON1.s:3236   .debug_str:0000000000000026 .LASF129
     /tmp/ccb10ON1.s:3478   .debug_str:000000000000073e .LASF130
     /tmp/ccb10ON1.s:3526   .debug_str:0000000000000949 .LASF131
     /tmp/ccb10ON1.s:3480   .debug_str:0000000000000744 .LASF132
     /tmp/ccb10ON1.s:3436   .debug_str:000000000000061f .LASF133
     /tmp/ccb10ON1.s:3256   .debug_str:00000000000000a7 .LASF134
     /tmp/ccb10ON1.s:3376   .debug_str:000000000000044a .LASF135
     /tmp/ccb10ON1.s:3282   .debug_str:00000000000001a1 .LASF138
     /tmp/ccb10ON1.s:3240   .debug_str:0000000000000045 .LASF140
     /tmp/ccb10ON1.s:3290   .debug_str:00000000000001e2 .LASF136
     /tmp/ccb10ON1.s:3274   .debug_str:000000000000014e .LASF137
     /tmp/ccb10ON1.s:3508   .debug_str:0000000000000824 .LASF139
     /tmp/ccb10ON1.s:3312   .debug_str:0000000000000294 .LASF141
     /tmp/ccb10ON1.s:3464   .debug_str:00000000000006f1 .LASF179
     /tmp/ccb10ON1.s:3382   .debug_str:0000000000000473 .LASF142
     /tmp/ccb10ON1.s:3272   .debug_str:0000000000000142 .LASF143
     /tmp/ccb10ON1.s:3232   .debug_str:0000000000000000 .LASF144
     /tmp/ccb10ON1.s:3292   .debug_str:00000000000001eb .LASF145
     /tmp/ccb10ON1.s:3264   .debug_str:00000000000000f8 .LASF146
     /tmp/ccb10ON1.s:3500   .debug_str:00000000000007ff .LASF147
     /tmp/ccb10ON1.s:3278   .debug_str:0000000000000177 .LASF148
     /tmp/ccb10ON1.s:3430   .debug_str:00000000000005f1 .LASF149
GAS LISTING /tmp/ccb10ON1.s 			page 30


     /tmp/ccb10ON1.s:3582   .debug_str:0000000000000a7f .LASF150
     /tmp/ccb10ON1.s:3520   .debug_str:000000000000092a .LASF151
     /tmp/ccb10ON1.s:3368   .debug_str:000000000000040b .LASF152
     /tmp/ccb10ON1.s:3248   .debug_str:000000000000008b .LASF153
     /tmp/ccb10ON1.s:3328   .debug_str:000000000000030f .LASF154
     /tmp/ccb10ON1.s:3550   .debug_str:00000000000009f7 .LASF155
     /tmp/ccb10ON1.s:3332   .debug_str:0000000000000333 .LASF156
     /tmp/ccb10ON1.s:3544   .debug_str:00000000000009c6 .LASF157
     /tmp/ccb10ON1.s:618    .text:0000000000000214 .LFB43
     /tmp/ccb10ON1.s:650    .text:0000000000000234 .LFE43
     /tmp/ccb10ON1.s:629    .text:0000000000000220 .LBB45
     /tmp/ccb10ON1.s:641    .text:0000000000000228 .LBE45
     /tmp/ccb10ON1.s:3050   .debug_loc:0000000000000000 .LLST14
     /tmp/ccb10ON1.s:587    .text:00000000000001ec .LFB42
     /tmp/ccb10ON1.s:612    .text:0000000000000214 .LFE42
     /tmp/ccb10ON1.s:601    .text:0000000000000204 .LVL40
     /tmp/ccb10ON1.s:46     .text:0000000000000020 .LFB41
     /tmp/ccb10ON1.s:581    .text:00000000000001ec .LFE41
     /tmp/ccb10ON1.s:3486   .debug_str:0000000000000776 .LASF159
     /tmp/ccb10ON1.s:3058   .debug_loc:0000000000000024 .LLST0
     /tmp/ccb10ON1.s:3216   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccb10ON1.s:3538   .debug_str:000000000000099c .LASF160
     /tmp/ccb10ON1.s:3556   .debug_str:0000000000000a0e .LASF161
     /tmp/ccb10ON1.s:3440   .debug_str:000000000000062e .LASF162
     /tmp/ccb10ON1.s:3077   .debug_loc:0000000000000071 .LLST1
     /tmp/ccb10ON1.s:3588   .debug_str:0000000000000ad6 .LASF163
     /tmp/ccb10ON1.s:3090   .debug_loc:00000000000000a9 .LLST2
     /tmp/ccb10ON1.s:3384   .debug_str:0000000000000478 .LASF164
     /tmp/ccb10ON1.s:3105   .debug_loc:00000000000000f2 .LLST3
     /tmp/ccb10ON1.s:3132   .debug_loc:0000000000000174 .LLST4
     /tmp/ccb10ON1.s:3139   .debug_loc:0000000000000197 .LLST5
     /tmp/ccb10ON1.s:3146   .debug_loc:00000000000001ba .LLST6
     /tmp/ccb10ON1.s:3578   .debug_str:0000000000000a62 .LASF165
     /tmp/ccb10ON1.s:3153   .debug_loc:00000000000001dd .LLST7
     /tmp/ccb10ON1.s:3250   .debug_str:0000000000000091 .LASF166
     /tmp/ccb10ON1.s:3160   .debug_loc:0000000000000200 .LLST8
     /tmp/ccb10ON1.s:3322   .debug_str:00000000000002db .LASF167
     /tmp/ccb10ON1.s:3167   .debug_loc:0000000000000223 .LLST9
     /tmp/ccb10ON1.s:305    .text:00000000000000f8 .LBB34
     /tmp/ccb10ON1.s:314    .text:0000000000000100 .LBE34
     /tmp/ccb10ON1.s:3174   .debug_loc:0000000000000246 .LLST10
     /tmp/ccb10ON1.s:3182   .debug_loc:000000000000026a .LLST11
     /tmp/ccb10ON1.s:265    .text:00000000000000cc .LVL11
     /tmp/ccb10ON1.s:318    .text:0000000000000108 .LVL15
     /tmp/ccb10ON1.s:380    .text:000000000000012c .LVL20
     /tmp/ccb10ON1.s:397    .text:000000000000013c .LVL22
     /tmp/ccb10ON1.s:424    .text:0000000000000154 .LVL25
     /tmp/ccb10ON1.s:472    .text:0000000000000184 .LVL28
     /tmp/ccb10ON1.s:509    .text:00000000000001a8 .LVL32
     /tmp/ccb10ON1.s:546    .text:00000000000001cc .LVL36
     /tmp/ccb10ON1.s:573    .text:00000000000001e8 .LVL39
     /tmp/ccb10ON1.s:107    .text:0000000000000060 .LBB26
     /tmp/ccb10ON1.s:123    .text:000000000000006c .LBE26
     /tmp/ccb10ON1.s:129    .text:0000000000000074 .LBB28
     /tmp/ccb10ON1.s:144    .text:0000000000000080 .LBE28
     /tmp/ccb10ON1.s:148    .text:0000000000000084 .LBB30
     /tmp/ccb10ON1.s:164    .text:0000000000000090 .LBE30
GAS LISTING /tmp/ccb10ON1.s 			page 31


     /tmp/ccb10ON1.s:339    .text:0000000000000114 .LBB37
     /tmp/ccb10ON1.s:350    .text:0000000000000118 .LBE37
     /tmp/ccb10ON1.s:3189   .debug_loc:000000000000028d .LLST12
     /tmp/ccb10ON1.s:355    .text:000000000000011c .LBB39
     /tmp/ccb10ON1.s:366    .text:0000000000000120 .LBE39
     /tmp/ccb10ON1.s:3196   .debug_loc:00000000000002b0 .LLST13
     /tmp/ccb10ON1.s:60     .text:0000000000000034 .LBB22
     /tmp/ccb10ON1.s:77     .text:0000000000000040 .LBE22
     /tmp/ccb10ON1.s:10     .text:0000000000000000 .LFB40
     /tmp/ccb10ON1.s:40     .text:0000000000000020 .LFE40
     /tmp/ccb10ON1.s:3314   .debug_str:00000000000002a5 .LASF180
     /tmp/ccb10ON1.s:3542   .debug_str:00000000000009c1 .LASF168
     /tmp/ccb10ON1.s:3318   .debug_str:00000000000002ba .LASF181
     /tmp/ccb10ON1.s:628    .text:0000000000000220 .LVL41
     /tmp/ccb10ON1.s:638    .text:0000000000000228 .LVL42
     /tmp/ccb10ON1.s:75     .text:0000000000000040 .LVL0
     /tmp/ccb10ON1.s:82     .text:0000000000000044 .LVL1
     /tmp/ccb10ON1.s:86     .text:000000000000004c .LVL2
     /tmp/ccb10ON1.s:101    .text:0000000000000060 .LVL3
     /tmp/ccb10ON1.s:116    .text:0000000000000064 .LVL4
     /tmp/ccb10ON1.s:162    .text:0000000000000090 .LVL5
     /tmp/ccb10ON1.s:169    .text:0000000000000094 .LVL6
     /tmp/ccb10ON1.s:173    .text:00000000000000a0 .LVL7
     /tmp/ccb10ON1.s:488    .text:0000000000000190 .LVL29
     /tmp/ccb10ON1.s:525    .text:00000000000001b4 .LVL33
     /tmp/ccb10ON1.s:562    .text:00000000000001d8 .LVL37
     /tmp/ccb10ON1.s:465    .text:0000000000000178 .LVL27
     /tmp/ccb10ON1.s:492    .text:0000000000000194 .LVL30
     /tmp/ccb10ON1.s:502    .text:000000000000019c .LVL31
     /tmp/ccb10ON1.s:529    .text:00000000000001b8 .LVL34
     /tmp/ccb10ON1.s:539    .text:00000000000001c0 .LVL35
     /tmp/ccb10ON1.s:566    .text:00000000000001dc .LVL38
     /tmp/ccb10ON1.s:248    .text:00000000000000bc .LVL8
     /tmp/ccb10ON1.s:297    .text:00000000000000ec .LVL12
     /tmp/ccb10ON1.s:254    .text:00000000000000c0 .LVL9
     /tmp/ccb10ON1.s:260    .text:00000000000000c4 .LVL10
     /tmp/ccb10ON1.s:392    .text:0000000000000134 .LVL21
     /tmp/ccb10ON1.s:412    .text:0000000000000148 .LVL23
     /tmp/ccb10ON1.s:419    .text:000000000000014c .LVL24
     /tmp/ccb10ON1.s:456    .text:0000000000000174 .LVL26
     /tmp/ccb10ON1.s:304    .text:00000000000000f8 .LVL13
     /tmp/ccb10ON1.s:312    .text:0000000000000100 .LVL14
     /tmp/ccb10ON1.s:338    .text:0000000000000114 .LVL16
     /tmp/ccb10ON1.s:347    .text:0000000000000118 .LVL17
     /tmp/ccb10ON1.s:354    .text:000000000000011c .LVL18
     /tmp/ccb10ON1.s:363    .text:0000000000000120 .LVL19
     /tmp/ccb10ON1.s:659    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccb10ON1.s:105    .text:0000000000000060 .LBB25
     /tmp/ccb10ON1.s:367    .text:0000000000000120 .LBE25
     /tmp/ccb10ON1.s:373    .text:0000000000000124 .LBB42
     /tmp/ccb10ON1.s:578    .text:00000000000001ec .LBE42
     /tmp/ccb10ON1.s:237    .text:00000000000000b8 .LBB33
     /tmp/ccb10ON1.s:333    .text:0000000000000110 .LBE33
     /tmp/ccb10ON1.s:375    .text:0000000000000124 .LBB36
     /tmp/ccb10ON1.s:576    .text:00000000000001ec .LBE36

UNDEFINED SYMBOLS
GAS LISTING /tmp/ccb10ON1.s 			page 32


_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
_ZN3TCB4joinEPS_
_ZN11MySemaphore15createSemaphoreEj
_ZN11MySemaphore5closeEv
_ZN11MySemaphore4waitEv
_ZN11MySemaphore6signalEv
console_handler
